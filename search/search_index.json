{"config":{"lang":["en","ru","ja","es","pt","nl","fr","it"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s]+"},"docs":[{"location":"","text":"Build fast, reliable, end-to-end tests. SeleniumBase is a Python framework for web automation, end-to-end testing, and more. Tests are run with \"pytest\". Browsers are controlled by WebDriver.  d83d de80 Start |  d83d ddc2 fe0f Features |  d83d dda5 fe0f CLI |  d83d dc68 200d d83c dfeb Examples |  267b fe0f Boilerplates |  d83d ddfe Locales |  d83d ddc4 fe0f PkgManager  d83d dcd7 API |  d83d dcca Reports |  d83d dcbb Scripts |  d83d dcf1 Mobile |  d83d dd21 Syntax Formats |  d83c df10 Grid Hub |  23fa fe0f Recorder  d83e dd16 CI |  d83c df0f Translate |  d83d ddfa fe0f Tours |  d83d ddbc fe0f VisualTest |  d83d dcd1 Presenter |  d83d dcc8 ChartMaker |  d83d dec2 MasterQA  2705 Has a complete API for Web-UI testing.  2705 Expands pytest command-line options .  2705 Includes scripts for driver management.  2705 Includes tools for dashboards & reports . (Example: test_swag_labs.py in Demo Mode.) pytest test_swag_labs.py --demo Python Setup:  d83d dd35 Add Python and Git to your System PATH.  d83d dd35 Create a Python virtual environment . Install SeleniumBase:  d83d dd35 You can install seleniumbase from GitHub : git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install . # Normal installation pip install -e . # Editable install (When using a virtual env, the Editable install is faster.)  d83d dd35 You can also install seleniumbase from pypi : pip install seleniumbase (Add --upgrade OR -U to upgrade an installation.) (Add --force-reinstall to upgrade dependencies.) (Use pip3 if multiple versions of Python are installed.)  d83d dd35 Type seleniumbase or sbase to verify that SeleniumBase was installed successfully: ______ __ _ ____ / ____/__ / /__ ____ ( _ ) _ ______ ___ / _ \\_ ___ ________ \\_ _ \\/ _ \\/ / _ \\/ __ \\/ / / / / __ ` __ \\/ /_ ) / __ \\/ ___/ _ \\ ___/ / __/ / __/ / / / / /_/ / / / / / / /_ ) / ( _/ /__ / __/ /____/ \\_ __/_/ \\_ __/_/ /_/_/ \\_ _,_/_/ /_/ /_/_____/ \\_ _,_/____/ \\_ __/ ----------------------------------------------------------------- * USAGE: \"seleniumbase [COMMAND] [PARAMETERS]\" * OR: \"sbase [COMMAND] [PARAMETERS]\" COMMANDS: install [ DRIVER ] [ OPTIONS ] options ( List common pytest options ) mkdir [ DIRECTORY ] [ OPTIONS ] mkfile [ FILE.py ] [ OPTIONS ] mkpres [ FILE.py ] [ LANG ] print [ FILE ] [ OPTIONS ] translate [ SB_FILE.py ] [ LANG ] [ ACTION ] convert [ WEBDRIVER_UNITTEST_FILE.py ] extract-objects [ SB_FILE.py ] inject-objects [ SB_FILE.py ] [ OPTIONS ] objectify [ SB_FILE.py ] [ OPTIONS ] revert-objects [ SB_FILE.py ] [ OPTIONS ] encrypt ( OR: obfuscate ) decrypt ( OR: unobfuscate ) download server ( The Selenium Grid JAR file ) grid-hub [ start | stop ] [ OPTIONS ] grid-node [ start | stop ] --hub =[ HOST/IP ] * ( EXAMPLE: \"sbase install chromedriver latest\" ) * Type \"sbase help [COMMAND]\" for specific command info. For info on all commands, type: \"seleniumbase --help\" . * ( Use \"pytest\" for running tests ) * Download a webdriver:  2705 SeleniumBase can download webdrivers to the seleniumbase/drivers folder with the install command: sbase install chromedriver You need a different webdriver for each browser to automate: chromedriver for Chrome, edgedriver for Edge, geckodriver for Firefox, and operadriver for Opera. If you have the latest version of Chrome installed, get the latest chromedriver ( otherwise it defaults to chromedriver 2.44 for compatibility reasons ): sbase install chromedriver latest If you run a test without the correct webdriver installed, the driver will be downloaded automatically. (See seleniumbase.io/seleniumbase/console_scripts/ReadMe/ for more information on SeleniumBase console scripts.) Running tests:  d83d dd35 If you've cloned SeleniumBase from GitHub, you can run sample tests from the examples/ folder: cd examples/ pytest test_demo_site.py (Chrome is the default browser if not specified with --browser=BROWSER . On Linux, --headless is the default behavior. You can also run in headless mode on any OS. If your Linux machine has a GUI and you want to see the web browser as tests run, add --headed or --gui .)  d83d dd35 Here are more examples that you can run: pytest my_first_test.py pytest test_swag_labs.py  d83d dd35 Run my_first_test.py in Demo Mode: pytest my_first_test.py --demo Here's the code for my_first_test.py : from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_basics ( self ): url = \"https://store.xkcd.com/collections/posters\" self . open ( url ) self . type ( 'input[name=\"q\"]' , \"xkcd book\" ) self . click ( 'input[value=\"Search\"]' ) self . assert_text ( \"xkcd: volume 0\" , \"h3\" ) self . open ( \"https://xkcd.com/353/\" ) self . assert_title ( \"xkcd: Python\" ) self . assert_element ( 'img[alt=\"Python\"]' ) self . click ( 'a[rel=\"license\"]' ) self . assert_text ( \"free to copy and reuse\" ) self . go_back () self . click_link ( \"About\" ) self . assert_exact_text ( \"xkcd.com\" , \"h2\" ) By default, CSS Selectors are used for finding page elements. If you're new to CSS Selectors, games like Flukeout can help you learn. Here are some common SeleniumBase methods you might find in tests: self . open ( URL ) # Navigate to the web page self . click ( SELECTOR ) # Click a page element self . type ( SELECTOR , TEXT ) # Type text (Add \"\\n\" to text for pressing enter/return.) self . assert_element ( SELECTOR ) # Assert element is visible self . assert_text ( TEXT ) # Assert text is visible (has optional SELECTOR arg) self . assert_title ( PAGE_TITLE ) # Assert page title self . assert_no_404_errors () # Assert no 404 errors from files on the page self . assert_no_js_errors () # Assert no JavaScript errors on the page (Chrome-ONLY) self . execute_script ( JAVASCRIPT ) # Execute JavaScript code self . go_back () # Navigate to the previous URL self . get_text ( SELECTOR ) # Get text from a selector self . get_attribute ( SELECTOR , ATTRIBUTE ) # Get a specific attribute from a selector self . is_element_visible ( SELECTOR ) # Determine if an element is visible on the page self . is_text_visible ( TEXT ) # Determine if text is visible on the page (optional SELECTOR) self . hover_and_click ( HOVER_SELECTOR , CLICK_SELECTOR ) # Mouseover element & click another self . select_option_by_text ( DROPDOWN_SELECTOR , OPTION_TEXT ) # Select a dropdown option self . switch_to_frame ( FRAME_NAME ) # Switch webdriver control to an iframe on the page self . switch_to_default_content () # Switch webdriver control out of the current iframe self . switch_to_window ( WINDOW_NUMBER ) # Switch to a different window/tab self . save_screenshot ( FILE_NAME ) # Save a screenshot of the current page  d83d dd35 For the complete list of SeleniumBase methods, see: Method Summary Learn More:  2705 Automatic WebDriver Abilities: SeleniumBase automatically handles common WebDriver actions such as spinning up web browsers and saving screenshots during test failures. ( Read more about customizing test runs . )  2705 Simplified Code: SeleniumBase uses simple syntax for commands. Example: self . type ( \"input\" , \"dogs \\n \" ) SeleniumBase tests can be run with both pytest and nosetests , but using pytest is recommended. ( chrome is the default browser if not specified.) pytest my_first_test.py --browser = chrome nosetests test_suite.py --browser = firefox  2705 Automatic Test Discovery: All Python methods that start with test_ will automatically be run when using pytest or nosetests on a Python file, ( or on folders containing Python files ). You can also be more specific on what to run within a file by using the following: ( Note that the syntax is different for pytest vs nosetests. ) pytest [ FILE_NAME.py ] :: [ CLASS_NAME ] :: [ METHOD_NAME ] nosetests [ FILE_NAME.py ] : [ CLASS_NAME ] . [ METHOD_NAME ]  2705 No More Flaky Tests: SeleniumBase methods automatically wait for page elements to finish loading before interacting with them ( up to a timeout limit ). This means you no longer need random time.sleep() statements in your scripts.  2705 Automated/Manual Hybrid Mode: SeleniumBase includes a solution called MasterQA , which speeds up manual testing by having automation perform all the browser actions while the manual tester handles validation.  2705 Feature-Rich: For a full list of SeleniumBase features, Click Here . Detailed Instructions: Use Demo Mode to help you see what tests are asserting.  d83d dd35 If the example test is moving too fast for your eyes, you can run it in Demo Mode by adding --demo on the command-line, which pauses the browser briefly between actions, highlights page elements being acted on, and lets you know what test assertions are happening in real time: pytest my_first_test.py --demo  d83d dd35 Pytest includes test discovery. If you don't specify a specific file or folder to run from, pytest will search all subdirectories automatically for tests to run based on the following matching criteria: Python filenames that start with test_ or end with _test.py . Python methods that start with test_ . The Python class name can be anything since SeleniumBase's BaseCase class inherits from the unittest.TestCase class. You can see which tests are getting discovered by pytest by using: pytest --collect-only -q  d83d dd35 You can use the following calls in your scripts to help you debug issues: import time ; time . sleep ( 5 ) # Makes the test wait and do nothing for 5 seconds. import ipdb ; ipdb . set_trace () # Enter debugging mode. n = next, c = continue, s = step. import pytest ; pytest . set_trace () # Enter debugging mode. n = next, c = continue, s = step.  d83d dd35 To pause an active test that throws an exception or error, add --pdb : pytest my_first_test.py --pdb The code above will leave your browser window open in case there's a failure. (ipdb commands: 'n', 'c', 's' => next, continue, step).  d83d dd35 Here are some useful command-line options that come with pytest : -v # Verbose mode. Prints the full name of each test run. -q # Quiet mode. Print fewer details in the console output when running tests. -x # Stop running the tests after the first failure is reached. --html = report.html # Creates a detailed pytest-html report after tests finish. --collect-only | --co # Show what tests would get run. (Without running them) -n = NUM # Multithread the tests using that many threads. (Speed up test runs!) -s # See print statements. (Should be on by default with pytest.ini present.) --junit-xml = report.xml # Creates a junit-xml report after tests finish. --pdb # If a test fails, pause run and enter debug mode. (Don't use with CI!) -m = MARKER # Run tests with the specified pytest marker.  d83d dd35 SeleniumBase provides additional pytest command-line options for tests: --browser = BROWSER # (The web browser to use. Default: \"chrome\".) --chrome # (Shortcut for \"--browser=chrome\". On by default.) --edge # (Shortcut for \"--browser=edge\".) --firefox # (Shortcut for \"--browser=firefox\".) --opera # (Shortcut for \"--browser=opera\".) --safari # (Shortcut for \"--browser=safari\".) --cap-file = FILE # (The web browser's desired capabilities to use.) --cap-string = STRING # (The web browser's desired capabilities to use.) --settings-file = FILE # (Override default SeleniumBase settings.) --env = ENV # (Set a test environment. Use \"self.env\" to use this in tests.) --data = DATA # (Extra test data. Access with \"self.data\" in tests.) --var1 = DATA # (Extra test data. Access with \"self.var1\" in tests.) --var2 = DATA # (Extra test data. Access with \"self.var2\" in tests.) --var3 = DATA # (Extra test data. Access with \"self.var3\" in tests.) --user-data-dir = DIR # (Set the Chrome user data directory to use.) --server = SERVER # (The Selenium Grid server/IP used for tests.) --port = PORT # (The Selenium Grid port used by the test server.) --proxy = SERVER:PORT # (Connect to a proxy server:port for tests.) --proxy = USERNAME:PASSWORD@SERVER:PORT # (Use authenticated proxy server.) --agent = STRING # (Modify the web browser's User-Agent string.) --mobile # (Use the mobile device emulator while running tests.) --metrics = STRING # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".) --extension-zip = ZIP # (Load a Chrome Extension .zip|.crx, comma-separated.) --extension-dir = DIR # (Load a Chrome Extension directory, comma-separated.) --headless # (Run tests headlessly. Default mode on Linux OS.) --headed # (Run tests with a GUI on Linux OS.) --locale = LOCALE_CODE # (Set the Language Locale Code for the web browser.) --start-page = URL # (The starting URL for the web browser when tests begin.) --archive-logs # (Archive old log files instead of deleting them.) --time-limit = SECONDS # (Safely fail any test that exceeds the time limit.) --slow # (Slow down the automation. Faster than using Demo Mode.) --demo # (Slow down and visually see test actions as they occur.) --demo-sleep = SECONDS # (Set the wait time after Demo Mode actions.) --highlights = NUM # (Number of highlight animations for Demo Mode actions.) --message-duration = SECONDS # (The time length for Messenger alerts.) --check-js # (Check for JavaScript errors after page loads.) --ad-block # (Block some types of display ads after page loads.) --block-images # (Block images from loading during tests.) --verify-delay = SECONDS # (The delay before MasterQA verification checks.) --disable-csp # (Disable the Content Security Policy of websites.) --disable-ws # (Disable Web Security on Chromium-based browsers.) --enable-ws # (Enable Web Security on Chromium-based browsers.) --enable-sync # (Enable \"Chrome Sync\".) --use-auto-ext # (Use Chrome's automation extension.) --remote-debug # (Enable Chrome's Remote Debugger on http://localhost:9222) --dashboard # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html) --swiftshader # (Use Chrome's \"--use-gl=swiftshader\" feature.) --incognito # (Enable Chrome's Incognito mode.) --guest # (Enable Chrome's Guest mode.) --devtools # (Open Chrome's DevTools when the browser opens.) --reuse-session # (Reuse the browser session between tests.) --crumbs # (Delete all cookies between tests reusing a session.) --maximize-window # (Start tests with the web browser window maximized.) --save-screenshot # (Save a screenshot at the end of each test.) --visual-baseline # (Set the visual baseline for Visual/Layout tests.) --timeout-multiplier = MULTIPLIER # (Multiplies the default timeout values.) (For more details, see the full list of command-line options here .)  d83d dd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. Those logs will get moved to archived_logs/ if you add --archive_logs to command-line options, or have ARCHIVE_EXISTING_LOGS set to True in settings.py , otherwise log files with be cleaned up at the start of the next test run. The test_suite.py collection contains tests that fail on purpose so that you can see how logging works. cd examples/ pytest test_suite.py --browser = chrome pytest test_suite.py --browser = firefox An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See examples/custom_settings.py ) --settings_file=custom_settings.py (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)  d83d dd35 To pass additional data from the command-line to tests, add --data=\"ANY STRING\" . Inside your tests, you can use self.data to access that. Test Directory Configuration:  d83d dd35 When running tests with pytest , you'll want a copy of pytest.ini in your root folders. When running tests with nosetests , you'll want a copy of setup.cfg in your root folders. These files specify default configuration details for tests. Folders should also include a blank __init__.py file, which allows your tests to import files from that folder.  d83d dd35 sbase mkdir DIR creates a folder with config files and sample tests: sbase mkdir ui_tests That new folder will have these files: ui_tests/  251c 2500 2500 __init__.py  251c 2500 2500 boilerplates/  2502  251c 2500 2500 __init__.py  2502  251c 2500 2500 base_test_case.py  2502  251c 2500 2500 boilerplate_test.py  2502  251c 2500 2500 page_objects.py  2502  2514 2500 2500 samples/  2502  251c 2500 2500 __init__.py  2502  251c 2500 2500 google_objects.py  2502  2514 2500 2500 google_test.py  251c 2500 2500 my_first_test.py  251c 2500 2500 parameterized_test.py  251c 2500 2500 pytest.ini  251c 2500 2500 requirements.txt  251c 2500 2500 setup.cfg  2514 2500 2500 test_demo_site.py ProTip 2122: You can also create a boilerplate folder without any sample tests in it by adding -b or --basic to the sbase mkdir command: sbase mkdir ui_tests --basic That new folder will have these files: ui_tests/  251c 2500 2500 __init__.py  251c 2500 2500 pytest.ini  251c 2500 2500 requirements.txt  2514 2500 2500 setup.cfg Of those files, the pytest.ini config file is the most important, followed by a blank __init__.py file. There's also a setup.cfg file (only needed for nosetests). Finally, the requirements.txt file can be used to help you install seleniumbase into your environments (if it's not already installed). Log files from failed tests: Let's try an example of a test that fails: \"\"\" test_fail.py \"\"\" from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_find_army_of_robots_on_xkcd_desert_island ( self ): self . open ( \"https://xkcd.com/731/\" ) self . assert_element ( \"div#ARMY_OF_ROBOTS\" , timeout = 1 ) # This should fail You can run it from the examples/ folder like this: pytest test_fail.py  d83d dd35 You'll notice that a logs folder, \"latest_logs\", was created to hold information about the failing test, and screenshots. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in settings.py , or if your run tests with --archive-logs . If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run. The SeleniumBase Dashboard:  d83d dd35 The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html , which updates automatically as tests run and produce results. Example: pytest --dashboard --rs --headless  d83d dd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server : python -m http.server 1948  d83d dd35 Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL-C to stop the http server.)  d83d dd35 Here's a full example of what the SeleniumBase Dashboard may look like: pytest test_suite.py --dashboard --rs --headless Creating Visual Test Reports: Pytest Reports:  d83d dd35 Using --html=report.html gives you a fancy report of the name specified after your test suite completes. pytest test_suite.py --html = report.html  d83d dd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html ), then the Dashboard will become an advanced html report when all the tests complete.  d83d dd35 Here's an example of an upgraded html report: pytest test_suite.py --dashboard --html = report.html If viewing pytest html reports in Jenkins , you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes . You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests. pytest test_suite.py --junit-xml = report.xml Nosetest Reports: The --report option gives you a fancy report after your test suite completes. nosetests test_suite.py --report (NOTE: You can add --show-report to immediately display Nosetest reports after the test suite completes. Only use --show-report when running tests locally because it pauses the test run.) Allure Reports: See: https://docs.qameta.io/allure/ pytest test_suite.py --alluredir = allure_results Using a Proxy Server: If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add --proxy=IP_ADDRESS:PORT as an argument on the command line. pytest proxy_test.py --proxy = IP_ADDRESS:PORT If the proxy server that you wish to use requires authentication, you can do the following (Chromium only): pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT SeleniumBase also supports SOCKS4 and SOCKS5 proxies: pytest proxy_test.py --proxy = \"socks4://IP_ADDRESS:PORT\" pytest proxy_test.py --proxy = \"socks5://IP_ADDRESS:PORT\" To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py , and then use --proxy=KEY_FROM_PROXY_LIST to use the IP_ADDRESS:PORT of that key. pytest proxy_test.py --proxy = proxy1 Changing the User-Agent:  d83d dd35 If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add --agent=\"USER AGENT STRING\" as an argument on the command-line. pytest user_agent_test.py --agent = \"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\" Building Guided Tours for Websites:  d83d dd35 Learn about SeleniumBase Interactive Walkthroughs (in the examples/tour_examples/ folder). It's great for prototyping a website onboarding experience. Production Environments & Integrations:  d83d dd35 Here are some things you can do to set up a production environment for your testing: You can set up a Jenkins build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the SeleniumBase Jenkins example on Azure or the SeleniumBase Jenkins example on Google Cloud . You can use the Selenium Grid to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the SeleniumBase selenium_grid folder , which should have everything you need, including the Selenium Grid ReadMe , which will help you get started. If you're using the SeleniumBase MySQL feature to save results from tests running on a server machine, you can install MySQL Workbench to help you read & write from your DB more easily. If you use Slack , you can easily have your Jenkins jobs display results there by using the Jenkins Slack Plugin . Another way to send messages from your tests to Slack is by using Slack's Incoming Webhooks API . If you're using AWS, you can set up an Amazon S3 account for saving log files and screenshots from your tests. To activate this feature, modify settings.py with connection details in the S3 section, and add \" --with-s3-logging \" on the command-line when running your tests. Here's an example of running tests with additional features enabled: pytest [ YOUR_TEST_FILE.py ] --with-db-reporting --with-s3-logging Detailed Method Specifications and Examples:  d83d dd35 Navigating to a web page: (and related commands) self . open ( \"https://xkcd.com/378/\" ) # This method opens the specified page. self . go_back () # This method navigates the browser to the previous page. self . go_forward () # This method navigates the browser forward in history. self . refresh_page () # This method reloads the current page. self . get_current_url () # This method returns the current page URL. self . get_page_source () # This method returns the current page source. ProTip 2122: You may need to use the self.get_page_source() method along with Python's find() command to parse through the source to find something that Selenium wouldn't be able to. (You may want to brush up on your Python programming skills for that.) source = self . get_page_source () head_open_tag = source . find ( '<head>' ) head_close_tag = source . find ( '</head>' , head_open_tag ) everything_inside_head = source [ head_open_tag + len ( '<head>' ): head_close_tag ]  d83d dd35 Clicking: To click an element on the page: self . click ( \"div#my_id\" ) ProTip 2122: In most web browsers, you can right-click on a page and select Inspect Element to see the CSS selector details that you'll need to create your own scripts.  d83d dd35 Typing Text: self.type(selector, text) # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example: self . type ( \"input#id_value\" , \"2012\" ) You can also use self.add_text() or the WebDriver .send_keys() command, but those won't clear the text box first if there's already text inside. If you want to type in special keys, that's easy too. Here's an example: from selenium.webdriver.common.keys import Keys self . find_element ( \"textarea\" ) . send_keys ( Keys . SPACE + Keys . BACK_SPACE + ' \\n ' ) # The backspace should cancel out the space, leaving you with the newline  d83d dd35 Getting the text from an element on a page: text = self . get_text ( \"header h2\" )  d83d dd35 Getting the attribute value from an element on a page: attribute = self . get_attribute ( \"#comic img\" , \"title\" )  d83d dd35 Asserting existence of an element on a page within some number of seconds: self . wait_for_element_present ( \"div.my_class\" , timeout = 10 ) (NOTE: You can also use: self.assert_element_present(ELEMENT) )  d83d dd35 Asserting visibility of an element on a page within some number of seconds: self . wait_for_element_visible ( \"a.my_class\" , timeout = 5 ) (NOTE: The short versions of this are self.find_element(ELEMENT) and self.assert_element(ELEMENT) . The find_element() version returns the element) Since the line above returns the element, you can combine that with .click() as shown below: self . find_element ( \"a.my_class\" , timeout = 5 ) . click () # But you're better off using the following statement, which does the same thing self . click ( \"a.my_class\" ) # DO IT THIS WAY! ProTip 2122: You can use dots to signify class names (Ex: div.class_name ) as a simplified version of div[class=\"class_name\"] within a CSS selector. You can also use *= to search for any partial value in a CSS selector as shown below: self . click ( 'a[name*=\"partial_name\"]' )  d83d dd35 Asserting visibility of text inside an element on a page within some number of seconds: self . assert_text ( \"Make it so!\" , \"div#trek div.picard div.quotes\" ) self . assert_text ( \"Tea. Earl Grey. Hot.\" , \"div#trek div.picard div.quotes\" , timeout = 3 ) (NOTE: self.find_text(TEXT, ELEMENT) and self.wait_for_text(TEXT, ELEMENT) also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)  d83d dd35 Asserting Anything: self . assert_true ( myvar1 == something ) self . assert_equal ( var1 , var2 )  d83d dd35 Useful Conditional Statements: (with creative examples in action) is_element_visible(selector) # is an element visible on a page if self . is_element_visible ( 'div#warning' ): print ( \"Red Alert: Something bad might be happening!\" ) is_element_present(selector) # is an element present on a page if self . is_element_present ( 'div#top_secret img.tracking_cookie' ): self . contact_cookie_monster () # Not a real SeleniumBase method else : current_url = self . get_current_url () self . contact_the_nsa ( url = current_url , message = \"Dark Zone Found\" ) # Not a real SeleniumBase method Another example: def is_there_a_cloaked_klingon_ship_on_this_page (): if self . is_element_present ( \"div.ships div.klingon\" ): return not self . is_element_visible ( \"div.ships div.klingon\" ) return False is_text_visible(text, selector) # is text visible on a page def get_mirror_universe_captain_picard_superbowl_ad ( superbowl_year ): selector = \"div.superbowl_ %s div.commercials div.transcript div.picard\" % superbowl_year if self . is_text_visible ( \"For the Love of Marketing and Earl Grey Tea!\" , selector ): return \"Picard HubSpot Superbowl Ad 2015\" elif self . is_text_visible ( \"Delivery Drones... Engage\" , selector ): return \"Picard Amazon Superbowl Ad 2015\" elif self . is_text_visible ( \"Bing it on Screen!\" , selector ): return \"Picard Microsoft Superbowl Ad 2015\" elif self . is_text_visible ( \"OK Glass, Make it So!\" , selector ): return \"Picard Google Superbowl Ad 2015\" elif self . is_text_visible ( \"Number One, I've Never Seen Anything Like It.\" , selector ): return \"Picard Tesla Superbowl Ad 2015\" elif self . is_text_visible ( \"\"\"With the first link, the chain is forged. The first speech censored, the first thought forbidden, the first freedom denied, chains us all irrevocably.\"\"\" , selector ): return \"Picard Wikimedia Superbowl Ad 2015\" elif self . is_text_visible ( \"Let us make sure history never forgets the name ... Facebook\" , selector ): return \"Picard Facebook Superbowl Ad 2015\" else : raise Exception ( \"Reports of my assimilation are greatly exaggerated.\" )  d83d dd35 Switching Tabs: What if your test opens up a new tab/window and now you have more than one page? No problem. You need to specify which one you currently want Selenium to use. Switching between tabs/windows is easy: self . switch_to_window ( 1 ) # This switches to the new tab (0 is the first one)  d83d dd35 ProTip 2122: iFrames follow the same principle as new windows - you need to specify the iFrame if you want to take action on something in there self . switch_to_frame ( 'ContentManagerTextBody_ifr' ) # Now you can act inside the iFrame # .... Do something cool (here) self . switch_to_default_content () # Exit the iFrame when you're done  d83d dd35 Handling Pop-Up Alerts: What if your test makes an alert pop up in your browser? No problem. You need to switch to it and either accept it or dismiss it: self . wait_for_and_accept_alert () self . wait_for_and_dismiss_alert () If you're not sure whether there's an alert before trying to accept or dismiss it, one way to handle that is to wrap your alert-handling code in a try/except block. Other methods such as .text and .send_keys() will also work with alerts.  d83d dd35 Executing Custom jQuery Scripts: jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser. If the web page you're on already has jQuery loaded, you can start executing jQuery scripts immediately. You'd know this because the web page would contain something like the following in the HTML: < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\" ></ script >  d83d dd35 It's OK if you want to use jQuery on a page that doesn't have it loaded yet. To do so, run the following command first: self . activate_jquery ()  d83d dd35 Some websites have a restrictive Content Security Policy to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on such a website, add --disable-csp on the command-line.  d83d dd35 Here are some examples of using jQuery in your scripts: self . execute_script ( 'jQuery, window.scrollTo(0, 600)' ) # Scrolling the page self . execute_script ( \"jQuery('#annoying-widget').hide()\" ) # Hiding elements on a page self . execute_script ( \"jQuery('#hidden-widget').show(0)\" ) # Showing hidden elements on a page self . execute_script ( \"jQuery('#annoying-button a').remove()\" ) # Removing elements on a page self . execute_script ( \"jQuery(' %s ').mouseover()\" % ( mouse_over_item )) # Mouse-over elements on a page self . execute_script ( \"jQuery('input#the_id').val('my_text')\" ) # Fast text input on a page self . execute_script ( \"jQuery('div#dropdown a.link').click()\" ) # Click elements on a page self . execute_script ( \"return jQuery('div#amazing')[0].text\" ) # Returns the css \"text\" of the element given self . execute_script ( \"return jQuery('textarea')[2].value\" ) # Returns the css \"value\" of the 3rd textarea element on the page  d83d dd35 In the next example, JavaScript creates a referral button on a page, which is then clicked: start_page = \"https://xkcd.com/465/\" destination_page = \"https://github.com/seleniumbase/SeleniumBase\" self . open ( start_page ) referral_link = '''<a class='analytics test' href=' %s '>Free-Referral Button!</a>''' % destination_page self . execute_script ( '''document.body.innerHTML = \\\" %s \\\" ''' % referral_link ) self . click ( \"a.analytics\" ) # Clicks the generated button (Due to popular demand, this traffic generation example has been baked into SeleniumBase with the self.generate_referral(start_page, end_page) and the self.generate_traffic(start_page, end_page, loops) methods.)  d83d dd35 Using deferred asserts: Let's say you want to verify multiple different elements on a web page in a single test, but you don't want the test to fail until you verified several elements at once so that you don't have to rerun the test to find more missing elements on the same page. That's where deferred asserts come in. Here's the example: from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_deferred_asserts ( self ): self . open ( 'https://xkcd.com/993/' ) self . wait_for_element ( '#comic' ) self . deferred_assert_element ( 'img[alt=\"Brand Identity\"]' ) self . deferred_assert_element ( 'img[alt=\"Rocket Ship\"]' ) # Will Fail self . deferred_assert_element ( '#comicmap' ) self . deferred_assert_text ( 'Fake Item' , '#middleContainer' ) # Will Fail self . deferred_assert_text ( 'Random' , '#middleContainer' ) self . deferred_assert_element ( 'a[name=\"Super Fake !!!\"]' ) # Will Fail self . process_deferred_asserts () deferred_assert_element() and deferred_assert_text() will save any exceptions that would be raised. To flush out all the failed deferred asserts into a single exception, make sure to call self.process_deferred_asserts() at the end of your test method. If your test hits multiple pages, you can call self.process_deferred_asserts() before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.  d83d dd35 Accessing Raw WebDriver If you need access to any commands that come with standard WebDriver, you can call them directly like this: self . driver . delete_all_cookies () capabilities = self . driver . capabilities self . driver . find_elements_by_partial_link_text ( \"GitHub\" ) (In general, you'll want to use the SeleniumBase versions of methods when available.)  d83d dd35 Retrying failing tests automatically: You can use --reruns NUM to retry failing tests that many times. Use --reruns-delay SECONDS to wait that many seconds between retries. Example: pytest --reruns 5 --reruns-delay 1 Additionally, you can use the @retry_on_exception() decorator to specifically retry failing methods. (First import: from seleniumbase import decorators ) To learn more about SeleniumBase decorators, [click here](https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/common). Wrap-Up Congratulations on getting started with SeleniumBase! If you see something, say something! If you like us, give us a star! https://github.com/mdmintz","title":"SeleniumBase / ReadMe"},{"location":"examples/ReadMe/","text":"Running Example Tests: SeleniumBase tests are run with pytest . Chrome is the default browser if not specified. Example tests are located in: SeleniumBase/examples/ . During test failures, logs and screenshots from the latest test run are saved to the latest_logs/ folder. Tests can be structured using 15 unique syntax formats . (NOTE: Some example tests fail on purpose to demonstrate logging features .) Example tests with run commands to help you get started: Run an example test in Chrome: (Default: --browser=chrome ) pytest my_first_test.py Run an example test in Firefox: pytest my_first_test.py --browser = firefox Run an example test in Demo Mode: (highlight assertions) pytest my_first_test.py --demo Run a different example in Demo Mode: pytest test_swag_labs.py --demo Run an example test in Headless Mode: (invisible browser) pytest my_first_test.py --headless Run an example test using Chrome's mobile device emulator: (default settings) pytest test_swag_labs.py --mobile Run tests with verbose output: (includes more details) pytest test_suite.py -v Run a test on the Demo Site to try many SeleniumBase methods: pytest test_demo_site.py Run tests multi-threaded using [n] threads: pytest test_suite.py -n = 4 Run a parameterized test: (Generates multiple tests from one) pytest parameterized_test.py -v Run a test suite and generate a SeleniumBase Dashboard: pytest test_suite.py --dashboard Run a test suite and generate a pytest report: pytest test_suite.py --html = report.html Run a failing test: (See the latest_logs/ folder for logs and screenshots) pytest test_fail.py Run a failing test with Debug-mode enabled: ( pdb activates on failures) pytest test_fail.py --pdb -s Run an example test suite that demonstrates the use of pytest markers: pytest -m marker_test_suite -v Run an example test suite that reuses the browser session between tests: pytest test_suite.py --reuse-session Run an example test demonstrating the rate_limited Python decorator: pytest rate_limiting_test.py Run an example test that demonstrates how to upload a file to a website: pytest upload_file_test.py SeleniumBase tests can also be run with nosetests : Run an example test with nosetests: nosetests my_first_test.py Run an example test suite and generate a nosetest report: nosetests test_suite.py --report --show-report Run an example test using a nosetest configuration file: nosetests my_first_test.py --config = example_config.cfg For more advanced run commands, such as using a proxy server, see ../help_docs/customizing_test_runs.md To make things easier, here's a simple GUI program that allows you to run a few example tests by pressing a button: python gui_test_runner.py","title":"Running Example Tests"},{"location":"examples/chart_maker/ReadMe/","text":" d83d dcca ChartMaker  d83d dcc8 SeleniumBase ChartMaker lets you use Python to generate HTML charts from HighCharts JS. ( Click to see a presentation with multiple charts ) Here's how to run a simple pie chart presentation from GitHub => seleniumbase/SeleniumBase/examples/chart_maker : cd examples/chart_maker pytest my_chart.py Here's the code for that pie chart presentation ( GitHub => seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py ): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"my_chart.html\" ) Here's how to run an example presentation with multiple charts: cd examples/chart_maker pytest chart_presentation.py Here are screenshots from the examples: Here's a line chart example: from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_line_chart ( title = \"Time Outside\" , subtitle = \"Last Week\" , unit = \"Minutes\" ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"line_chart.html\" , interval = 8 ) This example is from test_line_chart.py , which you can run from the examples/chart_maker folder with the following command: pytest test_line_chart.py Because that presentation above has an interval set to 8 , it will automatically advance to the next slide after 8 seconds. (Or exit if there are no more slides.) For a more advanced example (multiple charts in a presentation): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker_presentation ( self ): self . create_presentation ( theme = \"sky\" ) self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . create_bar_chart ( title = \"Language\" , libs = False ) self . add_data_point ( \"Python\" , 33 , color = \"Orange\" ) self . add_data_point ( \"JavaScript\" , 27 , color = \"Teal\" ) self . add_data_point ( \"HTML + CSS\" , 21 , color = \"Purple\" ) self . add_slide ( \"<p>Bar Chart</p>\" + self . extract_chart ()) self . create_column_chart ( title = \"Colors\" , libs = False ) self . add_data_point ( \"Red\" , 10 , color = \"Red\" ) self . add_data_point ( \"Green\" , 25 , color = \"Green\" ) self . add_data_point ( \"Blue\" , 15 , color = \"Blue\" ) self . add_slide ( \"<p>Column Chart</p>\" + self . extract_chart ()) self . create_line_chart ( title = \"Last Week's Data\" , libs = False ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"chart_presentation.html\" ) Here's how to run that example: cd examples/chart_maker pytest chart_presentation.py (Press the Right Arrow to advance to the next slide in that chart presentation) ( Click to see a live example of that presentation ) Multi-Series charts can also be created. Try the available examples to learn more. ChartMaker API self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript pie chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript bar chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript column chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript line chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript area chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. \"\"\" If creating multiple charts at the same time, you can pass the chart_name parameter to distinguish between different charts. Adding a data point to a chart: self . add_data_point ( label , value , color = None , chart_name = None ): \"\"\" Add a data point to a SeleniumBase-generated chart. @Params label - The label name for the data point. value - The numeric value of the data point. color - The HTML color of the data point. Can be an RGB color. Eg: \"#55ACDC\". Can also be a named color. Eg: \"Teal\". chart_name - If creating multiple charts, use this to select which one. \"\"\" Adding a new data series to an existing chart: self . add_series_to_chart ( self , data_name = None , chart_name = None ): \"\"\" Add a new data series to an existing chart. This allows charts to have multiple data sets. @Params data_name - Set the series name. Useful for multi-series charts. chart_name - If creating multiple charts, use this to select which one. \"\"\" Saving a chart to a file: self . save_chart ( chart_name = None , filename = None ): \"\"\" Saves a SeleniumBase-generated chart to a file for later use. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") \"\"\" The full HTML of the chart is saved to the saved_charts/ folder. Extracting the HTML of a chart: self . extract_chart ( chart_name = None ): \"\"\" Extracts the HTML from a SeleniumBase-generated chart. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. \"\"\" Displaying a chart in the browser window: self . display_chart ( chart_name = None , filename = None ): \"\"\" Displays a SeleniumBase-generated chart in the browser window. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") interval - The delay time for auto-advancing charts. (in seconds) If set to 0 (default), auto-advancing is disabled. \"\"\" All methods have the optional chart_name argument, which is only needed when storing multiple charts at the same time.","title":"HighCharts"},{"location":"examples/example_logs/ReadMe/","text":"Logging, Dashboards, and Reports: (Log files in SeleniumBase/examples/example_logs were generated when test_fail.py ran and failed.)  d83d dd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. If --archive-logs is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py ), test logs will also get archived to the archived_logs/ folder. Otherwise, the log files will be cleaned out when the next test run begins (by default). pytest test_fail.py --browser = chrome nosetests test_fail.py --browser = firefox Examples of expected log files generated during failures: basic_test_info.txt page_source.html screenshot.png In addition to log files, you can also generate dashboards and test reports. The SeleniumBase Dashboard:  d83d dd35 The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html , which updates automatically as tests run and produce results. Example: pytest --dashboard --rs --headless  d83d dd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server : python -m http.server 1948  d83d dd35 Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL-C to stop the http server.)  d83d dd35 Here's a full example of what the SeleniumBase Dashboard may look like: pytest test_suite.py --dashboard --rs --headless Pytest Reports:  d83d dd35 Using --html=report.html gives you a fancy report of the name specified after your test suite completes. pytest test_suite.py --html = report.html  d83d dd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html ), then the Dashboard will become an advanced html report when all the tests complete.  d83d dd35 Here's an example of an upgraded html report: pytest test_suite.py --dashboard --html = report.html If viewing pytest html reports in Jenkins , you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes . You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests. pytest test_suite.py --junit-xml = report.xml Nosetest Reports: The --report option gives you a fancy report after your test suite completes. nosetests test_suite.py --report --browser = chrome (NOTE: You can add --show-report to immediately display Nosetest reports after the test suite completes. Only use --show-report when running tests locally because it pauses the test run.)","title":"Dashboard / Reports"},{"location":"examples/master_qa/ReadMe/","text":"MasterQA combines automation with manual verification steps.  00b6 Here's example code from basic_masterqa_test_0.py : self . open ( \"https://xkcd.com/1700/\" ) self . verify ( \"Do you see a webcomic?\" ) self . highlight_click ( 'link=Blag' ) self . verify ( 'Do you see a blog archive?' ) self . highlight_update_text ( \"input#s\" , \"Dragons \\n \" ) self . verify ( 'Do you see \"dragons\" in the search results?' ) After each automation checkpoint, a pop-up window will ask the user questions for each verification command. When the test run completes, as seen from this longer example , you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.) You may have noticed the Incomplete Test Runs row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps. How to run the example tests from scratch  00b6 git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install -r requirements.txt --upgrade python setup.py develop cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done. Check out masterqa_test_1.py to learn how to write your own MasterQA tests  00b6 You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .","title":"MasterQA"},{"location":"examples/master_qa/ReadMe/#masterqa-combines-automation-with-manual-verification-steps","text":"Here's example code from basic_masterqa_test_0.py : self . open ( \"https://xkcd.com/1700/\" ) self . verify ( \"Do you see a webcomic?\" ) self . highlight_click ( 'link=Blag' ) self . verify ( 'Do you see a blog archive?' ) self . highlight_update_text ( \"input#s\" , \"Dragons \\n \" ) self . verify ( 'Do you see \"dragons\" in the search results?' ) After each automation checkpoint, a pop-up window will ask the user questions for each verification command. When the test run completes, as seen from this longer example , you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.) You may have noticed the Incomplete Test Runs row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps.","title":"MasterQA combines automation with manual verification steps."},{"location":"examples/master_qa/ReadMe/#how-to-run-the-example-tests-from-scratch","text":"git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install -r requirements.txt --upgrade python setup.py develop cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done.","title":"How to run the example tests from scratch"},{"location":"examples/master_qa/ReadMe/#check-out-masterqa_test_1py-to-learn-how-to-write-your-own-masterqa-tests","text":"You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .","title":"Check out masterqa_test_1.py to learn how to write your own MasterQA tests"},{"location":"examples/presenter/ReadMe/","text":" d83d dcf0 Presenter  d83d dcd1 SeleniumBase Presenter lets you use Python to generate HTML presentations from Reveal JS. Here's a sample presentation: ( Click on the image/GIF for the actual presentation ) ( Here's the code for that presentation ) Slides can include HTML, code, images, and iframes. Here's how to run the example presentation: cd examples/presenter pytest my_presentation.py Here's a presentation with a chart: ( Click on the image/GIF for the actual presentation ) ( Here's the code for that presentation ) Here's how to run that example: cd examples/presenter pytest core_presentation.py Creating a new presentation: self . create_presentation ( name = None , theme = \"serif\" , transition = \"default\" ) \"\"\" Creates a Reveal-JS presentation that you can add slides to. @Params name - If creating multiple presentations at the same time, use this to specify the name of the current presentation. theme - Set a theme with a unique style for the presentation. Valid themes: \"serif\" (default), \"sky\", \"white\", \"black\", \"simple\", \"league\", \"moon\", \"night\", \"beige\", \"blood\", and \"solarized\". transition - Set a transition between slides. Valid transitions: \"none\" (default), \"slide\", \"fade\", \"zoom\", \"convex\", and \"concave\". \"\"\" If creating multiple presentations at the same time, you can pass the name parameter to distinguish between different presentations. Notes are disabled by default. You can enable notes by specifying: show_notes=True Adding a slide to a presentation: self . add_slide ( content = None , image = None , code = None , iframe = None , content2 = None , notes = None , transition = None , name = None ) \"\"\" Allows the user to add slides to a presentation. @Params content - The HTML content to display on the presentation slide. image - Attach an image (from a URL link) to the slide. code - Attach code of any programming language to the slide. Language-detection will be used to add syntax formatting. iframe - Attach an iFrame (from a URL link) to the slide. content2 - HTML content to display after adding an image or code. notes - Additional notes to include with the slide. ONLY SEEN if show_notes is set for the presentation. transition - Set a transition between slides. (overrides previous) Valid transitions: \"none\" (default), \"slide\", \"fade\", \"zoom\", \"convex\", and \"concave\". name - If creating multiple presentations at the same time, use this to select the presentation to add slides to. \"\"\" Running a presentation: self . begin_presentation ( filename = \"my_presentation.html\" , show_notes = False , interval = 0 ) \"\"\" Begin a Reveal-JS Presentation in the web browser. @Params name - If creating multiple presentations at the same time, use this to select the one you wish to add slides to. filename - The name of the HTML file that you wish to save the presentation to. (filename must end in \".html\") show_notes - When set to True, the Notes feature becomes enabled, which allows presenters to see notes next to slides. interval - The delay time between autoplaying slides. (in seconds) If set to 0 (default), autoplay is disabled. \"\"\" Before the presentation is run, the full HTML is saved to the saved_presentations/ folder. All methods have the optional name argument, which is only needed if you're creating multiple presentations at once. Here's an example of using SeleniumBase Presenter: from seleniumbase import BaseCase class MyPresenterClass ( BaseCase ): def test_presenter ( self ): self . create_presentation ( theme = \"serif\" ) self . add_slide ( '<h1>Welcome</h1><br /> \\n ' '<h3>Press the <b>Right Arrow</b></h3>' ) self . add_slide ( '<h3>SeleniumBase Presenter</h3><br /> \\n ' '<img width=\"240\" src=\"https://seleniumbase.io/img/logo3a.png\" />' '<span style=\"margin:144px;\" />' '<img src=\"https://seleniumbase.io/other/python_3d_logo.png\" />' '<br /><br /> \\n <h4>Create presentations with <b>Python</b></h4>' ) self . add_slide ( '<h3>Make slides using <b>HTML</b>:</h3><br /> \\n ' '<table style=\"padding:10px;border:4px solid black;font-size:50;\">' ' \\n <tr style=\"background-color:CDFFFF;\"> \\n ' '<th>Row ABC</th><th>Row XYZ</th></tr> \\n ' '<tr style=\"background-color:DCFDDC;\">' '<td>Value ONE</td><td>Value TWO</td></tr> \\n ' '<tr style=\"background-color:DFDFFB;\"> \\n ' '<td>Value THREE</td><td>Value FOUR</td></tr> \\n ' '</table><br /> \\n <h4>(HTML <b>table</b> example)</h4>' ) self . add_slide ( '<h3>Keyboard Shortcuts:</h3> \\n ' '<table style=\"padding:10px;border:4px solid black;font-size:30;' 'background-color:FFFFDD;\"> \\n ' '<tr><th>Key</th><th>Action</th></tr> \\n ' '<tr><td><b>=></b></td><td>Next Slide (N also works)</td></tr> \\n ' '<tr><td><b><=</b></td><td>Previous Slide (P also works)</td></tr>' ' \\n <tr><td>F</td><td>Full Screen Mode</td></tr> \\n ' '<tr><td>O</td><td>Overview Mode Toggle</td></tr> \\n ' '<tr><td>esc</td><td>Exit Full Screen / Overview Mode</td></tr> \\n ' '<tr><td><b>.</b></td><td>Pause/Resume Toggle</td></tr> \\n ' '<tr><td>space</td><td>Next Slide (alternative)</td></tr></table>' ) self . add_slide ( '<h3>Add <b>images</b> to slides:</h3>' , image = \"https://seleniumbase.io/other/seagulls.jpg\" ) self . add_slide ( '<h3>Add <b>code</b> to slides:</h3>' , code = ( 'from seleniumbase import BaseCase \\n\\n ' 'class MyTestClass(BaseCase): \\n\\n ' ' def test_basics(self): \\n ' ' self.open(\"https://store.xkcd.com/search\") \\n ' ' self.type( \\' input[name=\"q\"] \\' , \"xkcd book \\\\ n\") \\n ' ' self.assert_text(\"xkcd: volume 0\", \"h3\") \\n ' ' self.open(\"https://xkcd.com/353/\") \\n ' ' self.assert_title(\"xkcd: Python\") \\n ' ' self.assert_element( \\' img[alt=\"Python\"] \\' ) \\n ' ' self.click( \\' a[rel=\"license\"] \\' ) \\n ' ' self.assert_text(\"free to copy and reuse\") \\n ' ' self.go_back() \\n ' ' self.click_link(\"About\") \\n ' ' self.assert_exact_text(\"xkcd.com\", \"h2\")' )) self . add_slide ( \"<h3>Highlight <b>code</b> in slides:</h3>\" , code = ( 'from seleniumbase import BaseCase \\n\\n ' '<mark>class MyTestClass(BaseCase):</mark> \\n\\n ' ' def test_basics(self): \\n ' ' self.open(\"https://store.xkcd.com/search\") \\n ' ' self.type( \\' input[name=\"q\"] \\' , \"xkcd book \\\\ n\") \\n ' ' self.assert_text(\"xkcd: volume 0\", \"h3\")' )) self . add_slide ( '<h3>Add <b>iFrames</b> to slides:</h3>' , iframe = \"https://seleniumbase.io/demo_page\" ) self . add_slide ( '<h3>Getting started is <b>easy</b>:</h3>' , code = ( 'from seleniumbase import BaseCase \\n\\n ' 'class MyPresenterClass(BaseCase): \\n\\n ' ' def test_presenter(self): \\n ' ' self.create_presentation(theme=\"serif\") \\n ' ' self.add_slide(\"Welcome to Presenter!\") \\n ' ' self.add_slide( \\n ' ' \"Add code to slides:\", \\n ' ' code=( \\n ' ' \"from seleniumbase import BaseCase \\\\ n \\\\ n\" \\n ' ' \"class MyPresenterClass(BaseCase): \\\\ n \\\\ n\" \\n ' ' \" def test_presenter(self): \\\\ n\" \\n ' ' \" self.create_presentation() \\\\ n\")) \\n ' ' self.begin_presentation( \\n ' ' filename=\"demo.html\", show_notes=True)' )) self . add_slide ( '<h3>Include <b>notes</b> with slides:</h3><br />' , code = ( 'self.add_slide(\"[Your HTML goes here]\", \\n ' ' code=\"[Your software code goes here]\", \\n ' ' content2=\"[Additional HTML goes here]\", \\n ' ' notes=\"[Attached speaker notes go here]\" \\n ' ' \"[Note A! -- Note B! -- Note C! ]\")' ), notes = '<h2><ul><li>Note A!<li>Note B!<li>Note C!<li>Note D!</h2>' , content2 = \"<h4>(Notes can include HTML tags)</h4>\" ) self . add_slide ( '<h3>Multiple <b>themes</b> available:</h3>' , code = ( 'self.create_presentation(theme=\"serif\") \\n\\n ' 'self.create_presentation(theme=\"sky\") \\n\\n ' 'self.create_presentation(theme=\"simple\") \\n\\n ' 'self.create_presentation(theme=\"white\") \\n\\n ' 'self.create_presentation(theme=\"moon\") \\n\\n ' 'self.create_presentation(theme=\"black\") \\n\\n ' 'self.create_presentation(theme=\"night\") \\n\\n ' 'self.create_presentation(theme=\"beige\") \\n\\n ' 'self.create_presentation(theme=\"league\")' )) self . add_slide ( '<h2><b>The End</b></h2>' , image = \"https://seleniumbase.io/img/sb_logo_10.png\" ) self . begin_presentation ( filename = \"presenter.html\" , show_notes = True , interval = 0 ) That example is from my_presentation.py , which you can run from the examples/presenter folder with the following command: pytest my_presentation.py Saving a presentation: If you want to save the presentation you created as an HTML file, use: self . save_presentation ( filename = \"my_presentation.html\" , show_notes = True ) Presentations automatically get saved when calling: self . begin_presentation ( show_notes = True )","title":"Presentation Maker"},{"location":"examples/tour_examples/ReadMe/","text":"Interactive Product Tours  00b6 SeleniumBase Tours utilize 5 JavaScript libraries for creating interactive walkthroughs on any website: Shepherd , Bootstrap Tour , IntroJS , DriverJS , and Hopscotch . Example tour: (with autoplay) SeleniumBase driverjs_maps_tour.py cd examples/tour_examples pytest driverjs_maps_tour.py Here's a longer example: SeleniumBase google_tour.py cd examples/tour_examples pytest google_tour.py (From GitHub => SeleniumBase/examples/tour_examples ) Creating a new tour  00b6 To create a tour utilizing the Shepherd Library, use one of the following  00b6 self.create_shepherd_tour() OR self.create_tour(theme=\"shepherd\") You can pass a custom theme to change the look & feel of Shepherd tours. Valid themes for Shepherd Tours are dark , light / arrows , default , square , and square-dark . To create a tour utilizing the Bootstrap Tour Library, use one of the following  00b6 self.create_bootstrap_tour() OR self.create_tour(theme=\"bootstrap\") To create a tour utilizing the IntroJS Library, use one of the following  00b6 self.create_introjs_tour() OR self.create_tour(theme=\"introjs\") To create a tour utilizing the DriverJS Library, use one of the following  00b6 self.create_driverjs_tour() OR self.create_tour(theme=\"driverjs\") To create a tour utilizing the Hopscotch Library, use one of the following  00b6 self.create_hopscotch_tour() OR self.create_tour(theme=\"hopscotch\") Adding a step to a tour  00b6 To add a tour step, use the following  00b6 self.add_tour_step(message, css_selector, title, alignment, theme) With the self.add_tour_step() method, you must first pass a message to display. You can then specify a web element to attach to (by using CSS selectors ). If no element is specified, the tour step will tether to the top of the screen by default. You can also add an optional title above the message to display with the tour step, as well as change the theme for that step (Shepherd tours only), and even specify the alignment (which is the side of the element that you want the tour message to tether to). Playing a tour  00b6 You can play a tour by calling: self.play_tour(interval) If you specify an interval (optional), the tour will automatically walk through each step after that many seconds have passed. All methods have the optional name argument, which is only needed if you're creating multiple tours at once. Then, when you're adding a step or playing a tour, SeleniumBase knows which tour you're referring too. You can avoid using the name arg for multiple tours if you play a tour before creating a new one. Here's an example of using SeleniumBase Tours  00b6 from seleniumbase import BaseCase class MyTourClass ( BaseCase ): def test_google_tour ( self ): self . open ( 'https://google.com' ) self . wait_for_element ( 'input[title=\"Search\"]' ) self . create_tour ( theme = \"dark\" ) self . add_tour_step ( \"Welcome to Google!\" , title = \"SeleniumBase Tours\" ) self . add_tour_step ( \"Type in your query here.\" , 'input[title=\"Search\"]' ) self . play_tour () self . highlight_update_text ( 'input[title=\"Search\"]' , \"Google\" ) self . wait_for_element ( '[role=\"listbox\"]' ) # Wait for autocomplete self . create_tour ( theme = \"light\" ) self . add_tour_step ( \"Then click to search.\" , '[value=\"Google Search\"]' ) self . add_tour_step ( \"Or press [ENTER] after entry.\" , '[title=\"Search\"]' ) self . play_tour () This example is from google_tour.py , which you can run from the examples/tour_examples folder with the following command  00b6 pytest google_tour.py Exporting a Tour  00b6 If you want to save the tour you created as a JavaScript file, use: self.export_tour() OR self.export_tour(name=None, filename=\"my_tour.js\") ( name is optional unless you gave custom names to your tours when you created them. filename is the name of the file to save the JavaScript to.) Once you've exported your tour, you can use it outside of SeleniumBase. You can even copy the tour's JavaScript code to the Console of your web browser to play the tour from there (you need to be on the correct web page for it to work).","title":"Tour Maker"},{"location":"examples/tour_examples/ReadMe/#interactive-product-tours","text":"SeleniumBase Tours utilize 5 JavaScript libraries for creating interactive walkthroughs on any website: Shepherd , Bootstrap Tour , IntroJS , DriverJS , and Hopscotch . Example tour: (with autoplay) SeleniumBase driverjs_maps_tour.py cd examples/tour_examples pytest driverjs_maps_tour.py Here's a longer example: SeleniumBase google_tour.py cd examples/tour_examples pytest google_tour.py (From GitHub => SeleniumBase/examples/tour_examples )","title":"Interactive Product Tours"},{"location":"examples/tour_examples/ReadMe/#creating-a-new-tour","text":"","title":"Creating a new tour"},{"location":"examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-shepherd-library-use-one-of-the-following","text":"self.create_shepherd_tour() OR self.create_tour(theme=\"shepherd\") You can pass a custom theme to change the look & feel of Shepherd tours. Valid themes for Shepherd Tours are dark , light / arrows , default , square , and square-dark .","title":"To create a tour utilizing the Shepherd Library, use one of the following"},{"location":"examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-bootstrap-tour-library-use-one-of-the-following","text":"self.create_bootstrap_tour() OR self.create_tour(theme=\"bootstrap\")","title":"To create a tour utilizing the Bootstrap Tour Library, use one of the following"},{"location":"examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-introjs-library-use-one-of-the-following","text":"self.create_introjs_tour() OR self.create_tour(theme=\"introjs\")","title":"To create a tour utilizing the IntroJS Library, use one of the following"},{"location":"examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-driverjs-library-use-one-of-the-following","text":"self.create_driverjs_tour() OR self.create_tour(theme=\"driverjs\")","title":"To create a tour utilizing the DriverJS Library, use one of the following"},{"location":"examples/tour_examples/ReadMe/#to-create-a-tour-utilizing-the-hopscotch-library-use-one-of-the-following","text":"self.create_hopscotch_tour() OR self.create_tour(theme=\"hopscotch\")","title":"To create a tour utilizing the Hopscotch Library, use one of the following"},{"location":"examples/tour_examples/ReadMe/#adding-a-step-to-a-tour","text":"","title":"Adding a step to a tour"},{"location":"examples/tour_examples/ReadMe/#to-add-a-tour-step-use-the-following","text":"self.add_tour_step(message, css_selector, title, alignment, theme) With the self.add_tour_step() method, you must first pass a message to display. You can then specify a web element to attach to (by using CSS selectors ). If no element is specified, the tour step will tether to the top of the screen by default. You can also add an optional title above the message to display with the tour step, as well as change the theme for that step (Shepherd tours only), and even specify the alignment (which is the side of the element that you want the tour message to tether to).","title":"To add a tour step, use the following"},{"location":"examples/tour_examples/ReadMe/#playing-a-tour","text":"You can play a tour by calling: self.play_tour(interval) If you specify an interval (optional), the tour will automatically walk through each step after that many seconds have passed. All methods have the optional name argument, which is only needed if you're creating multiple tours at once. Then, when you're adding a step or playing a tour, SeleniumBase knows which tour you're referring too. You can avoid using the name arg for multiple tours if you play a tour before creating a new one.","title":"Playing a tour"},{"location":"examples/tour_examples/ReadMe/#heres-an-example-of-using-seleniumbase-tours","text":"from seleniumbase import BaseCase class MyTourClass ( BaseCase ): def test_google_tour ( self ): self . open ( 'https://google.com' ) self . wait_for_element ( 'input[title=\"Search\"]' ) self . create_tour ( theme = \"dark\" ) self . add_tour_step ( \"Welcome to Google!\" , title = \"SeleniumBase Tours\" ) self . add_tour_step ( \"Type in your query here.\" , 'input[title=\"Search\"]' ) self . play_tour () self . highlight_update_text ( 'input[title=\"Search\"]' , \"Google\" ) self . wait_for_element ( '[role=\"listbox\"]' ) # Wait for autocomplete self . create_tour ( theme = \"light\" ) self . add_tour_step ( \"Then click to search.\" , '[value=\"Google Search\"]' ) self . add_tour_step ( \"Or press [ENTER] after entry.\" , '[title=\"Search\"]' ) self . play_tour ()","title":"Here's an example of using SeleniumBase Tours"},{"location":"examples/tour_examples/ReadMe/#this-example-is-from-google_tourpy-which-you-can-run-from-the-examplestour_examples-folder-with-the-following-command","text":"pytest google_tour.py","title":"This example is from google_tour.py, which you can run from the examples/tour_examples folder with the following command"},{"location":"examples/tour_examples/ReadMe/#exporting-a-tour","text":"If you want to save the tour you created as a JavaScript file, use: self.export_tour() OR self.export_tour(name=None, filename=\"my_tour.js\") ( name is optional unless you gave custom names to your tours when you created them. filename is the name of the file to save the JavaScript to.) Once you've exported your tour, you can use it outside of SeleniumBase. You can even copy the tour's JavaScript code to the Console of your web browser to play the tour from there (you need to be on the correct web page for it to work).","title":"Exporting a Tour"},{"location":"examples/visual_testing/ReadMe/","text":"Automated Visual Regression Testing Automated Visual Regression Testing can help you detect when the layout of a web page has changed. Instead of comparing pixels from screenshots, layout differences can be detected by comparing HTML tags and attributes with a baseline. If a change is detected, it could mean that something broke, the web page was redesigned, or dynamic content changed. ( Watch the tutorial on YouTube  2198 fe0f ) To handle automated visual testing, SeleniumBase uses the self.check_window() method, which can set visual baselines for comparison and then compare the latest versions of web pages to the existing baseline. The first time a test calls self.check_window() with a unique name parameter, the visual baseline is set, which means a folder is created with the following files: page_url.txt -> The URL of the current window screenshot.png -> A screenshot of the current window tags_level1.txt -> HTML tags from the window tags_level2.txt -> HTML tags + attribute names tags_level3.txt -> HTML tags + attribute names+values After the first time self.check_window() is called, later calls will compare the HTML tags and attributes of the latest window to the ones from the first call ( or to the ones from the call when the baseline was last reset ). Here's an example call: self . check_window ( name = \"first_test)\" , level = 3 ) On the first run ( or if the baseline is being set/reset ) the \"level\" doesn't matter because that's only used for comparing the current layout to the existing baseline. Here's how the level system works: level=0 -> DRY RUN ONLY - Will perform a comparison to the baseline, and print out any differences that are found, but won't fail the test even if differences exist. level=1 -> HTML tags are compared to tags_level1.txt level=2 -> HTML tags and attribute names are compared to tags_level2.txt level=3 -> HTML tags and attribute names+values are compared to tags_level3.txt As shown, Level-3 is the most strict, Level-1 is the least strict. If the comparisons from the latest window to the existing baseline don't match, the current test will fail, except for Level-0 checks, which print Level-3 results without failing the test. You can reset the visual baseline on the command line by adding the following parameter at runtime: --visual_baseline As long as --visual_baseline is used on the command line while running tests, the self.check_window() method cannot fail because it will rebuild the visual baseline rather than comparing the html tags of the latest run to the existing baseline. If there are any expected layout changes to a website that you're testing, you'll need to reset the baseline to prevent unnecessary failures. self.check_window() will fail with \"Page Domain Mismatch Failure\" if the domain of the current URL doesn't match the domain of the baseline URL. If you want to use self.check_window() to compare a web page to a later version of itself in the same test, add the baseline=True parameter to your first self.check_window() call to use that as the baseline. ( This only makes sense if you're calling self.check_window() more than once with the same \"name\" parameter in the same test. ) Automated Visual Testing with self.check_window() is not very effective for websites that have dynamic content because that changes the layout and structure of web pages. For those pages, you're much better off using regular SeleniumBase functional testing, unless you can remove the dynamic content before performing the comparison, (such as by using self.ad_block() to remove dynamic ad content on a web page). Example usage of self.check_window() with different levels: self . check_window ( name = \"testing\" , level = 0 ) self . check_window ( name = \"xkcd_home\" , level = 1 ) self . check_window ( name = \"github_page\" , level = 2 ) self . check_window ( name = \"wikipedia_page\" , level = 3 ) self . check_window ( name = \"helloworld\" , baseline = True ) ### Do something that may change the web page self . check_window ( name = \"helloworld\" , level = 3 ) Here's an example where clicking a button makes a hidden element visible: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_applitools_layout_change_failure ( self ): self . open ( 'https://applitools.com/helloworld?diff1' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"helloworld\" , baseline = True ) # Click a button that changes the text of an element self . click ( 'a[href=\"?diff1\"]' ) # Click a button that makes a hidden element visible self . click ( \"button\" ) self . check_window ( name = \"helloworld\" , level = 3 ) Here's the output of that: ( Text changes do not impact visual comparisons ) AssertionError: First differing element 39: ['div', [['class', ['section', 'hidden-section', 'image-section']]]] ['div', [['class', ['section', 'image-section']]]] - ['div', [['class', ['section', 'hidden-section', 'image-section']]]], ? ------------------ + ['div', [['class', ['section', 'image-section']]]], * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! Here's an example where a button is removed from a web page: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_python_home_layout_change_failure ( self ): self . open ( 'https://python.org/' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"python_home\" , baseline = True ) # Remove the \"Donate\" button self . remove_element ( 'a.donate-button' ) self . check_window ( name = \"python_home\" , level = 3 ) Here's the output of that: AssertionError: First differing element 33: ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]] ['div', [['class', ['options-bar']]]] - ['a', [['class', ['donate-button']], ['href', '/psf/donations/']]], - 'display: list-item; opacity: 0.995722;']]], ? ------------------- + 'display: list-item;']]], * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! Here's an example where a web site logo is resized: from seleniumbase import BaseCase class VisualLayoutTest ( BaseCase ): def test_xkcd_layout_change_failure ( self ): self . open ( 'https://xkcd.com/554/' ) print ( ' \\n Creating baseline in \"visual_baseline\" folder.' ) self . check_window ( name = \"xkcd_554\" , baseline = True ) # Change height: (83 -> 130) , Change width: (185 -> 120) self . set_attribute ( '[alt=\"xkcd.com logo\"]' , \"height\" , \"130\" ) self . set_attribute ( '[alt=\"xkcd.com logo\"]' , \"width\" , \"120\" ) self . check_window ( name = \"xkcd_554\" , level = 3 ) Here's the output of that: AssertionError: First differing element 22: ['img[30 chars]['height', '83'], ['src', '/s/0b7742.png'], ['width', '185']]] ['img[30 chars]['height', '130'], ['src', '/s/0b7742.png'], ['width', '120']]] - ['height', '83'], ? ^ + ['height', '130'], ? ^ + - ['width', '185']]], ? ^^ + ['width', '120']]], ? ^^ * *** Exception: <Level 3> Visual Diff Failure: * HTML tag attribute values don't match the baseline! To run the example (from examples/visual_testing/ ) with a pytest HTML Report, use: pytest test_layout_fail.py --html = report.html Here's what the pytest HTML Report looks like: In conclusion, open source automated visual testing tools are being built directly into test frameworks, and this trend is growing. Just like many years ago when free Wi-Fi at coffee shops replaced Internet cafes that charged money for Internet access, open source tools for visual testing will replace their paid counterparts in time. You'll remember this next time you're sipping your Starbucks 00ae Pumpkin Spice Latte with your free Internet access, instead of paying for Internet at cybercafes.","title":"Visual Testing"},{"location":"help_docs/ReadMe/","text":"Help Docs  d83d de80 Start |  d83d dda5 fe0f CLI |  d83d ddc2 fe0f Features  d83d dc68 200d d83c dfeb Examples |  d83d dcf1 Mobile  d83d dd21 Syntax Formats |  d83e dd16 CI  d83d dcd7 API |  d83d dcca Reports |  d83d ddfa fe0f Tours  d83d dcbb Console Scripts |  d83c df10 Grid  267b fe0f Boilerplates |  d83d ddfe Locales  d83d ddc4 fe0f PkgManager |  d83d ddbc fe0f VisualTest  d83c df0f Translate |  d83d dec2 MasterQA  23fa fe0f Recorder |  d83c dfc3 NodeRunner  d83d dcd1 Presenter |  d83d dcc8 ChartMaker Table of Contents ( seleniumbase.io ) Features List Command Line Tutorial Usage Examples Demo Page for Tests How SeleniumBase Works Installing Python, Pip, & Git Python Virtual Env Tutorial SeleniumBase Installation Webdriver Installation Verify Webdriver Works Console Scripts Tutorial Syntax Formats Mobile Device Testing Method Summary (API Ref) Language Translations Language Locale Codes JS Package Manager Tour Examples Presentation Maker Chart Maker MySQL Installation Overview Using the Selenium Grid Browser Desired Capabilities Safari Driver Detailed Info Seeing Hidden Files on macOS Case Studies Demo Pages / Web Examples Demo Page / Demo Site TinyMCE Demo Page Virtual Device Farm Error Page for Tests Presenter Demo Core Presentation Chart Maker Demo Python Virtual Envs GitHub Pages ( seleniumbase.com ) Features List Command Line Tutorial Usage Examples How SeleniumBase Works Installing Python, Pip, & Git Python Virtual Env Tutorial SeleniumBase Installation Webdriver Installation Verify Webdriver Works Console Scripts Tutorial Syntax Formats Mobile Device Testing Method Summary (API Ref) Language Translations Language Locale Codes JS Package Manager Tour Examples Presentation Maker Chart Maker MySQL Installation Overview Using the Selenium Grid Browser Desired Capabilities Safari Driver Detailed Info Seeing Hidden Files on macOS Case Studies","title":"Table of Contents"},{"location":"help_docs/chart_maker/","text":" d83d dcca ChartMaker  d83d dcc8 SeleniumBase ChartMaker lets you use Python to generate HTML charts from HighCharts JS. ( Click to see a presentation with multiple charts ) Here's how to run a simple pie chart presentation from GitHub => seleniumbase/SeleniumBase/examples/chart_maker : cd examples/chart_maker pytest my_chart.py Here's the code for that pie chart presentation ( GitHub => seleniumbase/SeleniumBase/examples/chart_maker/my_chart.py ): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"my_chart.html\" ) Here's how to run an example presentation with multiple charts: cd examples/chart_maker pytest chart_presentation.py Here are screenshots from the examples: Here's a line chart example: from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker ( self ): self . create_presentation () self . create_line_chart ( title = \"Time Outside\" , subtitle = \"Last Week\" , unit = \"Minutes\" ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"line_chart.html\" , interval = 8 ) This example is from test_line_chart.py , which you can run from the examples/chart_maker folder with the following command: pytest test_line_chart.py Because that presentation above has an interval set to 8 , it will automatically advance to the next slide after 8 seconds. (Or exit if there are no more slides.) For a more advanced example (multiple charts in a presentation): from seleniumbase import BaseCase class MyChartMakerClass ( BaseCase ): def test_chart_maker_presentation ( self ): self . create_presentation ( theme = \"sky\" ) self . create_pie_chart ( title = \"Automated Tests\" ) self . add_data_point ( \"Passed\" , 7 , color = \"#95d96f\" ) self . add_data_point ( \"Untested\" , 2 , color = \"#eaeaea\" ) self . add_data_point ( \"Failed\" , 1 , color = \"#f1888f\" ) self . add_slide ( \"<p>Pie Chart</p>\" + self . extract_chart ()) self . create_bar_chart ( title = \"Language\" , libs = False ) self . add_data_point ( \"Python\" , 33 , color = \"Orange\" ) self . add_data_point ( \"JavaScript\" , 27 , color = \"Teal\" ) self . add_data_point ( \"HTML + CSS\" , 21 , color = \"Purple\" ) self . add_slide ( \"<p>Bar Chart</p>\" + self . extract_chart ()) self . create_column_chart ( title = \"Colors\" , libs = False ) self . add_data_point ( \"Red\" , 10 , color = \"Red\" ) self . add_data_point ( \"Green\" , 25 , color = \"Green\" ) self . add_data_point ( \"Blue\" , 15 , color = \"Blue\" ) self . add_slide ( \"<p>Column Chart</p>\" + self . extract_chart ()) self . create_line_chart ( title = \"Last Week's Data\" , libs = False ) self . add_data_point ( \"Sun\" , 5 ) self . add_data_point ( \"Mon\" , 10 ) self . add_data_point ( \"Tue\" , 20 ) self . add_data_point ( \"Wed\" , 40 ) self . add_data_point ( \"Thu\" , 80 ) self . add_data_point ( \"Fri\" , 65 ) self . add_data_point ( \"Sat\" , 50 ) self . add_slide ( \"<p>Line Chart</p>\" + self . extract_chart ()) self . begin_presentation ( filename = \"chart_presentation.html\" ) Here's how to run that example: cd examples/chart_maker pytest chart_presentation.py (Press the Right Arrow to advance to the next slide in that chart presentation) ( Click to see a live example of that presentation ) Multi-Series charts can also be created. Try the available examples to learn more. ChartMaker API self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript pie chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript bar chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ): \"\"\" Creates a JavaScript column chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript line chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on a web page, you no longer need to re-import the libraries when creating additional charts. \"\"\" self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ): \"\"\" Creates a JavaScript area chart using \"HighCharts\". @Params chart_name - If creating multiple charts, use this to select which one. title - The title displayed for the chart. subtitle - The subtitle displayed for the chart. data_name - Set the series name. Useful for multi-series charts. unit - The description label given to the chart's y-axis values. zero - If True, the y-axis always starts at 0. (Default: False). libs - The option to include Chart libraries (JS and CSS files). Should be set to True (default) for the first time creating a chart on a web page. If creating multiple charts on the same web page, you won't need to re-import the libraries when creating additional charts. \"\"\" If creating multiple charts at the same time, you can pass the chart_name parameter to distinguish between different charts. Adding a data point to a chart: self . add_data_point ( label , value , color = None , chart_name = None ): \"\"\" Add a data point to a SeleniumBase-generated chart. @Params label - The label name for the data point. value - The numeric value of the data point. color - The HTML color of the data point. Can be an RGB color. Eg: \"#55ACDC\". Can also be a named color. Eg: \"Teal\". chart_name - If creating multiple charts, use this to select which one. \"\"\" Adding a new data series to an existing chart: self . add_series_to_chart ( self , data_name = None , chart_name = None ): \"\"\" Add a new data series to an existing chart. This allows charts to have multiple data sets. @Params data_name - Set the series name. Useful for multi-series charts. chart_name - If creating multiple charts, use this to select which one. \"\"\" Saving a chart to a file: self . save_chart ( chart_name = None , filename = None ): \"\"\" Saves a SeleniumBase-generated chart to a file for later use. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") \"\"\" The full HTML of the chart is saved to the saved_charts/ folder. Extracting the HTML of a chart: self . extract_chart ( chart_name = None ): \"\"\" Extracts the HTML from a SeleniumBase-generated chart. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. \"\"\" Displaying a chart in the browser window: self . display_chart ( chart_name = None , filename = None ): \"\"\" Displays a SeleniumBase-generated chart in the browser window. @Params chart_name - If creating multiple charts at the same time, use this to select the one you wish to use. filename - The name of the HTML file that you wish to save the chart to. (filename must end in \".html\") interval - The delay time for auto-advancing charts. (in seconds) If set to 0 (default), auto-advancing is disabled. \"\"\" All methods have the optional chart_name argument, which is only needed when storing multiple charts at the same time.","title":"Chart Maker"},{"location":"help_docs/chinese/","text":" 2705  53ef 9760 7684 6d4b 8bd5 81ea 52a8 5316  6d4b 8bd5 6846 67b6  4e2d 6587 6587 4ef6 < => English Docs UI 81ea 52a8 5316 6d4b 8bd5 9700 8981 7684 4e00 5207 8fd9 91cc 90fd 6709.  d83d de80  7acb 5373 5f00 59cb |  d83e ddd9 200d 2642 fe0f  547d 4ee4 884c 9009 9879 |  d83c dff0  529f 80fd 5217 8868 |  d83d dc68 200d d83c dfeb  5b66 4e60 793a 4f8b |  d83d dcf1  79fb 52a8 6d4b 8bd5 |  d83d dcca  6d4b 8bd5 62a5 544a  d83d dcd6 API 8bed 6cd5 |  d83d ddfa fe0f  521b 5efa 65c5 6e38 |  d83c df0e  8bed 8a00 7ffb 8bd1 |  23fa fe0f  5f55 97f3 673a 5de5 5177 |  d83d dec2 MasterQA |  d83e dd16  6301 7eed 96c6 6210 Selenium  548c pytest  7ec4 5408 4f7f 7528.  7acb 5373 5f00 59cb:  9700 8981 Python  548c Git  5efa 8bae 914d 5408 Python virtual env . See shortcut .  66f4 65b0 pip  4ee5 9632 51fa 73b0 8b66 544a: python -m pip install -U pip  5b89 88c5 SeleniumBase: git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install -r requirements.txt python setup.py install  5982 679c 5b58 5728 591a 4e2a 5b89 88c5 7684python 7248 672c,  9700 8981 663e 793a 5177 4f53 7248 672c (E.g.  4f7f 7528 python3  4ee3 66ff python ).  4f60 4e5f 53ef 4ee5 901a 8fc7 pypi  5b89 88c5 seleniumbase : pip install seleniumbase  6dfb 52a0 --upgrade  6216 -U  6765 66f4 65b0 5b89 88c5 7a0b 5e8f.  6dfb 52a0 --force-reinstall  66f4 65b0 4f9d 8d56 5305.  4e0b 8f7d webdriver: SeleniumBase  4e0b 8f7d webdriver  9a71 52a8 5230 seleniumbase/drivers  6587 4ef6 5939 4e0b,  4f7f 7528 install  547d 4ee4: seleniumbase install chromedriver  4f60 53ef 80fd 9700 8981 4e0d 540c 7684 webdriver  6765 5bf9 5e94 5404 79cd 7f51 9875 6d4f 89c8 5668 6765 5b8c 6210 81ea 52a8 5316 6d4b 8bd5, 4f8b 5982: chromedriver  5bf9 5e94 Chrome, edgedriver  5bf9 5e94 Edge, geckodriver  5bf9 5e94 Firefox, operadriver  5bf9 5e94 Opera, iedriver  5bf9 5e94 Internet Explorer.  5982 679c 4f60 9700 8981 5b89 88c5 6700 65b0 7248 672c 7684 6d4f 89c8 5668 9a71 52a8,  4ee5 4ee5 4e0b 547d 4ee4 83b7 53d6 6700 65b0 7248 672c 6d4f 89c8 5668 9a71 52a8 (  56e0 517c 5bb9 6027 539f 56e0, 9ed8 8ba4 4e0b 8f7d 7684 7248 672c 4e3a chromedriver 2.44 ): seleniumbase install chromedriver latest  4f7f 7528 Chrome  8fd0 884c 7528 4f8b: cd examples/ pytest my_first_test.py  5982 679c 6ca1 6307 5b9a 7248 672c 5219 9ed8 8ba4 8fd0 884c 7684 6d4f 89c8 5668 9a71 52a8 4e3a chromedriver,  4f7f 7528 6307 5b9a 7248 672c 7684 547d 4ee4 4e3a: --browser=BROWSER . Linux  4e2d --headless  4e3a 9ed8 8ba4 503c ( 65e0 754c 9762 8fd0 884c). 4f60 4e5f 53ef 4ee5 5728 4efb 4f55 7cfb 7edf 4e2d 8fd0 884c 65e0 754c 9762 6a21 5f0f.  5982 679c 4f60 7684 Linux 670d 52a1 5668 6709 GUI  754c 9762, 4f60 4e5f 9700 8981 5728 754c 9762 4e2d 67e5 770b 6d4f 89c8 5668 8fd0 884c 7528 4f8b 7684 8fc7 7a0b, 4f60 53ef 4ee5 6dfb 52a0 --headed  6216 --gui .  8fd0 884c my_first_test.py Demo Mode: pytest my_first_test.py --demo  6b64 5904 4e3a 76f8 5173 4ee3 7801 my_first_test.py : from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_basics ( self ): self . open ( \"https://store.xkcd.com/search\" ) self . type ( 'input[name=\"q\"]' , \"xkcd book\" ) self . click ( 'input[value=\"Search\"]' ) self . assert_text ( \"xkcd: volume 0\" , \"h3\" ) self . open ( \"https://xkcd.com/353/\" ) self . assert_title ( \"xkcd: Python\" ) self . assert_element ( 'img[alt=\"Python\"]' ) self . click ( 'a[rel=\"license\"]' ) self . assert_text ( \"free to copy and reuse\" ) self . go_back () self . click_link ( \"About\" ) self . assert_exact_text ( \"xkcd.com\" , \"h2\" )  9ed8 8ba4 60c5 51b5 4e0b, CSS Selectors  7528 6765 67e5 627e 9875 9762 5143 7d20.  5982 679c 4f60 662fCSS Selectors 65b0 624b,  53ef 4ee5 901a 8fc7 Flukeout  6e38 620f 6765 5e2e 52a9 5b66 4e60 638c 63e1.  5728 4e0a 8ff0 4ee3 7801 4e2d 53ef 4ee5 770b 5230 4ee5 4e0b 76f8 5173 7684 SeleniumBase  65b9 6cd5: from seleniumbase import BaseCase : self . open ( URL ) #  6253 5f00 9875 9762 self . click ( SELECTOR ) #  70b9 51fb 9875 9762 5143 7d20 self . type ( SELECTOR , TEXT ) #  8f93 5165 6587 5b57 ( 6dfb 52a0 \"\\n\"  5728\"TEXT\" 7684 672b 5c3e 6765 8fdb 884c 6362 884c.) self . assert_element ( SELECTOR ) #  65ad 8a00 5143 7d20 662f 5426 5b58 5728 5e76 53ef 89c1 self . assert_text ( TEXT ) #  65ad 8a00 6587 672c 662f 5426 5b58 5728 5e76 53ef 89c1 ( 53ef 4ee5 9009 62e9 67d0 4e2a 5143 7d20 9009 62e9 5668) self . assert_title ( PAGE_TITLE ) #  65ad 8a00 6807 9898 662f 5426 5b58 5728 5e76 53ef 89c1 self . assert_no_404_errors () #  65ad 8a00 4e0d 5b58 5728404 9519 8bef, 82e5 5b58 5728 5219 65ad 8a00 5931 8d25 self . assert_no_js_errors () #  65ad 8a00 4e0d 5b58 5728js 9519 8bef (Chrome-ONLY) self . execute_script ( JAVASCRIPT ) #  5728 9875 9762 4e2d 6267 884cjs 811a 672c self . go_back () #  8fd4 56de 5230 4e0a 4e00 4e2aurl 94fe 63a5 9875 9762 self . get_text ( SELECTOR ) #  83b7 53d6 5143 7d20 7684 6587 672c self . get_attribute ( SELECTOR , ATTRIBUTE ) #  83b7 53d6 67d0 4e2a 5b9a 4f4d 5143 7d20 7684 6307 5b9a 5143 7d20 5c5e 6027 7684 5c5e 6027 503c self . is_element_visible ( SELECTOR ) #  5224 65ad 5143 7d20 662f 5426 5728 9875 9762 4e0a 53ef 89c1 self . is_text_visible ( TEXT ) #  5224 65ad 6587 672c 662f 5426 5728 9875 9762 4e0a 53ef 89c1( 53ef 63d0 4f9b SELECTOR) self . hover_and_click ( HOVER_SELECTOR , CLICK_SELECTOR ) #  9f20 6807 79fb 52a8 5728 6307 5b9a 5143 7d20 4e0a 540e 70b9 51fb 53e6 4e00 4e2a 5143 7d20 self . select_option_by_text ( DROPDOWN_SELECTOR , OPTION_TEXT ) #  9009 62e9 4e0b 62c9 6846 4e2d 5185 5bb9 self . switch_to_frame ( FRAME_NAME ) #  5207 6362 webdriver control  5230 9875 9762 4e0a 6307 5b9a iframe self . switch_to_default_content () #  5207 6362 webdriver control out  5230 5f53 524d 7684 iframe self . switch_to_window ( WINDOW_NUMBER ) #  5207 6362 4e0d 540c 7684 window/tab self . save_screenshot ( FILE_NAME ) #  4fdd 5b58 5f53 524d 9875 9762 7684 622a 56fe chinese_test_1.py : from seleniumbase.translate.chinese import  7852 6d4b 8bd5 7528 4f8b class  6211 7684 6d4b 8bd5 7c7b (  7852 6d4b 8bd5 7528 4f8b ): def test_ 4f8b 5b501 ( self ): self .  5f00 542f 7f51 5740 ( \"https://xkcd.in/comic?lg=cn&id=353\" ) self .  65ad 8a00 6807 9898 ( \"Python - XKCD 4e2d 6587 7ad9\" ) self .  65ad 8a00 5143 7d20 ( \"#content div.comic-body\" ) self .  65ad 8a00 6587 672c ( \" 4e0a 6f2b 753b\" ) self .  5355 51fb ( \"div.nextLink\" ) self .  65ad 8a00 6587 672c ( \" 8001 5988 7684 9006 88ad\" , \"#content h1\" ) self .  5355 51fb 94fe 63a5 6587 672c ( \" 4e0b 4e00 7bc7\" ) self .  65ad 8a00 6587 672c ( \" 6572 684c 5b50\" , \"#content h1\" ) self .  65ad 8a00 6587 672c ( \" 6709 65f6 5019 65e0 804a 5c31 662f 6700 68d2 7684 4e50 8da3\" ) self .  56de 53bb () self .  5355 51fb 94fe 63a5 6587 672c ( \" 5170 5fb7 5c14 00b7 95e8 7f57\" ) self .  65ad 8a00 6587 672c ( \" 5170 5fb7 5c14 00b7 95e8 7f57\" , \"#firstHeading\" ) self .  66f4 65b0 6587 672c ( \"#searchInput\" , \" 7a0b 5f0f 8bbe 8ba1\" ) self .  5355 51fb ( \"#searchButton\" ) self .  65ad 8a00 6587 672c ( \" 7a0b 5e8f 8bbe 8ba1\" , \"#firstHeading\" ) from seleniumbase.translate.chinese import  7852 6d4b 8bd5 7528 4f8b : self .  5f00 542f ( URL ) #  6253 5f00 9875 9762 self .  5355 51fb ( SELECTOR ) #  70b9 51fb 9875 9762 5143 7d20 self .  8f93 5165 6587 672c ( SELECTOR , TEXT ) #  8f93 5165 6587 5b57 ( 6dfb 52a0 \"\\n\"  5728\"TEXT\" 7684 672b 5c3e 6765 8fdb 884c 6362 884c.) self .  65ad 8a00 5143 7d20 ( SELECTOR ) #  65ad 8a00 5143 7d20 662f 5426 5b58 5728 5e76 53ef 89c1 self .  65ad 8a00 6587 672c ( TEXT ) #  65ad 8a00 6587 672c 662f 5426 5b58 5728 5e76 53ef 89c1 ( 53ef 4ee5 9009 62e9 67d0 4e2a 5143 7d20 9009 62e9 5668) self .  65ad 8a00 6807 9898 ( PAGE_TITLE ) #  65ad 8a00 6807 9898 662f 5426 5b58 5728 5e76 53ef 89c1 self .  68c0 67e5 65ad 5f00 7684 94fe 63a5 () #  65ad 8a00 4e0d 5b58 5728404 9519 8bef, 82e5 5b58 5728 5219 65ad 8a00 5931 8d25 self .  68c0 67e5JS 9519 8bef () #  65ad 8a00 4e0d 5b58 5728js 9519 8bef (Chrome-ONLY) self .  6267 884c 811a 672c ( JAVASCRIPT ) #  5728 9875 9762 4e2d 6267 884cjs 811a 672c self .  56de 53bb () #  8fd4 56de 5230 4e0a 4e00 4e2aurl 94fe 63a5 9875 9762 self .  83b7 53d6 6587 672c ( SELECTOR ) #  83b7 53d6 5143 7d20 7684 6587 672c self .  83b7 53d6 5c5e 6027 ( SELECTOR , ATTRIBUTE ) #  83b7 53d6 67d0 4e2a 5b9a 4f4d 5143 7d20 7684 6307 5b9a 5143 7d20 5c5e 6027 7684 5c5e 6027 503c self .  5143 7d20 662f 5426 53ef 89c1 ( SELECTOR ) #  5224 65ad 5143 7d20 662f 5426 5728 9875 9762 4e0a 53ef 89c1 self .  6587 672c 662f 5426 663e 793a ( TEXT ) #  5224 65ad 6587 672c 662f 5426 5728 9875 9762 4e0a 53ef 89c1( 53ef 63d0 4f9b SELECTOR) self .  60ac 505c 5e76 5355 51fb ( HOVER_SELECTOR , CLICK_SELECTOR ) #  9f20 6807 79fb 52a8 5728 6307 5b9a 5143 7d20 4e0a 540e 70b9 51fb 53e6 4e00 4e2a 5143 7d20 self .  6309 6587 672c 9009 62e9 9009 9879 ( DROPDOWN_SELECTOR , OPTION_TEXT ) #  9009 62e9 4e0b 62c9 6846 4e2d 5185 5bb9 self .  5207 6362 5230 5e27 ( FRAME_NAME ) #  5207 6362 webdriver control  5230 9875 9762 4e0a 6307 5b9a iframe self .  5207 6362 5230 9ed8 8ba4 5185 5bb9 () #  5207 6362 webdriver control out  5230 5f53 524d 7684 iframe self .  5207 6362 5230 7a97 53e3 ( WINDOW_NUMBER ) #  5207 6362 4e0d 540c 7684 window/tab self .  4fdd 5b58 622a 56fe ( FILE_NAME ) #  4fdd 5b58 5f53 524d 9875 9762 7684 622a 56fe  5b8c 6574 7684 SeleniumBase methods,  53ef 89c1: Method Summary  4e86 89e3 66f4 591a 4fe1 606f:  81ea 52a8 5316 WebDriver  6280 80fd: SeleniumBase  81ea 52a8 5316 63a7 5236 WebDriver  64cd 4f5c web browsers( 6d4f 89c8 5668), 5728 8fd0 884c 5931 8d25 540e 8fdb 884c 622a 56fe 4fdd 5b58. (  4e86 89e3 66f4 591a 5173 4e8e 5b9a 5236 7684 542f 52a8 6d4b 8bd5 7528 4f8b . )  7b80 6613 7684 4ee3 7801: SeleniumBase  4f7f 7528 7b80 5355 7b80 7ea6 7684 8bed 6cd5,  4f8b 5982: self . type ( \"input\" , \"dogs \\n \" )  4e0a 8ff0 76f8 4f3c 7684 4ee3 7801 5728 Webdriver 4e2d 53d8 73b0 7684 4e0d 662f 7279 522b 597d: (  800c 4e14 4e0b 9762 7684 4ee3 7801 4e0d 5305 542b SeleniumBase  7684 667a 80fd 7b49 5f85. ) from selenium.webdriver.common.by import By element = self . driver . find_element ( by = By . CSS_SELECTOR , value = \"input\" ) element . clear () element . send_keys ( \"dogs\" ) element . submit ()  5982 4f60 6240 89c1, 5728 WebDriver  4e2d 540c 6837 7684 4e8b 60c5 5e76 4e0d 5982 SeleniumBase!  4f7f 7528 SeleniumBase  8ba9 4f60 7684 7528 4f8b 53d8 5f97 66f4 52a0 7b80 5355! (  4f60 53ef 4ee5 5728 4f60 7684 4ee3 7801 4e2d 4e00 76f4 4f7f 7528 self.driver . )  9002 7528 ``pytest``  6216 8005 ``nosetests``  5728 6240 6709 7684 6d4f 89c8 5668 4e2d 8fd0 884c 4f60 7684 6d4b 8bd5 7528 4f8b: (  63a8 8350 4f7f 7528 pytest . Chrome  662f 9ed8 8ba4 7684 6d4f 89c8 5668. ) pytest my_first_test.py --browser = chrome nosetests test_suite.py --browser = firefox Python  6587 4ef6 4e2d 6240 6709 4ee5 test_  5f00 5934 7684python 65b9 6cd5 5c06 81ea 52a8 8fd0 884c 5f53 4f60 4f7f 7528 pytest  6216 nosetests , (  6216 5305 542bPython 6587 4ef6 7684 6587 4ef6 5939 ).  8fd8 53ef 4ee5 4f7f 7528 4ee5 4e0b 547d 4ee4 66f4 5177 4f53 5730 8bf4 660e 5728 6587 4ef6 4e2d 8fd0 884c 4ec0 4e48: (  6ce8 610f ff0cpytest 548cnosetests 7684 8bed 6cd5 662f 4e0d 540c 7684. ) pytest [ FILE_NAME ] .py:: [ CLASS_NAME ] :: [ METHOD_NAME ] nosetests [ FILE_NAME ] .py: [ CLASS_NAME ] . [ METHOD_NAME ]  4e0d 518d 6709 4e0d 53ef 9760 7684 6d4b 8bd5:  5728 4e0e 9875 9762 5143 7d20 8fdb 884c 4ea4 4e92 4e4b 524d ff0cSeleniumBase 65b9 6cd5 4f1a 81ea 52a8 7b49 5f85 9875 9762 5143 7d20 5b8c 6210 52a0 8f7d(  76f4 5230 8d85 65f6 9650 5236 ) 3002 8fd9 610f 5473 7740 60a8 4e0d 518d 9700 8981 811a 672c 4e2d 968f 673a 7684' time.sleep() ' 8bed 53e5.  81ea 52a8/ 624b 52a8 6df7 5408 6a21 5f0f: SeleniumBase 5305 62ec 4e00 4e2a 540d 4e3a MasterQA  7684 89e3 51b3 65b9 6848,  901a 8fc7 8ba9 81ea 52a8 5316 6267 884c 6240 6709 6d4f 89c8 5668 64cd 4f5c ff0c 540c 65f6 7531 624b 52a8 6d4b 8bd5 4eba 5458 5904 7406 9a8c 8bc1 ff0c 4ece 800c 52a0 5feb 4e86 624b 52a8 6d4b 8bd5 7684 901f 5ea6 3002.  4e30 5bcc 7684 7279 6027:  83b7 53d6SeleniumBase 7279 6027 7684 5b8c 6574 5217 8868,  70b9 51fb 8fd9 91cc .  8be6 7ec6 8bf4 660e 4e66:  4e0b 9762 4ecb 7ecd 5982 4f55 5728 5404 79cdweb 6d4f 89c8 5668 4e0a 8fd0 884c 793a 4f8b 811a 672c:  9996 5148 ff0c 4e3a 60a8 6253 7b97 4f7f 7528 7684 6bcf 4e2a 6d4f 89c8 5668 5b89 88c5 4e00 4e2awebdriver: seleniumbase install chromedriver seleniumbase install geckodriver seleniumbase install edgedriver seleniumbase install iedriver seleniumbase install operadriver  63a5 7740,  5728 pytest  548c nosetests  4e2d 9009 62e9 4e00 4e2a 4e3a 60a8 7684 6d4b 8bd5 542f 52a8 5668. (  53ef 4ee5 4e92 6362. ) cd examples/ pytest my_first_test.py --browser = chrome nosetests my_first_test.py --browser = firefox (  5982 679c 6ca1 6709 6307 5b9a 6d4f 89c8 5668 ff0c 5219 9ed8 8ba4 4f7f 7528Chrome. )  5bf9 4e8ePytest ff0c 7eff 8272 7684 70b9 8868 793a 6d4b 8bd5 901a 8fc7 3002 201cF 201d 8868 793a 6d4b 8bd5 5931 8d25 3002  4f7f 7528 6f14 793a 6a21 5f0f 6765 5e2e 52a9 60a8 67e5 770b 6240 65ad 8a00 7684 6d4b 8bd5.  5982 679c 793a 4f8b 6d4b 8bd5 8fd0 884c 5f97 592a 5feb ff0c 60a8 53ef 4ee5 5728 Demo 6a21 5f0f  4e0b 8fd0 884c 5b83 ff0c 65b9 6cd5 662f 5728 547d 4ee4 884c 4e0a 6dfb 52a0 --Demo  ff0c 5b83 4f1a 5728 64cd 4f5c 4e4b 95f4 77ed 6682 5730 6682 505c 6d4f 89c8 5668 ff0c 7a81 51fa 663e 793a 6b63 5728 64cd 4f5c 7684 9875 9762 5143 7d20 ff0c 5e76 8ba9 60a8 5b9e 65f6 4e86 89e3 6d4b 8bd5 65ad 8a00 7684 5185 5bb9:: pytest my_first_test.py --demo Pytest  5305 62ec 6d4b 8bd5 53d1 73b0 3002 5982 679c 60a8 6ca1 6709 6307 5b9a 8981 8fd0 884c 7684 7279 5b9a 6587 4ef6 6216 6587 4ef6 5939 ff0c pytest  5c06 6839 636e 4ee5 4e0b 5339 914d 6761 4ef6 81ea 52a8 641c 7d22 8981 8fd0 884c 7684 6d4b 8bd5 7684 6240 6709 5b50 76ee 5f55: Python  6587 4ef6 540d 5e94 662f 5f00 5934 4e3a test_  6216 8005 4ee5 _test.py  7ed3 5c3e. Python  65b9 6cd5 5e94 4ee5 test_  5f00 5934. Python 7c7b 540d 53ef 4ee5 662f 4efb 4f55 4e1c 897f ff0c 56e0 4e3aSeleniumBase 7684 BaseCase  7c7b 7ee7 627f 81ea unittest  7684TestCase 7684 7c7b 3002  4f60 53ef 4ee5 770b 5230 54ea 4e9b 6d4b 8bd5 662f 7531 pytest  53d1 73b0 4f7f 7528:: pytest --collect-only -q  60a8 53ef 4ee5 5728 811a 672c 4e2d 4f7f 7528 4ee5 4e0b 5185 5bb9 6765 5e2e 52a9 60a8 8c03 8bd5 95ee 9898: (  5982 679c 4f7f 7528ipdb ff0c 8bf7 786e 4fdd 5c06 201c-s 201d 6dfb 52a0 5230 547d 4ee4 884c 9009 9879 4e2d ff0c 9664 975e 5df2 7ecf 5728pytest.ini 4e2d ) import time ; time . sleep ( 5 ) # Makes the test wait and do nothing for 5 seconds. import ipdb ; ipdb . set_trace () # Enter debugging mode. n = next, c = continue, s = step. import pytest ; pytest . set_trace () # Enter debugging mode. n = next, c = continue, s = step.  8981 6682 505c 629b 51fa 5f02 5e38 6216 9519 8bef 7684 6d3b 52a8 6d4b 8bd5 ff0c 8bf7 6dfb 52a0 --pdb -s : pytest my_first_test.py --pdb -s  4e0a 9762 7684 4ee3 7801 5c06 5728 51fa 73b0 6545 969c 65f6 6253 5f00 6d4f 89c8 5668 7a97 53e3 3002(ipdb 547d 4ee4:'n' ff0c 'c' ff0c 's' => next, continue, step) 3002  4e0b 9762 662fPytest 9644 5e26 7684 4e00 4e9b 6709 7528 7684 547d 4ee4 884c 9009 9879: -v # Prints the full test name for each test. -q # Prints fewer details in the console output when running tests. -x # Stop running the tests after the first failure is reached. --html = report.html # Creates a detailed pytest-html report after tests finish. --collect-only # Show what tests would get run without actually running them. -n = NUM # Multithread the tests using that many threads. (Speed up test runs!) -s # See print statements. (Should be on by default with pytest.ini present.) --junit-xml = report.xml # Creates a junit-xml report after tests finish. --pdb # If a test fails, pause run and enter debug mode. (Don't use with CI!) -m = MARKER # Only run tests that are marked with the specified pytest marker. SeleniumBase  4e3a 6d4b 8bd5 63d0 4f9b 989d 5916 7684Pytest 547d 4ee4 884c 9009 9879: --browser = BROWSER # (The web browser to use.) --cap-file = FILE # (The web browser's desired capabilities to use.) --cap-string = STRING # (The web browser's desired capabilities to use.) --settings-file = FILE # (Overrides SeleniumBase settings.py values.) --env = ENV # (Set a test environment. Use \"self.env\" to use this in tests.) --data = DATA # (Extra data to pass to tests. Use \"self.data\" in tests.) --var1 = DATA # (Extra data to pass to tests. Use \"self.var1\" in tests.) --var2 = DATA # (Extra data to pass to tests. Use \"self.var2\" in tests.) --var3 = DATA # (Extra data to pass to tests. Use \"self.var3\" in tests.) --user-data-dir = DIR # (Set the Chrome user data directory to use.) --server = SERVER # (The server / IP address used by the tests.) --port = PORT # (The port that's used by the test server.) --proxy = SERVER:PORT # (This is the proxy server:port combo used by tests.) --agent = STRING # (This designates the web browser's User Agent to use.) --mobile # (The option to use the mobile emulator while running tests.) --metrics = STRING # (\"CSSWidth,Height,PixelRatio\" for mobile emulator tests.) --extension-zip = ZIP # (Load a Chrome Extension .zip file, comma-separated.) --extension-dir = DIR # (Load a Chrome Extension directory, comma-separated.) --headless # (The option to run tests headlessly. The default on Linux OS.) --headed # (The option to run tests with a GUI on Linux OS.) --start-page = URL # (The starting URL for the web browser when tests begin.) --archive-logs # (Archive old log files instead of deleting them.) --time-limit = SECONDS # (Safely fail any test that exceeds the limit limit.) --slow # (The option to slow down the automation.) --demo # (The option to visually see test actions as they occur.) --demo-sleep = SECONDS # (The option to wait longer after Demo Mode actions.) --highlights = NUM # (Number of highlight animations for Demo Mode actions.) --message-duration = SECONDS # (The time length for Messenger alerts.) --check-js # (The option to check for JavaScript errors after page loads.) --ad-block # (The option to block some display ads after page loads.) --verify-delay = SECONDS # (The delay before MasterQA verification checks.) --disable-csp # (This disables the Content Security Policy of websites.) --enable-sync # (The option to enable \"Chrome Sync\".) --use-auto-ext # (The option to use Chrome's automation extension.) --incognito # (The option to enable Chrome's Incognito mode.) --guest # (The option to enable Chrome's Guest mode.) --devtools # (The option to open Chrome's DevTools when the browser opens.) --reuse-session # (The option to reuse the browser session between tests.) --crumbs # (Option to delete all cookies between tests reusing a session.) --maximize-window # (The option to start with the web browser maximized.) --save-screenshot # (The option to save a screenshot after each test.) --visual-baseline # (Set the visual baseline for Visual/Layout tests.) --timeout-multiplier = MULTIPLIER # (Multiplies the default timeout values.) ( 6709 5173 8be6 7ec6 4fe1 606f ff0c 8bf7 53c2 89c1 547d 4ee4 884c 9009 9879 7684 5b8c 6574 5217 8868  70b9 51fb 8fd9 91cc .)  5728 6d4b 8bd5 5931 8d25 671f 95f4 ff0c 6700 8fd1 4e00 6b21 6d4b 8bd5 8fd0 884c 7684 65e5 5fd7 548c 5c4f 5e55 622a 56fe 5c06 88ab 4fdd 5b58 5230 latest_logs/  6587 4ef6 5939 4e2d 3002 5982 679c 5728 547d 4ee4 884c 9009 9879 4e2d 6dfb 52a0 2014 2014archive_logs ff0c 6216 8005 5728 settings.py  4e2d 5c06 ARCHIVE_EXISTING_LOGS  8bbe 7f6e 4e3a True  ff0c 90a3 4e48 8fd9 4e9b 65e5 5fd7 5c06 88ab 79fb 52a8 5230 archived_logs/  3002 5426 5219 ff0c 5c06 5728 4e0b 4e00 6b21 6d4b 8bd5 8fd0 884c 5f00 59cb 65f6 6e05 7406 65e5 5fd7 6587 4ef6 3002 test_suite.py  96c6 5408 5305 542b 6545 610f 5931 8d25 7684 6d4b 8bd5 ff0c 4ee5 4fbf 60a8 53ef 4ee5 770b 5230 65e5 5fd7 8bb0 5f55 662f 5982 4f55 5de5 4f5c 7684 3002 cd examples/ pytest test_suite.py --browser = chrome pytest test_suite.py --browser = firefox  8986 76d6seleniumbase/config/settings.py 7684 4e00 4e2a 7b80 5355 65b9 6cd5 662f 4f7f 7528 81ea 5b9a 4e49 8bbe 7f6e 6587 4ef6 3002 4e0b 9762 662f 8981 6dfb 52a0 5230 6d4b 8bd5 4e2d 7684 547d 4ee4 884c 9009 9879: (See examples/custom_settings.py ) --settings_file=custom_settings.py ( 8bbe 7f6e 5305 62ec 9ed8 8ba4 8d85 65f6 503c 3001 53cc 56e0 7d20auth 5bc6 94a5 3001DB 51ed 636e 3001S3 51ed 636e 548c 6d4b 8bd5 4f7f 7528 7684 5176 4ed6 91cd 8981 8bbe 7f6e.)  8981 5c06 989d 5916 7684 6570 636e 4ece 547d 4ee4 884c 4f20 9012 7ed9 6d4b 8bd5 ff0c 6dfb 52a0 --data=\"ANY STRING\" .  73b0 5728 5728 60a8 7684 6d4b 8bd5 4e2d ff0c 60a8 53ef 4ee5 4f7f 7528 self.data  6765 8bbf 95ee 3002  6d4b 8bd5 76ee 5f55 5b9a 5236:  7528 4e8e 5728SeleniumBase repo 4e4b 5916 8fd0 884c 6d4b 8bd5 Pytest ,  4f60 9700 8981 4e00 4efd pytest.ini  5728 6839 76ee 5f55 4e0a 3002 7528 4e8e 5728SeleniumBase repo 4e4b 5916 8fd0 884c 6d4b 8bd5 Nosetests ,  4f60 9700 8981 62f7 8d1d setup.cfg  5728 6839 76ee 5f55 4e0a. ( 5b50 6587 4ef6 5939 5e94 8be5 5305 62ec 4e00 4e2a 7a7a 767d 7684 \" init .py\"  6587 4ef6 3002) 8fd9 4e9b 6587 4ef6 6307 5b9a 6d4b 8bd5 7684 9ed8 8ba4 914d 7f6e 7ec6 8282 3002( 5bf9 4e8e 8fd0 884cnosetest ff0c 8fd8 53ef 4ee5 4f7f 7528 --config  6307 5b9a.cfg 6587 4ef6 3002 793a 4f8b nosetests [MY_TEST].py--config=[MY_CONFIG].cfg ')  4f5c 4e3a 4e00 4e2a 5feb 6377 65b9 5f0f ff0c 60a8 53ef 4ee5 8fd0 884c seleniumbase mkdir [DIRECTORY_NAME]  6765 521b 5efa 4e00 4e2a 65b0 7684 6587 4ef6 5939 ff0c 5176 4e2d 5df2 7ecf 5305 542b 4e86 5fc5 8981 7684 6587 4ef6 548c 4e00 4e9b 53ef 4ee5 8fd0 884c 7684 793a 4f8b 6d4b 8bd5 3002 4f8b 5b50: seleniumbase mkdir ui_tests cd ui_tests/ pytest my_first_test.py  65e5 5fd7 8bb0 5f55/ 5931 8d25 6d4b 8bd5 7684 7ed3 679c:  8ba9 6211 4eec 5c1d 8bd5 4e00 4e2a 5931 8d25 7684 6d4b 8bd5 793a 4f8b: \"\"\" test_fail.py \"\"\" from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_find_army_of_robots_on_xkcd_desert_island ( self ): self . open ( \"https://xkcd.com/731/\" ) self . assert_element ( \"div#ARMY_OF_ROBOTS\" , timeout = 1 ) # This should fail  4f60 53ef 4ee5 8fd0 884c 5728 example  6587 4ef6 5939 8fd0 884c: pytest test_fail.py  60a8 4f1a 6ce8 610f 5230 ff0c 521b 5efa 4e86 4e00 4e2a 540d 4e3a 201clatest_logs 201d 7684 65e5 5fd7 6587 4ef6 5939 6765 4fdd 5b58 6709 5173 5931 8d25 6d4b 8bd5 7684 4fe1 606f 548c 5c4f 5e55 622a 56fe 3002 5728 6d4b 8bd5 8fd0 884c 671f 95f4 ff0c 5982 679c 60a8 5728 settings.py  4e2d 5c06ARCHIVE_EXISTING_LOGS 8bbe 7f6e 4e3aTrue,  6216 8005 5982 679c 60a8 4f7f 7528 --archive-logs  8fd0 884c 6d4b 8bd5 ff0c 90a3 4e48 8fc7 53bb 7684 7ed3 679c 5c31 4f1a 79fb 52a8 5230archived_logs 6587 4ef6 5939 4e2d 3002 5982 679c 60a8 9009 62e9 4e0d 5f52 6863 73b0 6709 7684 65e5 5fd7 ff0c 5b83 4eec 5c06 88ab 5220 9664 ff0c 5e76 88ab 6700 65b0 6d4b 8bd5 8fd0 884c 7684 65e5 5fd7 6240 53d6 4ee3 3002  521b 5efa 53ef 89c6 5316 6d4b 8bd5 5957 4ef6 62a5 544a: ( 6ce8 610f:Pytest 548cnosetest 7684 4e00 4e9b 547d 4ee4 884c 53c2 6570 662f 4e0d 540c 7684) Pytest  62a5 544a:  4f7f 7528 --html=report.html  5728 60a8 7684 6d4b 8bd5 5957 4ef6 5b8c 6210 540e ff0c 4e3a 60a8 63d0 4f9b 6307 5b9a 540d 79f0 7684 6f02 4eae 62a5 544a 3002 pytest test_suite.py --html = report.html  8fd8 53ef 4ee5 4f7f 7528 --junit-xml=report  3002 83b7 53d6 4e00 4e2axml 62a5 544a 3002Jenkins 53ef 4ee5 4f7f 7528 8fd9 4e2a 6587 4ef6 4e3a 60a8 7684 6d4b 8bd5 663e 793a 66f4 597d 7684 62a5 544a 3002 pytest test_suite.py --junit-xml = report.xml Nosetest  62a5 544a: --report  9009 9879 5c06 5728 6d4b 8bd5 5957 4ef6 5b8c 6210 540e 4e3a 60a8 63d0 4f9b 4e00 4e2a 6f02 4eae 7684 62a5 544a 3002 nosetests test_suite.py --report ( 6ce8 610f: 60a8 53ef 4ee5 6dfb 52a0 --show-report  6765 5728 6d4b 8bd5 5957 4ef6 5b8c 6210 540e 7acb 5373 663e 793aNosetest 62a5 544a 3002 53ea 5728 672c 5730 8fd0 884c 6d4b 8bd5 65f6 4f7f 7528 --show-report  ff0c 56e0 4e3a 5b83 4f1a 6682 505c 6d4b 8bd5 8fd0 884c.)  4f7f 7528 4ee3 7406 670d 52a1 5668:  5982 679c 60a8 5e0c 671b 4e3a 60a8 7684 6d4f 89c8 5668 6d4b 8bd5 4f7f 7528 4ee3 7406 670d 52a1 5668( 4ec5 9002 7528 4e8eChrome 548cFirefox) ff0c 60a8 53ef 4ee5 5728 547d 4ee4 884c 4e0a 6dfb 52a0 --proxy=IP_ADDRESS:PORT  4f5c 4e3a 53c2 6570 3002 pytest proxy_test.py --proxy = IP_ADDRESS:PORT  5982 679c 60a8 5e0c 671b 4f7f 7528 7684 4ee3 7406 670d 52a1 5668 9700 8981 8eab 4efd 9a8c 8bc1 ff0c 60a8 53ef 4ee5 6267 884c 4ee5 4e0b 64cd 4f5c (Chrome only): pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT  4e3a 4e86 4f7f 4e8b 60c5 66f4 7b80 5355 ff0c 60a8 53ef 4ee5 5c06 60a8 7ecf 5e38 4f7f 7528 7684 4ee3 7406 6dfb 52a0 5230PROXY_LIST 4e2d proxy_list.py ,  7136 540e 4f7f 7528 --proxy=KEY_FROM_PROXY_LIST  6765 4f7f 7528 8be5 952e 7684IP_ADDRESS:PORT 3002 pytest proxy_test.py --proxy = proxy1  53d8 66f4 User-Agent:  5982 679c 60a8 5e0c 671b 4e3a 60a8 7684 6d4f 89c8 5668 6d4b 8bd5 66f4 6539 7528 6237 4ee3 7406( 4ec5 9650Chrome 548cFirefox) ff0c 60a8 53ef 4ee5 5728 547d 4ee4 884c 4e0a 6dfb 52a0 --agent=\"USER agent STRING\"  4f5c 4e3a 53c2 6570 3002 pytest user_agent_test.py --agent = \"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\"  4e3a 7f51 7ad9 5efa 8bbe 5bfc 6e38 670d 52a1:  5b66 4e60 66f4 591a 5185 5bb9 SeleniumBase Interactive Walkthroughs ( 5728 examples/tour_examples  6587 4ef6).  8fd9 5bf9 4e8e 6784 5efa 4e00 4e2a 5728 7ebf 4f53 9a8c 7f51 7ad9 7684 539f 578b 975e 5e38 6709 7528 3002 Production Environments & Integrations:  4e0b 9762 662f 4e3a 6d4b 8bd5 8bbe 7f6e 751f 4ea7 73af 5883 65f6 53ef 4ee5 505a 7684 4e00 4e9b 4e8b 60c5:  60a8 53ef 4ee5 542f 52a8 Jenkins  4e3a 5b9a 671f 8fd0 884c 6d4b 8bd5 6784 5efa 670d 52a1 5668.  8fd9 662f 4e00 4e2a 771f 5b9e 7684Jenkins 7684headless 6d4f 89c8 5668 81ea 52a8 5316 7684 4f8b 5b50, check out the SeleniumBase Jenkins 5728Azure 4e0a 7684 4f8b 5b50  6216 8005  5728 8c37 6b4c 4e91 4e0a 7684SeleniumBase Jenkins 4f8b 5b50 .  60a8 53ef 4ee5 4f7f 7528 the Selenium Grid  901a 8fc7 5728 591a 53f0 673a 5668 4e0a 5e76 884c 6267 884c 6d4b 8bd5 6765 6269 5c55 6d4b 8bd5.  8981 505a 5230 8fd9 4e00 70b9 ff0c 8bf7 67e5 770b SeleniumBase selenium_grid folder ,  8fd9 5e94 8be5 6709 4f60 9700 8981 7684 4e00 5207 ff0c 5305 62ec Selenium Grid ReadMe ,  8fd9 4f1a 5e2e 52a9 4f60 5f00 59cb.  5982 679c 4f60 7528 SeleniumBase MySQL  7279 6027  4fdd 5b58 5728 670d 52a1 5668 673a 5668 4e0a 8fd0 884c 7684 6d4b 8bd5 7ed3 679c, 4f60 9700 8981 5b89 88c5 MySQL Workbench  5e2e 52a9 4f60 4ece 4f60 7684 6570 636e 5e93 66f4 5bb9 6613 5730 8bfb 548c 5199.  5982 679c 4f60 7528 Slack ,  60a8 53ef 4ee5 4f7f 7528 Jenkins Slack Plugin  5f88 5bb9 6613 5730 8ba9Jenkins jobs 5728 90a3 91cc 663e 793a 7ed3 679c.  53e6 4e00 79cd 5c06 6d88 606f 4ece 6d4b 8bd5 53d1 9001 5230Slack 7684 65b9 6cd5 662f 901a 8fc7 Slack's Incoming Webhooks API .  5982 679c 60a8 6b63 5728 4f7f 7528AWS ff0c 60a8 53ef 4ee5 8bbe 7f6e 4e00 4e2a Amazon S3  4fdd 5b58 6765 81ea 6d4b 8bd5 7684 65e5 5fd7 6587 4ef6 548c 5c4f 5e55 622a 56fe 7684 5e10 6237.  6fc0 6d3b 6b64 529f 80fd,  4fee 6539 settings.py  8fde 63a5 7ec6 8282 89c1S3 90e8 5206,  6dfb 52a0 \" --with-s3-logging \"  5728 8fd0 884c 6d4b 8bd5 65f6 4f7f 7528 547d 4ee4 884c.  4e0b 9762 662f 4e00 4e2a 542f 7528 4e86 9644 52a0 529f 80fd 7684 6d4b 8bd5 8fd0 884c 793a 4f8b: pytest [ YOUR_TEST_FILE ] .py --with-db-reporting --with-s3-logging  8be6 7ec6 7684 65b9 6cd5 8bf4 660e 548c 5b9e 4f8b:  5bfc 822a 5230web 9875 9762 ( 4f7f 7528 76f8 5173commands) self . open ( \"https://xkcd.com/378/\" ) # This method opens the specified page. self . go_back () # This method navigates the browser to the previous page. self . go_forward () # This method navigates the browser forward in history. self . refresh_page () # This method reloads the current page. self . get_current_url () # This method returns the current page URL. self . get_page_source () # This method returns the current page source. ProTip 2122:  60a8 53ef 80fd 9700 8981 4f7f 7528get_page_source() 65b9 6cd5 548cPython 7684find() 547d 4ee4 6765 89e3 6790 6e90 4ee3 7801 ff0c 4ee5 627e 5230Selenium 65e0 6cd5 627e 5230 7684 4e1c 897f 3002( 4f60 53ef 80fd 9700 8981 6e29 4e60 4e00 4e0b 4f60 7684Python 7f16 7a0b 6280 80fd 3002) source = self . get_page_source () head_open_tag = source . find ( '<head>' ) head_close_tag = source . find ( '</head>' , head_open_tag ) everything_inside_head = source [ head_open_tag + len ( '<head>' ): head_close_tag ]  70b9 51fb  5355 51fb 9875 9762 4e0a 7684 5143 7d20: self . click ( \"div#my_id\" ) ProTip 2122:  5728 5927 591a 6570web 6d4f 89c8 5668 4e2d ff0c 60a8 53ef 4ee5 53f3 952e 5355 51fb 9875 9762 5e76 9009 62e9 Inspect Element  6765 67e5 770b 521b 5efa 60a8 81ea 5df1 7684 811a 672c 6240 9700 7684CSS 9009 62e9 5668 8be6 7ec6 4fe1 606f.  8f93 5165 6587 672c self.type(selector, text) #  7528 6307 5b9a 7684 503c 66f4 65b0 6765 81ea 6307 5b9a 5143 7d20 7684 6587 672c 3002 5982 679c 5143 7d20 4e22 5931 6216 6587 672c 5b57 6bb5 4e0d 53ef 7f16 8f91 ff0c 5219 5f15 53d1 5f02 5e38 3002 4f8b 5982: self . type ( \"input#id_value\" , \"2012\" )  60a8 4e5f 53ef 4ee5 4f7f 7528self.add_text() 6216WebDriver .send_keys() 547d 4ee4 ff0c 4f46 662f 5982 679c 6587 672c 6846 4e2d 5df2 7ecf 6709 6587 672c ff0c 8fd9 4e9b 547d 4ee4 4e0d 4f1a 9996 5148 6e05 9664 6587 672c 6846  5982 679c 60a8 60f3 952e 5165 7279 6b8a 7684 952e ff0c 8fd9 4e5f 5f88 5bb9 6613 3002 8fd9 91cc 6709 4e00 4e2a 4f8b 5b50: from selenium.webdriver.common.keys import Keys self . find_element ( \"textarea\" ) . send_keys ( Keys . SPACE + Keys . BACK_SPACE + ' \\n ' ) # The backspace should cancel out the space, leaving you with the newline  4ece 9875 9762 4e0a 7684 5143 7d20 83b7 53d6 6587 672c text = self . get_text ( \"header h2\" )  4ece 9875 9762 4e0a 7684 5143 7d20 83b7 53d6 5c5e 6027 503c attribute = self . get_attribute ( \"#comic img\" , \"title\" )  65ad 8a00 9875 9762 4e0a 67d0 4e2a 5143 7d20 5728 51e0 79d2 949f 5185 5b58 5728: self . wait_for_element_present ( \"div.my_class\" , timeout = 10 ) ( 6ce8 610f:  60a8 4e5f 53ef 4ee5 4f7f 7528: self.assert_element_present(ELEMENT) )  5728 6570 79d2 5185 65ad 8a00 9875 9762 4e0a 5143 7d20 7684 53ef 89c1 6027: self . wait_for_element_visible ( \"a.my_class\" , timeout = 5 ) ( 6ce8 610f:  8fd9 4e2a 7684 7b80 5355 7248 672c 662f self.find_element(ELEMENT)  548c self.assert_element(ELEMENT) . find_element() version  8fd4 56de 5143 7d20)  7531 4e8e 4e0a 9762 7684 884c 8fd4 56de 5143 7d20 ff0c 60a8 53ef 4ee5 5c06 5176 4e0e.click() 7ec4 5408 8d77 6765 ff0c 5982 4e0b 6240 793a: self . find_element ( \"a.my_class\" , timeout = 5 ) . click () # But you're better off using the following statement, which does the same thing self . click ( \"a.my_class\" ) # DO IT THIS WAY! ProTip 2122:  53ef 4ee5 4f7f 7528 70b9 6765 8868 793a 7c7b 540d( 4f8b 5982: div.class_name ) ff0c 8fd9 662fCSS 9009 62e9 5668 4e2d div[class=\"class_name\"]  7684 7b80 5316 7248 672c 3002  4f60 4e5f 53ef 4ee5 4f7f 7528 *=  5728CSS 9009 62e9 5668 4e2d 641c 7d22 4efb 4f55 90e8 5206 503c ff0c 5982 4e0b 6240 793a: self . click ( 'a[name*=\"partial_name\"]' )  5728 6570 79d2 5185 65ad 8a00 9875 9762 4e0a 5143 7d20 5185 7684 6587 672c 7684 53ef 89c1 6027: self . assert_text ( \"Make it so!\" , \"div#trek div.picard div.quotes\" ) self . assert_text ( \"Tea. Earl Grey. Hot.\" , \"div#trek div.picard div.quotes\" , timeout = 3 ) ( 6ce8 610f: self.find_text(TEXT, ELEMENT)  548c self.wait_for_text(TEXT, ELEMENT)  5e72 4e86 540c 4e00 4ef6 4e8b.  4e3a 4e86 5411 540e 5b57 517c 5bb9 6027 ff0c 4fdd 7559 4e86 8f83 65e7 7684 65b9 6cd5 540d ff0c 4f46 9ed8 8ba4 8d85 65f6 53ef 80fd 4e0d 540c.)  65ad 8a00 anything self . assert_true ( myvar1 == something ) self . assert_equal ( var1 , var2 )  6709 7528 7684 6761 4ef6 8bed 53e5 (with creative examples in action) is_element_visible(selector) # is an element visible on a page if self . is_element_visible ( 'div#warning' ): print ( \"Red Alert: Something bad might be happening!\" ) is_element_present(selector) # is an element present on a page if self . is_element_present ( 'div#top_secret img.tracking_cookie' ): self . contact_cookie_monster () # Not a real SeleniumBase method else : current_url = self . get_current_url () self . contact_the_nsa ( url = current_url , message = \"Dark Zone Found\" ) # Not a real SeleniumBase method Another example: def is_there_a_cloaked_klingon_ship_on_this_page (): if self . is_element_present ( \"div.ships div.klingon\" ): return not self . is_element_visible ( \"div.ships div.klingon\" ) return False is_text_visible(text, selector) # is text visible on a page def get_mirror_universe_captain_picard_superbowl_ad ( superbowl_year ): selector = \"div.superbowl_ %s div.commercials div.transcript div.picard\" % superbowl_year if self . is_text_visible ( \"For the Love of Marketing and Earl Grey Tea!\" , selector ): return \"Picard HubSpot Superbowl Ad 2015\" elif self . is_text_visible ( \"Delivery Drones... Engage\" , selector ): return \"Picard Amazon Superbowl Ad 2015\" elif self . is_text_visible ( \"Bing it on Screen!\" , selector ): return \"Picard Microsoft Superbowl Ad 2015\" elif self . is_text_visible ( \"OK Glass, Make it So!\" , selector ): return \"Picard Google Superbowl Ad 2015\" elif self . is_text_visible ( \"Number One, I've Never Seen Anything Like It.\" , selector ): return \"Picard Tesla Superbowl Ad 2015\" elif self . is_text_visible ( \"\"\"With the first link, the chain is forged. The first speech censored, the first thought forbidden, the first freedom denied, chains us all irrevocably.\"\"\" , selector ): return \"Picard Wikimedia Superbowl Ad 2015\" elif self . is_text_visible ( \"Let us make sure history never forgets the name ... Facebook\" , selector ): return \"Picard Facebook Superbowl Ad 2015\" else : raise Exception ( \"Reports of my assimilation are greatly exaggerated.\" )  5207 6362 tabs  5982 679c 60a8 7684 6d4b 8bd5 6253 5f00 4e86 4e00 4e2a 65b0 9009 9879 5361/ 7a97 53e3 ff0c 800c 73b0 5728 60a8 6709 591a 4e2a 9875 9762 ff0c 8be5 600e 4e48 529e? 6ca1 6709 95ee 9898 3002 60a8 9700 8981 6307 5b9a 5f53 524d 60f3 8981 4f7f 7528 54ea 4e2aSelenium 3002 5728 9009 9879 5361/ 7a97 53e3 4e4b 95f4 5207 6362 5f88 5bb9 6613: self . switch_to_window ( 1 ) # This switches to the new tab (0 is the first one) ProTip 2122: iFrame 9075 5faa 4e0e 65b0 7a97 53e3 76f8 540c 7684 539f 5219 2014 5982 679c 8981 5bf9 5176 4e2d 7684 67d0 4e9b 5185 5bb9 91c7 53d6 64cd 4f5c ff0c 9700 8981 6307 5b9aiFrame self . switch_to_frame ( 'ContentManagerTextBody_ifr' ) # Now you can act inside the iFrame # .... Do something cool (here) self . switch_to_default_content () # Exit the iFrame when you're done  5904 7406 Pop-Up  8b66 544a  5982 679c 60a8 7684 6d4b 8bd5 5728 6d4f 89c8 5668 4e2d 5f39 51fa 4e86 4e00 4e2a 8b66 544a ff0c 8be5 600e 4e48 529e? 6ca1 6709 95ee 9898 3002 4f60 9700 8981 5207 6362 5230 5b83 ff0c 8981 4e48 63a5 53d7 5b83 ff0c 8981 4e48 62d2 7edd 5b83: self . wait_for_and_accept_alert () self . wait_for_and_dismiss_alert ()  5982 679c 60a8 4e0d 786e 5b9a 5728 5c1d 8bd5 63a5 53d7 6216 53d6 6d88 8b66 62a5 4e4b 524d 662f 5426 6709 8b66 62a5 ff0c 4e00 79cd 5904 7406 65b9 6cd5 662f 5c06 8b66 62a5 5904 7406 4ee3 7801 5305 88c5 5728try/except 5757 4e2d 3002 5176 4ed6 65b9 6cd5( 5982.text 548c.send_keys()) 4e5f 53ef 4ee5 4f7f 7528 8b66 62a5.  6267 884c 5b9a 5236jQuery 811a 672c: Query 662f 4e00 4e2a 5f3a 5927 7684JavaScript 5e93 ff0c 5141 8bb8 60a8 5728web 6d4f 89c8 5668 4e2d 6267 884c 9ad8 7ea7 64cd 4f5c 3002  5982 679c 60a8 6240 5728 7684web 9875 9762 5df2 7ecf 52a0 8f7d 4e86jQuery ff0c 60a8 53ef 4ee5 7acb 5373 5f00 59cb 6267 884cjQuery 811a 672c 3002  60a8 5e94 8be5 77e5 9053 8fd9 4e00 70b9 ff0c 56e0 4e3aweb 9875 9762 5728HTML 4e2d 4f1a 5305 542b 5982 4e0b 5185 5bb9: < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\" ></ script >  5982 679c 60a8 60f3 5728 5c1a 672a 52a0 8f7djQuery 7684 9875 9762 4e0a 4f7f 7528 5b83 ff0c 8fd9 662f 53ef 4ee5 7684 3002 4e3a 6b64 ff0c 9996 5148 8fd0 884c 4ee5 4e0b 547d 4ee4: self . activate_jquery ()  8bb8 591a websites  5b58 5728 9650 5236 Content Security Policy  9632 6b62 7528 6237 5c06jQuery 548c 5176 4ed6 5916 90e8 5e93 52a0 8f7d 5230 81ea 5df1 7684 7f51 7ad9 4e0a 3002 5982 679c 60a8 9700 8981 5728 8fd9 6837 7684 7f51 7ad9 4e0a 4f7f 7528jQuery 6216 5176 4ed6JS 5e93 ff0c 8bf7 5728 547d 4ee4 884c 4e0a 6dfb 52a0 --disable_csp  3002  4e0b 9762 662f 4e00 4e9b 5728 811a 672c 4e2d 4f7f 7528jQuery 7684 4f8b 5b50: self . execute_script ( 'jQuery, window.scrollTo(0, 600)' ) # Scrolling the page self . execute_script ( \"jQuery('#annoying-widget').hide()\" ) # Hiding elements on a page self . execute_script ( \"jQuery('#hidden-widget').show(0)\" ) # Showing hidden elements on a page self . execute_script ( \"jQuery('#annoying-button a').remove()\" ) # Removing elements on a page self . execute_script ( \"jQuery(' %s ').mouseover()\" % ( mouse_over_item )) # Mouse-over elements on a page self . execute_script ( \"jQuery('input#the_id').val('my_text')\" ) # Fast text input on a page self . execute_script ( \"jQuery('div#dropdown a.link').click()\" ) # Click elements on a page self . execute_script ( \"return jQuery('div#amazing')[0].text\" ) # Returns the css \"text\" of the element given self . execute_script ( \"return jQuery('textarea')[2].value\" ) # Returns the css \"value\" of the 3rd textarea element on the page  5728 4e0b 9762 7684 793a 4f8b 4e2d ff0cJavaScript 7528 4e8e 5728 9875 9762 4e0a 690d 5165 4ee3 7801 ff0c 7136 540eSelenium 53ef 4ee5 5728 6b64 4e4b 540e 8bbf 95ee 8be5 9875 9762: start_page = \"https://xkcd.com/465/\" destination_page = \"https://github.com/seleniumbase/SeleniumBase\" self . open ( start_page ) referral_link = '''<a class='analytics test' href=' %s '>Free-Referral Button!</a>''' % destination_page self . execute_script ( '''document.body.innerHTML = \\\" %s \\\" ''' % referral_link ) self . click ( \"a.analytics\" ) # Clicks the generated button ( 7531 4e8e 5927 4f17 9700 6c42, 8fd9 4e2a 6d41 91cf 751f 6210 793a 4f8b 5df2 7ecf 88ab 5d4c 5165 5230SeleniumBase 4e2d self.generate_referral(start_page, end_page)  548c self.generate_traffic(start_page, end_page, loops)  65b9 6cd5 4e2d.)  4f7f 7528 5ef6 8fdf 7684 65ad 8a00:  5047 8bbe 60a8 60f3 5728 5355 4e2a 6d4b 8bd5 4e2d 9a8c 8bc1web 9875 9762 4e0a 7684 591a 4e2a 4e0d 540c 5143 7d20 ff0c 4f46 662f 60a8 4e0d 5e0c 671b 5728 4e00 6b21 9a8c 8bc1 591a 4e2a 5143 7d20 4e4b 524d 6d4b 8bd5 5931 8d25 ff0c 8fd9 6837 60a8 5c31 4e0d 5fc5 91cd 65b0 8fd0 884c 6d4b 8bd5 6765 67e5 627e 540c 4e00 9875 9762 4e0a 7684 66f4 591a 7f3a 5931 5143 7d20 3002 8fd9 5c31 662f 5ef6 8fdf 65ad 8a00 7684 7528 6b66 4e4b 5730 3002 8fd9 91cc 7684 4f8b 5b50: from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_delayed_asserts ( self ): self . open ( 'https://xkcd.com/993/' ) self . wait_for_element ( '#comic' ) self . delayed_assert_element ( 'img[alt=\"Brand Identity\"]' ) self . delayed_assert_element ( 'img[alt=\"Rocket Ship\"]' ) # Will Fail self . delayed_assert_element ( '#comicmap' ) self . delayed_assert_text ( 'Fake Item' , '#middleContainer' ) # Will Fail self . delayed_assert_text ( 'Random' , '#middleContainer' ) self . delayed_assert_element ( 'a[name=\"Super Fake !!!\"]' ) # Will Fail self . process_delayed_asserts () delayed_assert_element()  548c delayed_assert_text()  5c06 4fdd 5b58 5c06 5f15 53d1 7684 4efb 4f55 5f02 5e38 3002  8981 5c06 6240 6709 5931 8d25 7684 5ef6 8fdf 65ad 8a00 6e05 9664 5230 5355 4e2a 5f02 5e38 4e2d ff0c  786e 4fdd 5728 6d4b 8bd5 65b9 6cd5 7684 672b 5c3e 8c03 7528 self.process_delayed_asserts() .  5982 679c 6d4b 8bd5 6d89 53ca 591a 4e2a 9875 9762,  53ef 4ee5 5728 5355 4e2a 9875 9762 7684 6240 6709 5ef6 8fdf 65ad 8a00 7684 672b 5c3e 8c03 7528 self.process_delayed_asserts() .  8fd9 6837 ff0c 65e5 5fd7 6587 4ef6 7684 5c4f 5e55 622a 56fe 5c31 4f1a 663e 793a 5ef6 8fdf 65ad 8a00 7684 751f 6210 4f4d 7f6e 3002  8bbf 95ee 539f 59cbWebDriver  5982 679c 60a8 9700 8981 8bbf 95ee 6807 51c6WebDriver 9644 5e26 7684 4efb 4f55 547d 4ee4 ff0c 60a8 53ef 4ee5 50cf 8fd9 6837 76f4 63a5 8c03 7528 5b83 4eec: self . driver . delete_all_cookies () capabilities = self . driver . capabilities self . driver . find_elements_by_partial_link_text ( \"GitHub\" ) ( 901a 5e38 ff0c 60a8 4f1a 5e0c 671b 5728 53ef 7528 65f6 4f7f 7528 5e26 65b9 6cd5 7684SeleniumBase 7248 672c.)  81ea 52a8 91cd 8bd5 5931 8d25 7684 6d4b 8bd5  4f60 53ef 4ee5 4f7f 7528 --reruns NUM  6765 91cd 8bd5 5931 8d25 7684 7528 4f8b, 6b21 6570 4e3a NUM  503c.  4f7f 7528 --reruns-delay SECONDS  5728 91cd 8bd5 4e4b 95f4 7b49 5f85 90a3 4e48 591a 79d2 3002 4f8b 5b50: pytest --reruns 5 --reruns-delay 1  6b64 5916 ff0c 53ef 4ee5 4f7f 7528 @retry_on_exception()  88c5 9970 5668 6765 7279 522b 91cd 8bd5 5931 8d25 7684 65b9 6cd5. ( 9700 8981 import: from seleniumbase import decorators )  4e86 89e3 66f4 591a 5173 4e8eSeleniumBase 88c5 9970 5668 7684 4fe1 606f, click here .  7b80 8baf  795d 8d3a 60a8 5f00 59cb 4f7f 7528SeleniumBase!  5982 679c 4f60 6709 4efb 4f55 95ee 9898 ff0c 8bf4 51fa 6765!  5e76 8054 7cfb 6211 4eec  5982 679c 4f60 559c 6b22 8fd9 4e2a 9879 76ee, 8bf7 7ed9 4e2a 2764(stars) 5427! https://github.com/mdmintz","title":"Chinese Docs"},{"location":"help_docs/customizing_test_runs/","text":"CLI Options You can customize test runs from the command-line interface thanks to SeleniumBase's pytest plugin , which adds CLI options for setting/enabling the browser type, headless mode, mobile mode, multithreading mode, demo mode, proxy config, user agent config, browser extensions, and more. Here are some examples of configuring tests, which can be run from the examples/ folder: # Run a test in Chrome (default browser) pytest my_first_test.py # Run a test in Firefox pytest test_swag_labs.py --browser = firefox # Run a test in Demo Mode (highlight assertions) pytest test_demo_site.py --demo # Run a test in Headless Mode (invisible browser) pytest test_demo_site.py --headless # Run tests multi-threaded using [n] threads pytest test_suite.py -n = 4 # Create a pytest html report after tests are done pytest test_suite.py --html = report.html # Enter Debug Mode on failures pytest test_fail.py --pdb # Rerun failing tests more times pytest test_suite.py --reruns = 1 # Pass extra data into tests (retrieve by calling self.data) pytest my_first_test.py --data = \"ABC,DEF\" # Run tests on a local Selenium Grid pytest test_suite.py --server = \"127.0.0.1\" # Run tests on a remote Selenium Grid pytest test_suite.py --server = IP_ADDRESS --port = 4444 # Run tests on a remote Selenium Grid with authentication pytest test_suite.py --server = USERNAME:KEY@IP_ADDRESS --port = 80 # Reuse the same browser session for all tests being run pytest test_suite.py --reuse-session # Reuse the same browser session, but empty cookies between tests pytest test_suite.py --reuse-session --crumbs # Run tests through a proxy server pytest proxy_test.py --proxy = IP_ADDRESS:PORT # Run tests through a proxy server with authentication pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT # Run tests while setting the web browser's User Agent pytest user_agent_test.py --agent = \"USER-AGENT-STRING\" # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"411,731,3\" # Run tests while changing SeleniumBase default settings pytest my_first_test.py --settings-file = custom_settings.py You can interchange pytest with nosetests for most tests, but using pytest is recommended. ( chrome is the default browser if not specified.) If you're using pytest for running tests outside of the SeleniumBase repo, you'll want a copy of pytest.ini at the base of the new folder structure. If using nosetests , the same applies for setup.cfg . Here are some useful command-line options that come with pytest : -v # Verbose mode. Prints the full name of each test run. -q # Quiet mode. Print fewer details in the console output when running tests. -x # Stop running the tests after the first failure is reached. --html = report.html # Creates a detailed pytest-html report after tests finish. --collect-only | --co # Show what tests would get run. (Without running them) -n = NUM # Multithread the tests using that many threads. (Speed up test runs!) -s # See print statements. (Should be on by default with pytest.ini present.) --junit-xml = report.xml # Creates a junit-xml report after tests finish. --pdb # If a test fails, pause run and enter debug mode. (Don't use with CI!) -m = MARKER # Run tests with the specified pytest marker. SeleniumBase provides additional pytest command-line options for tests: --browser = BROWSER # (The web browser to use. Default: \"chrome\".) --chrome # (Shortcut for \"--browser=chrome\". On by default.) --edge # (Shortcut for \"--browser=edge\".) --firefox # (Shortcut for \"--browser=firefox\".) --opera # (Shortcut for \"--browser=opera\".) --safari # (Shortcut for \"--browser=safari\".) --cap-file = FILE # (The web browser's desired capabilities to use.) --cap-string = STRING # (The web browser's desired capabilities to use.) --settings-file = FILE # (Override default SeleniumBase settings.) --env = ENV # (Set a test environment. Use \"self.env\" to use this in tests.) --data = DATA # (Extra test data. Access with \"self.data\" in tests.) --var1 = DATA # (Extra test data. Access with \"self.var1\" in tests.) --var2 = DATA # (Extra test data. Access with \"self.var2\" in tests.) --var3 = DATA # (Extra test data. Access with \"self.var3\" in tests.) --user-data-dir = DIR # (Set the Chrome user data directory to use.) --server = SERVER # (The Selenium Grid server/IP used for tests.) --port = PORT # (The Selenium Grid port used by the test server.) --proxy = SERVER:PORT # (Connect to a proxy server:port for tests.) --proxy = USERNAME:PASSWORD@SERVER:PORT # (Use authenticated proxy server.) --mobile # (Use the mobile device emulator while running tests.) --metrics = STRING # (Set mobile metrics: \"CSSWidth,CSSHeight,PixelRatio\".) --extension-zip = ZIP # (Load a Chrome Extension .zip|.crx, comma-separated.) --extension-dir = DIR # (Load a Chrome Extension directory, comma-separated.) --headless # (Run tests headlessly. Default mode on Linux OS.) --headed # (Run tests with a GUI on Linux OS.) --locale = LOCALE_CODE # (Set the Language Locale Code for the web browser.) --start-page = URL # (The starting URL for the web browser when tests begin.) --archive-logs # (Archive old log files instead of deleting them.) --time-limit = SECONDS # (Safely fail any test that exceeds the time limit.) --slow # (Slow down the automation. Faster than using Demo Mode.) --demo # (Slow down and visually see test actions as they occur.) --demo-sleep = SECONDS # (Set the wait time after Demo Mode actions.) --highlights = NUM # (Number of highlight animations for Demo Mode actions.) --message-duration = SECONDS # (The time length for Messenger alerts.) --check-js # (Check for JavaScript errors after page loads.) --ad-block # (Block some types of display ads after page loads.) --block-images # (Block images from loading during tests.) --verify-delay = SECONDS # (The delay before MasterQA verification checks.) --disable-csp # (Disable the Content Security Policy of websites.) --disable-ws # (Disable Web Security on Chromium-based browsers.) --enable-ws # (Enable Web Security on Chromium-based browsers.) --enable-sync # (Enable \"Chrome Sync\".) --use-auto-ext # (Use Chrome's automation extension.) --remote-debug # (Enable Chrome's Remote Debugger on http://localhost:9222) --dashboard # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html) --swiftshader # (Use Chrome's \"--use-gl=swiftshader\" feature.) --incognito # (Enable Chrome's Incognito mode.) --guest # (Enable Chrome's Guest mode.) --devtools # (Open Chrome's DevTools when the browser opens.) --reuse-session # (Reuse the browser session between tests.) --crumbs # (Delete all cookies between tests reusing a session.) --maximize-window # (Start tests with the web browser window maximized.) --save-screenshot # (Save a screenshot at the end of each test.) --visual-baseline # (Set the visual baseline for Visual/Layout tests.) --timeout-multiplier = MULTIPLIER # (Multiplies the default timeout values.) (For more details, see the full list of command-line options here .) You can also view a list of popular pytest options for SeleniumBase by typing: seleniumbase options Or the short form: sbase options Customizing default settings: An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here's the command-line option to add to tests: (See examples/custom_settings.py ) --settings-file=custom_settings.py (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.) Running tests on a remote Selenium Grid: SeleniumBase lets you run tests on remote Selenium Grids such as BrowserStack 's Selenium Grid, Sauce Labs 's Selenium Grid, TestingBot 's Selenium Grid, other Grids, and even your own Grid: (For setting browser desired capabilities while running Selenium remotely, see the ReadMe located here: https://github.com/seleniumbase/SeleniumBase/tree/master/examples/capabilities) Here's how to connect to a BrowserStack Selenium Grid server for running tests: pytest my_first_test.py --server = USERNAME:KEY@hub.browserstack.com --port = 80 Here's how to connect to a Sauce Labs Selenium Grid server for running tests: pytest my_first_test.py --server = USERNAME:KEY@ondemand.saucelabs.com --port = 80 Here's how to connect to a TestingBot Selenium Grid server for running tests: pytest my_first_test.py --server = USERNAME:KEY@hub.testingbot.com --port = 80 Here's how to connect to a CrossBrowserTesting Selenium Grid server for running tests: pytest my_first_test.py --server = USERNAME:KEY@hub.crossbrowsertesting.com --port = 80 Here's how to connect to a LambdaTest Selenium Grid server for running tests: pytest my_first_test.py --server = USERNAME:KEY@hub.lambdatest.com --port = 80 Or you can create your own Selenium Grid for test distribution. ( See this ReadMe for details ) Example tests using Logging: pytest test_suite.py --browser = chrome  d83d dd35 During test failures, logs and screenshots from the most recent test run will get saved to the latest_logs/ folder. If --archive-logs is specified (or if ARCHIVE_EXISTING_LOGS is set to True in settings.py ), test logs will also get archived to the archived_logs/ folder. Otherwise, the log files will be cleaned out when the next test run begins (by default). Demo Mode: If any test is moving too fast for your eyes to see what's going on, you can run it in Demo Mode by adding --demo on the command line, which pauses the browser briefly between actions, highlights page elements being acted on, and lets you know what test assertions are happening in real time: pytest my_first_test.py --demo You can override the default wait time by either updating settings.py or by using --demo-sleep={NUM} when using Demo Mode. (NOTE: If you use --demo-sleep={NUM} without using --demo , nothing will happen.) pytest my_first_test.py --demo --demo-sleep = 1 .2 Passing additional data to tests: If you want to pass additional data from the command line to your tests, you can use --data=STRING . Now inside your tests, you can use self.data to access that. Running tests multithreaded: To run Pytest multithreaded on multiple CPUs at the same time, add -n=NUM or -n NUM on the command line, where NUM is the number of CPUs you want to use. Retrying failing tests automatically: You can use --reruns=NUM to retry failing tests that many times. Use --reruns-delay=SECONDS to wait that many seconds between retries. Example: pytest --reruns=2 --reruns-delay=1 Debugging tests: You can use the following calls in your scripts to help you debug issues: import time ; time . sleep ( 5 ) # Makes the test wait and do nothing for 5 seconds. import ipdb ; ipdb . set_trace () # Enter debugging mode. n = next, c = continue, s = step. import pytest ; pytest . set_trace () # Enter debugging mode. n = next, c = continue, s = step. To pause an active test that throws an exception or error, add --pdb -s : pytest my_first_test.py --pdb -s The code above will leave your browser window open in case there's a failure. (ipdb commands: 'c', 's', 'n' => continue, step, next). The SeleniumBase Dashboard:  d83d dd35 The --dashboard option for pytest generates a SeleniumBase Dashboard located at dashboard.html , which updates automatically as tests run and produce results. Example: pytest --dashboard --rs --headless  d83d dd35 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here's an example of that using Python 3's http.server : python -m http.server 1948  d83d dd35 Now you can navigate to http://localhost:1948/dashboard.html in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use CTRL-C to stop the http server.)  d83d dd35 Here's a full example of what the SeleniumBase Dashboard may look like: pytest test_suite.py --dashboard --rs --headless Pytest Reports:  d83d dd35 Using --html=report.html gives you a fancy report of the name specified after your test suite completes. pytest test_suite.py --html = report.html  d83d dd35 When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: --dashboard --html=dashboard.html ), then the Dashboard will become an advanced html report when all the tests complete.  d83d dd35 Here's an example of an upgraded html report: pytest test_suite.py --dashboard --html = report.html If viewing pytest html reports in Jenkins , you may need to configure Jenkins settings for the html to render correctly. This is due to Jenkins CSP changes . You can also use --junit-xml=report.xml to get an xml report instead. Jenkins can use this file to display better reporting for your tests. pytest test_suite.py --junit-xml = report.xml Nosetest Reports: The --report option gives you a fancy report after your test suite completes. nosetests test_suite.py --report (NOTE: You can add --show_report to immediately display Nosetest reports after the test suite completes. Only use --show_report when running tests locally because it pauses the test run.) Using a Proxy Server: If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add --proxy=IP_ADDRESS:PORT as an argument on the command line. pytest proxy_test.py --proxy = IP_ADDRESS:PORT If the proxy server that you wish to use requires authentication, you can do the following (Chromium only): pytest proxy_test.py --proxy = USERNAME:PASSWORD@IP_ADDRESS:PORT SeleniumBase also supports SOCKS4 and SOCKS5 proxies: pytest proxy_test.py --proxy = \"socks4://IP_ADDRESS:PORT\" pytest proxy_test.py --proxy = \"socks5://IP_ADDRESS:PORT\" To make things easier, you can add your frequently-used proxies to PROXY_LIST in proxy_list.py , and then use --proxy=KEY_FROM_PROXY_LIST to use the IP_ADDRESS:PORT of that key. pytest proxy_test.py --proxy = proxy1 Changing the User-Agent: If you wish to change the User-Agent for your browser tests (Chrome and Firefox only), you can add --agent=\"USER-AGENT-STRING\" as an argument on the command line. pytest user_agent_test.py --agent = \"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\" Mobile Device Testing: Use --mobile to quickly run your tests using Chrome's mobile device emulator with default values for device metrics (CSS Width, CSS Height, Pixel-Ratio) and a default value set for the user agent. To configure the mobile device metrics, use --metrics=\"CSS_Width,CSS_Height,Pixel_Ratio\" to set those values. You'll also be able to set the user agent with --agent=\"USER-AGENT-STRING\" (a default user agent will be used if not specified). To find real values for device metrics, see this GitHub Gist . For a list of available user agent strings, check out this page . # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"411,731,3\" # Run mobile tests specifying the user agent pytest test_swag_labs.py --mobile --agent = \"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"","title":"Command Line Options"},{"location":"help_docs/desired_capabilities/","text":"Using Desired Capabilities You can specify browser desired capabilities for webdriver when running SeleniumBase tests on a remote SeleniumGrid server such as BrowserStack , Sauce Labs , or TestingBot . Sample run commands may look like this when run from the SeleniumBase/examples/ folder: (The browser is now specified in the capabilities file.) pytest my_first_test.py --browser = remote --server = USERNAME:KEY@hub.browserstack.com --port = 80 --cap_file = capabilities/sample_cap_file_BS.py pytest my_first_test.py --browser = remote --server = USERNAME:KEY@ondemand.saucelabs.com --port = 80 --cap_file = capabilities/sample_cap_file_SL.py (Parameters: --browser=remote , --server=SERVER , --port=PORT , and --cap_file=CAP_FILE.py ) Here's an example desired capabilities file for BrowserStack: desired_cap = { 'os' : 'OS X' , 'os_version' : 'High Sierra' , 'browser' : 'Chrome' , 'browser_version' : '77.0' , 'browserstack.local' : 'false' , 'browserstack.selenium_version' : '3.141.59' } Here's an example desired capabilities file for Sauce Labs: capabilities = { 'browserName' : 'firefox' , 'browserVersion' : '70.0' , 'platformName' : 'macOS 10.13' , 'sauce:options' : { } } (You'll notice that the browser is now being specified in the capabilities file, rather than with --browser=BROWSER ) You can generate specific desired capabilities using: BrowserStack desired capabilities Sauce Labs desired capabilities TestingBot desired capabilities Parsing desired capabilities: SeleniumBase has a desired capabilities parser that can capture all lines from the specified file in the following formats: 'KEY': 'VALUE' 'KEY': True 'KEY': False caps['KEY'] = \"VALUE\" caps['KEY'] = True caps['KEY'] = False (Each pair must be on a separate line. You can interchange single and double quotes.) You can also swap --browser=remote with an actual browser, eg --browser=chrome , which will combine the default SeleniumBase desired capabilities with those that were specified in the capabilities file when using --cap_file=FILE.py . Capabilities will override other parameters, so if you set the browser to one thing and the capabilities browser to another, SeleniumBase will use the capabilities browser as the browser. You'll need default SeleniumBase capabilities for: * Using a proxy server (not the same as a Selenium Grid server) * Downloading files to a desired folder * Disabling some warnings on Chrome * Overriding a website's Content Security Policy on Chrome * Other possible reasons You can also set browser desired capabilities from a command line string: Example: pytest test_swag_labs.py --cap-string = '{\"browserName\":\"chrome\",\"name\":\"test1\"}' --server = \"127.0.0.1\" --browser = remote (Enclose cap-string in single quotes. Enclose parameter keys in double quotes.) If you pass \"*\" into the \"name\" field of --cap-string , the name will become the test identifier. Example: pytest test_swag_labs.py --cap-string = '{\"browserName\":\"chrome\",\"name\":\"*\"}' --server = \"127.0.0.1\" --browser = chrome Example name: \"my_first_test.MyTestClass.test_basics\" Using a local Selenium Grid If using a local Selenium Grid with SeleniumBase, start up the Grid Hub and nodes first: seleniumbase grid-hub start seleniumbase grid-node start (The Selenium Server JAR file will be automatically downloaded for first-time Grid users. You'll also need Java installed to start up the Grid.)","title":"Desired Capabilities"},{"location":"help_docs/features_list/","text":"( Watch the tutorial on YouTube )  26f2 Features:  d83d ddc2 fe0f A complete test automation framework for web/mobile UI testing. Supports pytest , unittest , and nose for test discovery and running. No more flaky tests! (Smart-waiting methods make tests reliable.) Powerful console scripts . (Type seleniumbase or sbase to use.) Has the ability to translate tests into multiple spoken languages . Has a flexible command-line interface for customizing test runs. Includes logging tools for dashboards, reports, and screenshots . Has a global config file for configuring settings as needed. Includes a tool for creating interactive web presentations . Includes Chart Maker , a tool for creating interactive charts. Includes a website tour builder for creating interactive walkthroughs. Has a tool to export Katalon Recorder scripts into SeleniumBase format . Can run tests in Headless Mode to hide the browser. (Use --headless ) Can run tests multithreaded from parallel browsers. (Use -n NUM_THREADS ) Can reuse the same browser session between tests. (Use: --reuse-session ) Can run tests using Chrome's mobile device emulator. (Use --mobile ) Can run tests through a proxy server. (Use --proxy=IP_ADDRESS:PORT ) Can use an authenticated proxy server. ( --proxy=USER:PASS@IP_ADDRESS:PORT ) Can change the web browser's user agent string. (Use --agent=USER_AGENT_STRING ) Can load Chrome Extension ZIP files. (Use --extension_zip=ZIP ) Can load Chrome Extension folders. (Use --extension_dir=DIR ) Can set a Chrome User Data Directory / Profile to load. (Use --user_data_dir=DIR ) Includes a hybrid-automation solution called MasterQA to speed up manual testing. Can handle Google Authenticator logins with Python's one-time password library . Is backwards-compatible with Python WebDriver methods. (Use: self.driver ) Can execute JavaScript code from Python calls. (Use: self.execute_script() ) Includes integrations for MySQL , Selenium Grid , Azure , GCP , AWS , and Docker . Includes a tool for converting Selenium IDE recordings into SeleniumBase scripts. Can load and make assertions on PDF files from websites or the local file system. Includes useful Python decorators and password obfuscation methods .","title":"Features List"},{"location":"help_docs/happy_customers/","text":"Here are some organizations that have used SeleniumBase: HubSpot Veracode Autodesk iboss cloud CA Technologies Broadcom MIT Harvard Medical School Mississippi State University Queen's University L1NNA Laboratory First American StreamSets Akamai VMware Baidu Yandex HqO Jana Raid The Room Thoma Bravo GeoNode And more... Case Study: ( HubSpot ) In addition to using SeleniumBase for testing the UI of their content management system, HubSpot used SeleniumBase to automate the migration of website pages from their old CMS to their new one, which saved them over one million USD and a significant amount of time. Learn how HubSpot uses SeleniumBase for website testing by reading: Automated Testing with Selenium For more reading about automation at HubSpot, see: The Classic \"QA Team\" is Obsolete","title":"Case Studies"},{"location":"help_docs/hidden_files_info/","text":"Info about hidden files on macOS  00b6 Depending on your macOS settings, some files may be hidden from view in your Finder window, such as .gitignore . To view all files, run the following command and then reopen the Finder window: defaults write com.apple.finder AppleShowAllFiles -bool true More info on that can be found here: https://www.defaults-write.com/show-hidden-files-in-os-x-finder/ https://www.macworld.co.uk/how-to/mac-software/hidden-files-mac-3520878/ https://setapp.com/how-to/show-hidden-files-on-mac","title":"macOS Hidden Files"},{"location":"help_docs/hidden_files_info/#info-about-hidden-files-on-macos","text":"Depending on your macOS settings, some files may be hidden from view in your Finder window, such as .gitignore . To view all files, run the following command and then reopen the Finder window: defaults write com.apple.finder AppleShowAllFiles -bool true More info on that can be found here: https://www.defaults-write.com/show-hidden-files-in-os-x-finder/ https://www.macworld.co.uk/how-to/mac-software/hidden-files-mac-3520878/ https://setapp.com/how-to/show-hidden-files-on-mac","title":"Info about hidden files on macOS"},{"location":"help_docs/how_it_works/","text":"How it works: At the core, SeleniumBase works by extending pytest as a direct plugin. SeleniumBase automatically spins up web browsers for tests, and then gives those tests access to the SeleniumBase libraries through the BaseCase class . Tests are also given access to SeleniumBase command-line arguments and SeleniumBase methods , which provide additional functionality. (NOTE: pytest uses a feature called test discovery to automatically find and run Python methods that start with \" test_ \" from the file that you specified on the command line.) To use SeleniumBase calls you need the following: from seleniumbase import BaseCase And then have your test classes inherit BaseCase: class MyTestClass ( BaseCase ): (See the example test, my_first_test.py , for reference.)","title":"How it Works"},{"location":"help_docs/install/","text":"Installation If installing SeleniumBase directly from PyPI (the Python Package Index) , use: pip install seleniumbase If installing SeleniumBase from a Git clone, use: git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install . For a development mode install in editable mode, use: git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase/ pip install -e . If installing SeleniumBase from a GitHub branch , use: pip install git+https://github.com/seleniumbase/SeleniumBase.git@master#egg = seleniumbase Useful pip options include: * Add --upgrade OR -U to upgrade an installation. * Add --force-reinstall for a clean install. (If you're not using a virtual environment, you may need to add --user to your pip command if you're seeing errors during installation.)","title":"Install SeleniumBase"},{"location":"help_docs/install_python_pip_git/","text":"Installation instructions for Git, Python, and Pip  00b6 Git  00b6 You can download Git from here . ( A Git GUI tool like SourceTree or GitHub Desktop can help you with Git commands. ) (You can also download SeleniumBase from GitHub without using git-related commands.) Python  00b6 You can download Python from https://www.python.org/downloads/ if it's not already preinstalled on your machine. Pip  00b6 You might already have pip and setuptools installed, but if you don't: python -m easy_install -U pip pip install -U setuptools If that didn't work, here are some more commands you can try: On macOS / Windows / Linux, run the following command: python -m ensurepip --default-pip If your existing version of pip is old, upgrade to the latest version: python -m pip install --upgrade pip setuptools On CentOS 7 and some versions of Linux, you may need to install pip with yum : yum -y update yum -y install python-pip If you're having any trouble getting pip, you can GET PIP HERE . When done, make sure the location of pip is on your path, which is $PATH for macOS/Linux. (On Windows, it's the System Variables Path within System Environment Variables.) You can also get pip (or fix pip) by using: curl https://bootstrap.pypa.io/get-pip.py | python * (If you get SSL errors while trying to install packages with pip, see this Stackoverflow post , which tells you to run the above command.) Keep Pip and Setuptools up-to-date: python -m pip install -U pip setuptools * (Depending on your user permissions, you may need to add --user to the command if you're not inside a Python virtual environment , or use \" sudo \" on a UNIX-based OS if you're getting errors during installation.)","title":"Install Python, pip, git"},{"location":"help_docs/install_python_pip_git/#installation-instructions-for-git-python-and-pip","text":"","title":"Installation instructions for Git, Python, and Pip"},{"location":"help_docs/install_python_pip_git/#git","text":"You can download Git from here . ( A Git GUI tool like SourceTree or GitHub Desktop can help you with Git commands. ) (You can also download SeleniumBase from GitHub without using git-related commands.)","title":"Git"},{"location":"help_docs/install_python_pip_git/#python","text":"You can download Python from https://www.python.org/downloads/ if it's not already preinstalled on your machine.","title":"Python"},{"location":"help_docs/install_python_pip_git/#pip","text":"You might already have pip and setuptools installed, but if you don't: python -m easy_install -U pip pip install -U setuptools If that didn't work, here are some more commands you can try: On macOS / Windows / Linux, run the following command: python -m ensurepip --default-pip If your existing version of pip is old, upgrade to the latest version: python -m pip install --upgrade pip setuptools On CentOS 7 and some versions of Linux, you may need to install pip with yum : yum -y update yum -y install python-pip If you're having any trouble getting pip, you can GET PIP HERE . When done, make sure the location of pip is on your path, which is $PATH for macOS/Linux. (On Windows, it's the System Variables Path within System Environment Variables.) You can also get pip (or fix pip) by using: curl https://bootstrap.pypa.io/get-pip.py | python * (If you get SSL errors while trying to install packages with pip, see this Stackoverflow post , which tells you to run the above command.) Keep Pip and Setuptools up-to-date: python -m pip install -U pip setuptools * (Depending on your user permissions, you may need to add --user to the command if you're not inside a Python virtual environment , or use \" sudo \" on a UNIX-based OS if you're getting errors during installation.)","title":"Pip"},{"location":"help_docs/js_package_manager/","text":"JS Package Manager SeleniumBase lets you load JavaScript packages from any CDN link into any website. Here's an example of loading a website-tour library into the browser while visiting Google: This example, ( google_tour.py from the SeleniumBase examples/tour_examples/ folder), can be run with pytest after you've cloned and installed SeleniumBase from GitHub : pytest google_tour.py Since a CDN is used for holding packages, you no longer need to use other package managers such as NPM, Bower, or Yarn. Here's the Python code for loading JS packages into the web browser with SeleniumBase: self . add_js_link ( js_link ) This example loads the IntroJS JavaScript library: self . add_js_link ( \"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/intro.min.js\" ) You can load any JS package this way as long as you know the URL. If you're wondering how SeleniumBase does this, here's the full Python code, which uses WebDriver's execute_script() method for making JS calls after escaping quotes: def add_js_link ( driver , js_link ): script_to_add_js = ( \"\"\"function injectJS(link) { var body = document.getElementsByTagName(\"body\")[0]; var script = document.createElement(\"script\"); script.src = link; script.defer; script.type=\"text/javascript\"; script.crossorigin = \"anonymous\"; script.onload = function() { null }; body.appendChild(script); } injectJS(\"%s\");\"\"\" ) js_link = escape_quotes_if_needed ( js_link ) driver . execute_script ( script_to_add_js % js_link ) Now that you've loaded JavaScript into the browser, you may also want to load some CSS to go along with it: self . add_css_link ( css_link ) Here's code that loads the IntroJS CSS: self . add_css_link ( \"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/introjs.css\" ) And here's the Python WebDriver code that makes this possible: def add_css_link ( driver , css_link ): script_to_add_css = ( \"\"\"function injectCSS(css) { var head = document.getElementsByTagName(\"head\")[0]; var link = document.createElement(\"link\"); link.rel = \"stylesheet\"; link.type = \"text/css\"; link.href = css; link.crossorigin = \"anonymous\"; head.appendChild(link); } injectCSS(\"%s\");\"\"\" ) css_link = escape_quotes_if_needed ( css_link ) driver . execute_script ( script_to_add_css % css_link ) Website tours are just one of the many ways of using the SeleniumBase JS Package Manager. The following example shows the JqueryConfirm package loaded into a website for creating fancy dialog boxes: (Example from SeleniumBase's MasterQA ReadMe ) Since packages are loaded directly from a CDN, such as CloudFlare's cdnjs , there's no need to use NPM, Bower, Yarn, or other package managers to get the packages that you need into the websites that you want. To learn more about SeleniumBase, check out the Docs Site: All the code is on GitHub: And if you're just interested in creating website tours with SeleniumBase, here's the link to the Website Tours ReadMe .","title":"JS Package Manager"},{"location":"help_docs/locale_codes/","text":"Language Locale Codes You can specify a Language Locale Code to customize web pages on supported websites. With SeleniumBase you can change the web browser's Locale on the command line by adding: --locale = CODE # Example: --locale=ru List of Language Locale Codes: Language Code Afrikaans af Amharic am Arabic ar Arabic (Egypt) ar_ eg Arabic (Saudi Arabia) ar_ sa Basque eu Belarusian be Bengali bn Bulgarian bg Catalan ca Chinese zh Chinese (China Mainland) zh_ cn Chinese (Hong Kong) zh_ hk Chinese (Taiwan) zh_ tw Croatian hr Czech cs Danish da Dutch nl English en English (United States) en_ us English (Australia) en_ au English (Canada) en_ ca English (United Kingdom) en_ gb English (Ireland) en_ ie English (India) en_ in English (Singapore) en_ sg English (South Africa) en_ za Estonian et Farsi fa Filipino fil Finnish fi French fr French (Canada) fr_ ca French (Switzerland) fr_ ch Galician gl German de German (Austria) de_ at Greek el Gujarati gu Hebrew he Hindi hi Hungarian hu Icelandic is Indonesian id Italian it Japanese ja Kannada kn Korean ko Lao lo Latvian lv Lingala ln Lithuanian lt Malay ms Malayalam ml Marathi mr Norwegian no Polish pl Portuguese pt Portuguese (Brazil) pt_ br Portuguese (Portugal) pt_ pt Romanian ro Russian ru Serbian sr Slovak sk Slovenian sl Spanish es Spanish (Latin America) es_ 419 Spanish (Argentina) es_ ar Spanish (Chile) es_ cl Spanish (Colombia) es_ co Spanish (Costa Rica) es_ cr Spanish (Dominican Rep.) es_ do Spanish (Ecuador) es_ ec Spanish (El Salvador) es_ sv Spanish (Guatemala) es_ gt Spanish (Honduras) es_ hn Spanish (Mexico) es_ mx Spanish (Nicaragua) es_ ni Spanish (Panama) es_ pa Spanish (Peru) es_ pe Spanish (Puerto Rico) es_ pr Spanish (Paraguay) es_ py Spanish (United States) es_ us Spanish (Uruguay) es_ uy Spanish (Venezuela) es_ ve Swahili sw Swedish sv Swiss German gsw Tagalog tl Tamil ta Telugu te Thai th Turkish tr Ukrainian uk Urdu ur Vietnamese vi Zulu zu","title":"Locale Codes"},{"location":"help_docs/method_summary/","text":"Method Summary (API Reference) Here's a summary of SeleniumBase method definitions, which are defined in base_case.py For backwards compatibility, older versions of method names have remained to keep older scripts working. (Ex: wait_for_element_visible was later shortened to wait_for_element and then to find_element. Also, add_text and send_keys are the same, etc.) self . open ( url ) # Duplicates: self.open_url(url), self.visit(url), visit_url(url), # self.goto(url), self.go_to(url) self . get ( url ) # If the url parameter is a URL: Perform self.open(url) # Otherwise: return self.get_element(URL_AS_A_SELECTOR) self . click ( selector , by = By . CSS_SELECTOR , timeout = None , delay = 0 ) self . slow_click ( selector , by = By . CSS_SELECTOR , timeout = None ) self . double_click ( selector , by = By . CSS_SELECTOR , timeout = None ) self . click_chain ( selectors_list , by = By . CSS_SELECTOR , timeout = None , spacing = 0 ) self . type ( selector , text , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.update_text(selector, text, by=By.CSS_SELECTOR, timeout=None) # self.input(selector, text, by=By.CSS_SELECTOR, timeout=None) # self.write(selector, text, by=By.CSS_SELECTOR, timeout=None) self . add_text ( selector , text , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.send_keys(selector, text, by=By.CSS_SELECTOR, timeout=None) self . submit ( selector , by = By . CSS_SELECTOR ) self . clear ( selector , by = By . CSS_SELECTOR , timeout = None ) self . refresh_page () # Duplicates: self.refresh(), self.reload(), self.reload_page() self . get_current_url () self . get_page_source () self . get_title () # Duplicates: self.get_page_title() self . get_user_agent () self . get_locale_code () self . go_back () self . go_forward () self . is_element_present ( selector , by = By . CSS_SELECTOR ) self . is_element_visible ( selector , by = By . CSS_SELECTOR ) self . is_text_visible ( text , selector = \"html\" , by = By . CSS_SELECTOR ) self . is_link_text_visible ( link_text ) self . is_partial_link_text_visible ( partial_link_text ) self . is_link_text_present ( link_text ) self . is_partial_link_text_present ( link_text ) self . get_link_attribute ( link_text , attribute , hard_fail = True ) # Duplicates: self.get_link_text_attribute(link_text, attribute, hard_fail=True) self . get_partial_link_text_attribute ( link_text , attribute , hard_fail = True ) self . click_link ( link_text , timeout = None ) # Duplicates: self.click_link_text(link_text, timeout=None) self . click_partial_link ( partial_link_text , timeout = None ) # Duplicates: self.click_partial_link_text(partial_link_text, timeout=None) self . get_text ( selector , by = By . CSS_SELECTOR , timeout = None ) self . get_attribute ( selector , attribute , by = By . CSS_SELECTOR , timeout = None , hard_fail = True ) self . set_attribute ( selector , attribute , value , by = By . CSS_SELECTOR , timeout = None ) self . set_attributes ( selector , attribute , value , by = By . CSS_SELECTOR ) # Duplicates: self.set_attribute_all(selector, attribute, value, by=By.CSS_SELECTOR) self . remove_attribute ( selector , attribute , by = By . CSS_SELECTOR , timeout = None ) self . remove_attributes ( selector , attribute , by = By . CSS_SELECTOR ) self . get_property_value ( selector , property , by = By . CSS_SELECTOR , timeout = None ) self . get_image_url ( selector , by = By . CSS_SELECTOR , timeout = None ) self . find_elements ( selector , by = By . CSS_SELECTOR , limit = 0 ) self . find_visible_elements ( selector , by = By . CSS_SELECTOR , limit = 0 ) self . click_visible_elements ( selector , by = By . CSS_SELECTOR , limit = 0 , timeout = None ) self . click_nth_visible_element ( selector , number , by = By . CSS_SELECTOR , timeout = None ) self . click_if_visible ( selector , by = By . CSS_SELECTOR ) self . is_selected ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.is_checked(selector, by=By.CSS_SELECTOR, timeout=None) self . select_if_unselected ( selector , by = By . CSS_SELECTOR ) # Duplicates: self.check_if_unchecked(selector, by=By.CSS_SELECTOR) self . unselect_if_selected ( selector , by = By . CSS_SELECTOR ) # Duplicates: self.uncheck_if_checked(selector, by=By.CSS_SELECTOR) self . is_element_in_an_iframe ( selector , by = By . CSS_SELECTOR ) self . switch_to_frame_of_element ( selector , by = By . CSS_SELECTOR ) self . hover_on_element ( selector , by = By . CSS_SELECTOR ) self . hover_and_click ( hover_selector , click_selector , hover_by = By . CSS_SELECTOR , click_by = By . CSS_SELECTOR , timeout = None ) self . hover_and_double_click ( hover_selector , click_selector , hover_by = By . CSS_SELECTOR , click_by = By . CSS_SELECTOR , timeout = None ) self . drag_and_drop ( drag_selector , drop_selector , drag_by = By . CSS_SELECTOR , drop_by = By . CSS_SELECTOR , timeout = None ) self . drag_and_drop_with_offset ( selector , x , y , by = By . CSS_SELECTOR , timeout = None ) self . select_option_by_text ( dropdown_selector , option , dropdown_by = By . CSS_SELECTOR , timeout = None ) self . select_option_by_index ( dropdown_selector , option , dropdown_by = By . CSS_SELECTOR , timeout = None ) self . select_option_by_value ( dropdown_selector , option , dropdown_by = By . CSS_SELECTOR , timeout = None ) self . load_html_string ( html_string , new_page = True ) self . load_html_file ( html_file , new_page = True ) self . open_html_file ( html_file ) self . execute_script ( script ) self . execute_async_script ( script , timeout = None ) self . safe_execute_script ( script ) self . set_window_rect ( x , y , width , height ) self . set_window_size ( width , height ) self . maximize_window () self . switch_to_frame ( frame , timeout = None ) self . switch_to_default_content () self . open_new_window ( switch_to = True ) self . switch_to_window ( window , timeout = None ) self . switch_to_default_window () self . get_new_driver ( browser = None , headless = None , locale_code = None , servername = None , port = None , proxy = None , agent = None , switch_to = True , cap_file = None , cap_string = None , disable_csp = None , enable_ws = None , enable_sync = None , use_auto_ext = None , no_sandbox = None , disable_gpu = None , incognito = None , guest_mode = None , devtools = None , remote_debug = None , swiftshader = None , block_images = None , user_data_dir = None , extension_zip = None , extension_dir = None , is_mobile = False , d_width = None , d_height = None , d_p_r = None ) self . switch_to_driver ( driver ) self . switch_to_default_driver () self . save_screenshot ( name , folder = None ) self . save_page_source ( name , folder = None ) self . save_cookies ( name = \"cookies.txt\" ) self . load_cookies ( name = \"cookies.txt\" ) self . delete_all_cookies () self . delete_saved_cookies ( name = \"cookies.txt\" ) self . wait_for_ready_state_complete ( timeout = None ) self . wait_for_angularjs ( timeout = None ) self . sleep ( seconds ) # Duplicates: self.wait(seconds) self . activate_design_mode () self . deactivate_design_mode () self . activate_jquery () self . bring_to_front ( selector , by = By . CSS_SELECTOR ) self . highlight_click ( selector , by = By . CSS_SELECTOR , loops = 3 , scroll = True ) self . highlight_update_text ( selector , text , by = By . CSS_SELECTOR , loops = 3 , scroll = True ) self . highlight ( selector , by = By . CSS_SELECTOR , loops = 4 , scroll = True ) self . press_up_arrow ( selector = \"html\" , times = 1 , by = By . CSS_SELECTOR ) self . press_down_arrow ( selector = \"html\" , times = 1 , by = By . CSS_SELECTOR ) self . press_left_arrow ( selector = \"html\" , times = 1 , by = By . CSS_SELECTOR ) self . press_right_arrow ( selector = \"html\" , times = 1 , by = By . CSS_SELECTOR ) self . scroll_to ( selector , by = By . CSS_SELECTOR ) self . slow_scroll_to ( selector , by = By . CSS_SELECTOR ) self . scroll_to_top () self . scroll_to_bottom () self . click_xpath ( xpath ) self . js_click ( selector , by = By . CSS_SELECTOR , all_matches = False ) self . js_click_all ( selector , by = By . CSS_SELECTOR ) self . jquery_click ( selector , by = By . CSS_SELECTOR ) self . jquery_click_all ( selector , by = By . CSS_SELECTOR ) self . hide_element ( selector , by = By . CSS_SELECTOR ) self . hide_elements ( selector , by = By . CSS_SELECTOR ) self . show_element ( selector , by = By . CSS_SELECTOR ) self . show_elements ( selector , by = By . CSS_SELECTOR ) self . remove_element ( selector , by = By . CSS_SELECTOR ) self . remove_elements ( selector , by = By . CSS_SELECTOR ) self . ad_block () # Duplicates: self.block_ads() self . get_domain_url ( url ) self . get_beautiful_soup ( source = None ) self . get_unique_links () self . get_link_status_code ( link , allow_redirects = False , timeout = 5 ) self . assert_link_status_code_is_not_404 ( link ) self . assert_no_404_errors ( multithreaded = True ) # Duplicates: self.assert_no_broken_links(multithreaded=True) self . print_unique_links_with_status_codes () self . get_pdf_text ( pdf , page = None , maxpages = None , password = None , codec = 'utf-8' , wrap = False , nav = False , override = False ) self . assert_pdf_text ( pdf , text , page = None , maxpages = None , password = None , codec = 'utf-8' , wrap = True , nav = False , override = False ) self . create_folder ( folder ) self . choose_file ( selector , file_path , by = By . CSS_SELECTOR , timeout = None ) self . save_element_as_image_file ( selector , file_name , folder = None , overlay_text = \"\" ) self . download_file ( file_url , destination_folder = None ) self . save_file_as ( file_url , new_file_name , destination_folder = None ) self . save_data_as ( data , file_name , destination_folder = None ) self . get_downloads_folder () self . get_path_of_downloaded_file ( file ) self . is_downloaded_file_present ( file ) self . assert_downloaded_file ( file , timeout = None ) self . assert_true ( expr , msg = None ) self . assert_false ( expr , msg = None ) self . assert_equal ( first , second , msg = None ) self . assert_not_equal ( first , second , msg = None ) self . assert_raises ( * args , ** kwargs ) self . assert_title ( title ) self . assert_no_js_errors () self . inspect_html () self . get_google_auth_password ( totp_key = None ) self . convert_css_to_xpath ( css ) self . convert_xpath_to_css ( xpath ) self . convert_to_css_selector ( selector , by ) self . set_value ( selector , text , by = By . CSS_SELECTOR , timeout = None ) self . js_update_text ( selector , text , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.js_type(selector, text, by=By.CSS_SELECTOR, timeout=None) # self.set_text(selector, text, by=By.CSS_SELECTOR, timeout=None) self . jquery_update_text ( selector , text , by = By . CSS_SELECTOR , timeout = None ) self . set_time_limit ( time_limit ) self . skip ( reason = \"\" ) ############ self . set_local_storage_item ( key , value ) self . get_local_storage_item ( key ) self . remove_local_storage_item ( key ) self . clear_local_storage () self . get_local_storage_keys () self . get_local_storage_items () self . set_session_storage_item ( key , value ) self . get_session_storage_item ( key ) self . remove_session_storage_item ( key ) self . clear_session_storage () self . get_session_storage_keys () self . get_session_storage_items () ############ self . add_css_link ( css_link ) self . add_js_link ( js_link ) self . add_css_style ( css_style ) self . add_js_code_from_link ( js_link ) self . add_js_code ( js_code ) self . add_meta_tag ( http_equiv = None , content = None ) ############ self . create_presentation ( name = None , theme = \"default\" , transition = \"default\" ) self . add_slide ( content = None , image = None , code = None , iframe = None , content2 = None , notes = None , transition = None , name = None ) self . save_presentation ( name = None , filename = None , show_notes = False , interval = 0 ) self . begin_presentation ( name = None , filename = None , show_notes = False , interval = 0 ) ############ self . create_pie_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ) self . create_bar_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ) self . create_column_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , libs = True ) self . create_line_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ) self . create_area_chart ( chart_name = None , title = None , subtitle = None , data_name = None , unit = None , zero = False , libs = True ) self . add_series_to_chart ( data_name = None , chart_name = None ) self . add_data_point ( label , value , color = None , chart_name = None ) self . save_chart ( chart_name = None , filename = None , folder = None ) self . display_chart ( chart_name = None , filename = None , interval = 0 ) self . extract_chart ( chart_name = None ) ############ self . create_tour ( name = None , theme = None ) self . create_shepherd_tour ( name = None , theme = None ) self . create_bootstrap_tour ( name = None ) self . create_hopscotch_tour ( name = None ) self . create_introjs_tour ( name = None ) self . add_tour_step ( message , selector = None , name = None , title = None , theme = None , alignment = None ) self . play_tour ( name = None ) self . export_tour ( name = None , filename = \"my_tour.js\" , url = None ) self . activate_jquery_confirm () self . activate_messenger () self . post_message ( message , duration = None , pause = True , style = \"info\" ) self . post_message_and_highlight ( message , selector , by = By . CSS_SELECTOR ) self . post_success_message ( message , duration = None , pause = True ) self . post_error_message ( message , duration = None , pause = True ) self . set_messenger_theme ( theme = \"default\" , location = \"default\" , max_messages = \"default\" ) ############ self . generate_referral ( start_page , destination_page ) self . generate_traffic ( start_page , destination_page , loops = 1 ) self . generate_referral_chain ( pages ) self . generate_traffic_chain ( pages , loops = 1 ) ############ self . get_element ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.wait_for_element_present(selector, by=By.CSS_SELECTOR, timeout=None) self . find_element ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.wait_for_element(selector, by=By.CSS_SELECTOR, timeout=None) # self.wait_for_element_visible(selector, by=By.CSS_SELECTOR, timeout=None) self . assert_element_present ( selector , by = By . CSS_SELECTOR , timeout = None ) self . assert_element ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.assert_element_visible(selector, by=By.CSS_SELECTOR, timeout=None) ############ self . find_text ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.wait_for_text(text, selector=\"html\", by=By.CSS_SELECTOR, timeout=None) # self.wait_for_text_visible(text, selector=\"html\", by=By.CSS_SELECTOR, timeout=None) self . wait_for_exact_text_visible ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) self . assert_text ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.assert_text_visible(text, selector=\"html\", by=By.CSS_SELECTOR, timeout=None) self . assert_exact_text ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) ############ self . wait_for_link_text_present ( link_text , timeout = None ) self . wait_for_partial_link_text_present ( link_text , timeout = None ) self . find_link_text ( link_text , timeout = None ) # Duplicates: self.wait_for_link_text(link_text, timeout=None) # self.wait_for_link_text_visible(link_text, timeout=None) self . assert_link_text ( link_text , timeout = None ) ############ self . find_partial_link_text ( partial_link_text , timeout = None ) # Duplicates: self.wait_for_partial_link_text(partial_link_text, timeout=None) self . assert_partial_link_text ( partial_link_text , timeout = None ) ############ self . wait_for_element_absent ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.wait_for_element_not_present(selector, by=By.CSS_SELECTOR) self . assert_element_absent ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.assert_element_not_present(selector, by=By.CSS_SELECTOR) ############ self . wait_for_element_not_visible ( selector , by = By . CSS_SELECTOR , timeout = None ) self . assert_element_not_visible ( selector , by = By . CSS_SELECTOR , timeout = None ) ############ self . wait_for_text_not_visible ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) self . assert_text_not_visible ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) ############ self . accept_alert ( timeout = None ) # Duplicates: self.wait_for_and_accept_alert(timeout=None) self . dismiss_alert ( timeout = None ) # Duplicates: self.wait_for_and_dismiss_alert(timeout=None) self . switch_to_alert ( timeout = None ) # Duplicates: self.wait_for_and_switch_to_alert(timeout=None) ############ self . check_window ( name = \"default\" , level = 0 , baseline = False ) ############ self . deferred_assert_element ( selector , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.delayed_assert_element(selector, by=By.CSS_SELECTOR, timeout=None) self . deferred_assert_text ( text , selector = \"html\" , by = By . CSS_SELECTOR , timeout = None ) # Duplicates: self.delayed_assert_text(text, selector=\"html\", by=By.CSS_SELECTOR, timeout=None) self . process_deferred_asserts ( print_only = False ) # Duplicates: self.process_delayed_asserts(print_only=False) ############ self . fail ( msg = None ) # Inherited from \"unittest\" self . _print ( TEXT ) # Calls Python's print() / Allows for translations Example Test: my_first_test.py","title":"API Reference"},{"location":"help_docs/mobile_testing/","text":"Mobile Testing Use --mobile to run SeleniumBase tests using Chrome's mobile device emulator with default values for Device Metrics and User-Agent. Here's an example mobile test: SeleniumBase/examples/test_skype_site.py pytest test_skype_site.py --mobile To configure Device Metrics, use: --metrics = \"CSS_Width,CSS_Height,Pixel_Ratio\" To configure the User-Agent, use: --agent = \"USER-AGENT-STRING\" To find real values for Device Metrics, see: Device Metrics List To find real User-Agent strings, see: User Agent Strings List Here's another example of a mobile test: SeleniumBase/examples/test_swag_labs.py pytest test_swag_labs.py --mobile Here's an example of configuring mobile settings for that test: # Run tests using Chrome's mobile device emulator (default settings) pytest test_swag_labs.py --mobile # Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio pytest test_swag_labs.py --mobile --metrics = \"411,731,3\" # Run mobile tests specifying the user agent pytest test_swag_labs.py --mobile --agent = \"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"","title":"Mobile Testing"},{"location":"help_docs/mysql_installation/","text":"MySQL Installation Instructions  00b6 MySQL (OPTIONAL)  00b6 (NOTE: If you're using this test framework from a local development machine and don't plan on writing to a MySQL DB from your local test runs, you can skip this step.) Linux (Ubuntu):  00b6 sudo apt update sudo apt install mysql-server sudo mysql_secure_installation sudo mysql -e 'CREATE DATABASE IF NOT EXISTS test_db;' sudo mysql -h 127 .0.0.1 -u root test_db < seleniumbase/core/create_db_tables.sql sudo service mysql restart To change the password: mysqladmin -u root -p 'OLD_PASSWORD' password NEW_PASSWORD sudo service mysql restart MacOS  00b6 brew install mysql Then you'll need to start the MySQL service: brew services start mysql Continue with additional steps below to setup your DB. Windows  00b6 Download MySQL here Follow the steps from the MySQL Downloads page. Continue with additional steps below to setup your DB. Access your MySQL DB  00b6 If you want a visual tool to help make your MySQL life easier, try MySQL Workbench . Prepare your MySQL DB  00b6 You can use the create_db_tables.sql file to create the necessary tables for storing test data. Configure your MySQL DB for SeleniumBase  00b6 You'll want to update your settings.py file with your MySQL DB credentials so that tests can write to the database when they run. Allow tests to write to your MySQL database  00b6 Add the --with-db_reporting argument on the command line when you want tests to write to your MySQL database. Example: pytest my_first_test.py --with-db_reporting","title":"MySQL Instructions"},{"location":"help_docs/mysql_installation/#mysql-installation-instructions","text":"","title":"MySQL Installation Instructions"},{"location":"help_docs/mysql_installation/#mysql-optional","text":"(NOTE: If you're using this test framework from a local development machine and don't plan on writing to a MySQL DB from your local test runs, you can skip this step.)","title":"MySQL (OPTIONAL)"},{"location":"help_docs/mysql_installation/#linux-ubuntu","text":"sudo apt update sudo apt install mysql-server sudo mysql_secure_installation sudo mysql -e 'CREATE DATABASE IF NOT EXISTS test_db;' sudo mysql -h 127 .0.0.1 -u root test_db < seleniumbase/core/create_db_tables.sql sudo service mysql restart To change the password: mysqladmin -u root -p 'OLD_PASSWORD' password NEW_PASSWORD sudo service mysql restart","title":"Linux (Ubuntu):"},{"location":"help_docs/mysql_installation/#macos","text":"brew install mysql Then you'll need to start the MySQL service: brew services start mysql Continue with additional steps below to setup your DB.","title":"MacOS"},{"location":"help_docs/mysql_installation/#windows","text":"Download MySQL here Follow the steps from the MySQL Downloads page. Continue with additional steps below to setup your DB.","title":"Windows"},{"location":"help_docs/mysql_installation/#access-your-mysql-db","text":"If you want a visual tool to help make your MySQL life easier, try MySQL Workbench .","title":"Access your MySQL DB"},{"location":"help_docs/mysql_installation/#prepare-your-mysql-db","text":"You can use the create_db_tables.sql file to create the necessary tables for storing test data.","title":"Prepare your MySQL DB"},{"location":"help_docs/mysql_installation/#configure-your-mysql-db-for-seleniumbase","text":"You'll want to update your settings.py file with your MySQL DB credentials so that tests can write to the database when they run.","title":"Configure your MySQL DB for SeleniumBase"},{"location":"help_docs/mysql_installation/#allow-tests-to-write-to-your-mysql-database","text":"Add the --with-db_reporting argument on the command line when you want tests to write to your MySQL database. Example: pytest my_first_test.py --with-db_reporting","title":"Allow tests to write to your MySQL database"},{"location":"help_docs/syntax_formats/","text":"The 15 syntax formats ( Watch this tutorial on YouTube ) SeleniumBase supports 15 different syntax formats for structuring tests. ( The first 4 are the most common. ) 1. BaseCase direct inheritance This format is used by most of the examples in the SeleniumBase examples folder . It's a great starting point for anyone learning SeleniumBase, and it follows good object-oriented programming principles. In this format, BaseCase is imported at the top of a Python file, followed by a Python class inheriting BaseCase . Then, any test method defined in that class automatically gains access to SeleniumBase methods, including the setUp() and tearDown() methods that are automatically called to spin up and spin down web browsers at the beginning and end of test methods. Here's an example of that: from seleniumbase import BaseCase class MyTestClass ( BaseCase ): def test_demo_site ( self ): self . open ( \"https://seleniumbase.io/demo_page\" ) self . type ( \"#myTextInput\" , \"This is Automated\" ) self . click ( \"#myButton\" ) self . assert_element ( \"tbody#tbodyId\" ) self . assert_text ( \"Automation Practice\" , \"h3\" ) self . click_link ( \"SeleniumBase Demo Page\" ) self . assert_exact_text ( \"Demo Page\" , \"h1\" ) self . assert_no_js_errors () (See examples/test_demo_site.py for the full test.) 2. BaseCase subclass inheritance There are situations where you may want to customize the setUp and tearDown of your tests. Maybe you want to have all your tests login to a specific web site first, or maybe you want to have your tests report results through an API call depending on whether a test passed or failed. This can be done by creating a subclass of BaseCase and then carefully creating custom setUp() and tearDown() methods that don't overwrite the critical functionality of the default SeleniumBase setUp() and tearDown() methods. Afterwards, your test classes will inherit the subclass of BaseCase with the added functionality, rather than directly inheriting BaseCase itself. Here's an example of that: from seleniumbase import BaseCase class BaseTestCase ( BaseCase ): def setUp ( self ): super ( BaseTestCase , self ) . setUp () # <<< Run custom setUp() code for tests AFTER the super().setUp() >>> def tearDown ( self ): self . save_teardown_screenshot () if self . has_exception (): # <<< Run custom code if the test failed. >>> pass else : # <<< Run custom code if the test passed. >>> pass # (Wrap unreliable tearDown() code in a try/except block.) # <<< Run custom tearDown() code BEFORE the super().tearDown() >>> super ( BaseTestCase , self ) . tearDown () def login ( self ): # <<< Placeholder. Add your code here. >>> # Reduce duplicate code in tests by having reusable methods like this. # If the UI changes, the fix can be applied in one place. pass def example_method ( self ): # <<< Placeholder. Add your code here. >>> pass class MyTests ( BaseTestCase ): def test_example ( self ): self . login () self . example_method () self . type ( \"input\" , \"Name\" ) self . click ( \"form button\" ) ... (See examples/boilerplates/base_test_case.py for more info.) 3. The sb pytest fixture (no class) The pytest framework comes with a unique system called fixtures, which replaces import statements at the top of Python files by importing libraries directly into test definitions. More than just being an import, a pytest fixture can also automatically call predefined setUp() and tearDown() methods at the beginning and end of test methods. To work, sb is added as an argument to each test method definition that needs SeleniumBase functionality. This means you no longer need import statements in your Python files to use SeleniumBase. If using other pytest fixtures in your tests, you may need to use the SeleniumBase fixture (instead of BaseCase class inheritance) for compatibility reasons. Here's an example of the sb fixture in a test that does not use Python classes: def test_sb_fixture_with_no_class ( sb ): sb . open ( \"https://google.com/ncr\" ) sb . type ( 'input[title=\"Search\"]' , 'SeleniumBase \\n ' ) sb . click ( 'a[href*=\"github.com/seleniumbase/SeleniumBase\"]' ) sb . click ( 'a[title=\"seleniumbase\"]' ) (See the top of examples/test_sb_fixture.py for the test.) 4. The sb pytest fixture (in class) The sb pytest fixture can also be used inside of a class. There is a slight change to the syntax because that means test methods must also include self in their argument definitions when test methods are defined. (The self argument represents the class object, and is used in every test method that lives inside of a class.) Once again, no import statements are needed in your Python files for this to work. Here's an example of using the sb fixture in a test method that lives inside of a Python class: class Test_SB_Fixture (): def test_sb_fixture_inside_class ( self , sb ): sb . open ( \"https://google.com/ncr\" ) sb . type ( 'input[title=\"Search\"]' , 'SeleniumBase \\n ' ) sb . click ( 'a[href*=\"github.com/seleniumbase/SeleniumBase\"]' ) sb . click ( 'a[title=\"examples\"]' ) (See the bottom of examples/test_sb_fixture.py for the test.) 5. Using the request fixture to get the sb fixture (no class) The pytest request fixture can be used to retrieve other pytest fixtures from within tests, such as the sb fixture. This allows you to have more control over when fixtures get initialized because the fixture no longer needs to be loaded at the very beginning of test methods. This is done by calling request.getfixturevalue('sb') from the test. Here's an example of using the pytest request fixture to load the sb fixture in a test method that does not use Python classes: def test_request_sb_fixture ( request ): sb = request . getfixturevalue ( 'sb' ) sb . open ( \"https://seleniumbase.io/demo_page\" ) sb . assert_text ( \"SeleniumBase\" , \"#myForm h2\" ) sb . assert_element ( \"input#myTextInput\" ) sb . type ( \"#myTextarea\" , \"This is me\" ) sb . click ( \"#myButton\" ) sb . tearDown () (See the top of examples/test_request_sb_fixture.py for the test.) 6. Using the request fixture to get the sb fixture (in class) The pytest request fixture can also be used to get the sb fixture from inside a Python class. Here's an example of that: class Test_Request_Fixture (): def test_request_sb_fixture_in_class ( self , request ): sb = request . getfixturevalue ( 'sb' ) sb . open ( \"https://seleniumbase.io/demo_page\" ) sb . assert_element ( \"input#myTextInput\" ) sb . type ( \"#myTextarea\" , \"Automated\" ) sb . assert_text ( \"This Text is Green\" , \"#pText\" ) sb . click ( \"#myButton\" ) sb . assert_text ( \"This Text is Purple\" , \"#pText\" ) sb . tearDown () (See the bottom of examples/test_request_sb_fixture.py for the test.) 7. SeleniumBase in Chinese This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Chinese. Here's an example of that: from seleniumbase.translate.chinese import  7852 6d4b 8bd5 7528 4f8b class  6211 7684 6d4b 8bd5 7c7b (  7852 6d4b 8bd5 7528 4f8b ): def test_ 4f8b 5b501 ( self ): self .  5f00 542f 7f51 5740 ( \"https://xkcd.in/comic?lg=cn&id=353\" ) self .  65ad 8a00 6807 9898 ( \"Python - XKCD 4e2d 6587 7ad9\" ) self .  65ad 8a00 5143 7d20 ( \"#content div.comic-body\" ) self .  65ad 8a00 6587 672c ( \" 4e0a 6f2b 753b\" ) self .  5355 51fb ( \"div.nextLink\" ) self .  65ad 8a00 6587 672c ( \" 6bcd 4eb2 7684 529f 7ee9\" , \"#content h1\" ) self .  5355 51fb 94fe 63a5 6587 672c ( \" 4e0b 4e00 7bc7\" ) self .  65ad 8a00 6587 672c ( \" 6572 6253\" , \"#content h1\" ) self .  65ad 8a00 6587 672c ( \" 6709 65f6 ff0c 6700 6709 8da3 7684 4e8b 4e5f 4f1a 663e 5f97 65e0 804a\" ) self .  56de 53bb () self .  5355 51fb 94fe 63a5 6587 672c ( \" 5170 5fb7 5c14 00b7 95e8 7f57\" ) self .  65ad 8a00 6587 672c ( \" 5170 5fb7 5c14 00b7 95e8 7f57\" , \"#firstHeading\" ) self .  8f93 5165 6587 672c ( \"#searchInput\" , \" 7a0b 5f0f 8bbe 8ba1\" ) self .  5355 51fb ( \"#searchButton\" ) self .  65ad 8a00 6587 672c ( \" 7a0b 5e8f 8bbe 8ba1\" , \"#firstHeading\" ) (See examples/translations/chinese_test_1.py for the Chinese test.) 8. SeleniumBase in Dutch This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Dutch. Here's an example of that: from seleniumbase.translate.dutch import Testgeval class MijnTestklasse ( Testgeval ): def test_voorbeeld_1 ( self ): self . openen ( \"https://nl.wikipedia.org/wiki/Hoofdpagina\" ) self . controleren_element ( 'a[title*=\"hoofdpagina gaan\"]' ) self . controleren_tekst ( \"Welkom op Wikipedia\" , \"td.hp-welkom\" ) self . typ ( \"#searchInput\" , \"Stroopwafel\" ) self . klik ( \"#searchButton\" ) self . controleren_tekst ( \"Stroopwafel\" , \"#firstHeading\" ) self . controleren_element ( 'img[alt=\"Stroopwafels\"]' ) self . typ ( \"#searchInput\" , \"Rijksmuseum Amsterdam\" ) self . klik ( \"#searchButton\" ) self . controleren_tekst ( \"Rijksmuseum\" , \"#firstHeading\" ) self . controleren_element ( 'img[alt=\"Het Rijksmuseum\"]' ) self . terug () self . controleren_ware ( \"Stroopwafel\" in self . huidige_url_ophalen ()) self . vooruit () self . controleren_ware ( \"Rijksmuseum\" in self . huidige_url_ophalen ()) (See examples/translations/dutch_test_1.py for the Dutch test.) 9. SeleniumBase in French This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into French. Here's an example of that: from seleniumbase.translate.french import CasDeBase class MaClasseDeTest ( CasDeBase ): def test_exemple_1 ( self ): self . ouvrir ( \"https://fr.wikipedia.org/wiki/\" ) self . v 00e9rifier_texte ( \"Wikip 00e9dia\" ) self . v 00e9rifier_ 00e9l 00e9ment ( '[alt=\"Wikip 00e9dia\"]' ) self . taper ( \"#searchInput\" , \"Cr 00e8me br 00fbl 00e9e\" ) self . cliquer ( \"#searchButton\" ) self . v 00e9rifier_texte ( \"Cr 00e8me br 00fbl 00e9e\" , \"#firstHeading\" ) self . v 00e9rifier_ 00e9l 00e9ment ( 'img[alt*=\"Cr 00e8me br 00fbl 00e9e\"]' ) self . taper ( \"#searchInput\" , \"Jardin des Tuileries\" ) self . cliquer ( \"#searchButton\" ) self . v 00e9rifier_texte ( \"Jardin des Tuileries\" , \"#firstHeading\" ) self . v 00e9rifier_ 00e9l 00e9ment ( 'img[alt*=\"Jardin des Tuileries\"]' ) self . retour () self . v 00e9rifier_vrai ( \"br 00fbl 00e9e\" in self . obtenir_url_actuelle ()) self . en_avant () self . v 00e9rifier_vrai ( \"Jardin\" in self . obtenir_url_actuelle ()) (See examples/translations/french_test_1.py for the French test.) 10. SeleniumBase in Italian This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Italian. Here's an example of that: from seleniumbase.translate.italian import CasoDiProva class MiaClasseDiTest ( CasoDiProva ): def test_esempio_1 ( self ): self . apri ( \"https://it.wikipedia.org/wiki/\" ) self . verificare_testo ( \"Wikipedia\" ) self . verificare_elemento ( '[title=\"Lingua italiana\"]' ) self . digitare ( \"#searchInput\" , \"Pizza\" ) self . fare_clic ( \"#searchButton\" ) self . verificare_testo ( \"Pizza\" , \"#firstHeading\" ) self . verificare_elemento ( 'img[alt*=\"pizza\"]' ) self . digitare ( \"#searchInput\" , \"Colosseo\" ) self . fare_clic ( \"#searchButton\" ) self . verificare_testo ( \"Colosseo\" , \"#firstHeading\" ) self . verificare_elemento ( 'img[alt*=\"Colosse\"]' ) self . indietro () self . verificare_vero ( \"Pizza\" in self . ottenere_url_corrente ()) self . avanti () self . verificare_vero ( \"Colosseo\" in self . ottenere_url_corrente ()) (See examples/translations/italian_test_1.py for the Italian test.) 11. SeleniumBase in Japanese This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Japanese. Here's an example of that: from seleniumbase.translate.japanese import  30bb 30ec 30cb 30a6 30e0 30c6 30b9 30c8 30b1 30fc 30b9 class  79c1 306e 30c6 30b9 30c8 30af 30e9 30b9 (  30bb 30ec 30cb 30a6 30e0 30c6 30b9 30c8 30b1 30fc 30b9 ): def test_ 4f8b1 ( self ): self .  3092 958b 304f ( \"https://ja.wikipedia.org/wiki/\" ) self .  30c6 30ad 30b9 30c8 3092 78ba 8a8d 3059 308b ( \" 30a6 30a3 30ad 30da 30c7 30a3 30a2\" ) self .  8981 7d20 3092 78ba 8a8d 3059 308b ( '[title=\" 30e1 30a4 30f3 30da 30fc 30b8 306b 79fb 52d5 3059 308b\"]' ) self .  5165 529b ( \"#searchInput\" , \" 30a2 30cb 30e1\" ) self .  30af 30ea 30c3 30af 3057 3066 ( \"#searchButton\" ) self .  30c6 30ad 30b9 30c8 3092 78ba 8a8d 3059 308b ( \" 30a2 30cb 30e1\" , \"#firstHeading\" ) self .  5165 529b ( \"#searchInput\" , \" 5bff 53f8\" ) self .  30af 30ea 30c3 30af 3057 3066 ( \"#searchButton\" ) self .  30c6 30ad 30b9 30c8 3092 78ba 8a8d 3059 308b ( \" 5bff 53f8\" , \"#firstHeading\" ) self .  8981 7d20 3092 78ba 8a8d 3059 308b ( 'img[alt=\" 63e1 308a 5bff 53f8\"]' ) self .  5165 529b ( \"#searchInput\" , \" 30ec 30b4 30e9 30f3 30c9 30fb 30b8 30e3 30d1 30f3\" ) self .  30af 30ea 30c3 30af 3057 3066 ( \"#searchButton\" ) self .  8981 7d20 3092 78ba 8a8d 3059 308b ( 'img[alt=\"Legoland japan.jpg\"]' ) self .  30ea 30f3 30af 30c6 30ad 30b9 30c8 3092 78ba 8a8d 3059 308b ( \" 540d 53e4 5c4b 57ce\" ) self .  30ea 30f3 30af 30c6 30ad 30b9 30c8 3092 30af 30ea 30c3 30af 3057 307e 3059 ( \" 30c6 30fc 30de 30d1 30fc 30af\" ) self .  30c6 30ad 30b9 30c8 3092 78ba 8a8d 3059 308b ( \" 30c6 30fc 30de 30d1 30fc 30af\" , \"#firstHeading\" ) (See examples/translations/japanese_test_1.py for the Japanese test.) 12. SeleniumBase in Korean This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Korean. Here's an example of that: from seleniumbase.translate.korean import  c140 b808 b284_ d14c c2a4 d2b8_ cf00 c774 c2a4 class  d14c c2a4 d2b8_ d074 b798 c2a4 (  c140 b808 b284_ d14c c2a4 d2b8_ cf00 c774 c2a4 ): def test_ c2e4 c2dc c608_1 ( self ): self .  c5f4 ae30 ( \"https://ko.wikipedia.org/wiki/\" ) self .  d14d c2a4 d2b8_ d655 c778 ( \" c704 d0a4 bc31 acfc\" ) self .  c694 c18c_ d655 c778 ( '[title=\" c704 d0a4 bc31 acfc: c18c ac1c\"]' ) self .  c785 b825 ( \"#searchInput\" , \" ae40 ce58\" ) self .  d074 b9ad ( \"#searchButton\" ) self .  d14d c2a4 d2b8_ d655 c778 ( \" ae40 ce58\" , \"#firstHeading\" ) self .  c694 c18c_ d655 c778 ( 'img[alt=\"Various kimchi.jpg\"]' ) self .  b9c1 d06c_ d14d c2a4 d2b8_ d655 c778 ( \" d55c ad6d  c694 b9ac\" ) self .  c785 b825 ( \"#searchInput\" , \" be44 be54 bc25\" ) self .  d074 b9ad ( \"#searchButton\" ) self .  d14d c2a4 d2b8_ d655 c778 ( \" be44 be54 bc25\" , \"#firstHeading\" ) self .  c694 c18c_ d655 c778 ( 'img[alt=\"Dolsot-bibimbap.jpg\"]' ) self .  b9c1 d06c_ d14d c2a4 d2b8 b97c_ d074 b9ad d569 b2c8 b2e4 ( \" b3cc c1a5 be44 be54 bc25\" ) self .  d14d c2a4 d2b8_ d655 c778 ( \" b3cc c1a5 be44 be54 bc25\" , \"#firstHeading\" ) (See examples/translations/korean_test_1.py for the Korean test.) 13. SeleniumBase in Portuguese This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Portuguese. Here's an example of that: from seleniumbase.translate.portuguese import CasoDeTeste class MinhaClasseDeTeste ( CasoDeTeste ): def test_exemplo_1 ( self ): self . abrir ( \"https://pt.wikipedia.org/wiki/\" ) self . verificar_texto ( \"Wikip 00e9dia\" ) self . verificar_elemento ( '[title=\"L 00edngua portuguesa\"]' ) self . tipo ( \"#searchInput\" , \"Jo 00e3o Pessoa\" ) self . clique ( \"#searchButton\" ) self . verificar_texto ( \"Jo 00e3o Pessoa\" , \"#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Jo 00e3o Pessoa\"]' ) self . tipo ( \"#searchInput\" , \"Florian 00f3polis\" ) self . clique ( \"#searchButton\" ) self . verificar_texto ( \"Florian 00f3polis\" , \"h1#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Avenida Beira Mar\"]' ) self . voltar () self . verificar_verdade ( \"Jo 00e3o\" in self . obter_url_atual ()) self . tipo ( \"#searchInput\" , \"Teatro Amazonas\" ) self . clique ( \"#searchButton\" ) self . verificar_texto ( \"Teatro Amazonas\" , \"#firstHeading\" ) self . verificar_texto_do_link ( \"Festival Amazonas de  00d3pera\" ) (See examples/translations/portuguese_test_1.py for the Portuguese test.) 14. SeleniumBase in Russian This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Russian. Here's an example of that: from seleniumbase.translate.russian import  0422 0435 0441 0442 041d 0430 0421 0435 043b 0435 043d class  041c 043e 0439 0422 0435 0441 0442 043e 0432 044b 0439 041a 043b 0430 0441 0441 (  0422 0435 0441 0442 041d 0430 0421 0435 043b 0435 043d ): def test_ 043f 0440 0438 043c 0435 0440_1 ( self ): self .  043e 0442 043a 0440 044b 0442 044c ( \"https://ru.wikipedia.org/wiki/\" ) self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 044d 043b 0435 043c 0435 043d 0442 ( '[title=\" 0420 0443 0441 0441 043a 0438 0439  044f 0437 044b 043a\"]' ) self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 0442 0435 043a 0441 0442 ( \" 0412 0438 043a 0438 043f 0435 0434 0438 044f\" , \"h2.main-wikimedia-header\" ) self .  0432 0432 0435 0434 0438 0442 0435 ( \"#searchInput\" , \" 041c 0413 0423\" ) self .  043d 0430 0436 043c 0438 0442 0435 ( \"#searchButton\" ) self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 0442 0435 043a 0441 0442 ( \" 0443 043d 0438 0432 0435 0440 0441 0438 0442 0435 0442\" , \"#firstHeading\" ) self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 044d 043b 0435 043c 0435 043d 0442 ( 'img[alt*=\" 0413 043b 0430 0432 043d 043e 0435  0437 0434 0430 043d 0438 0435  041c 0413 0423\"]' ) self .  0432 0432 0435 0434 0438 0442 0435 ( \"#searchInput\" , \" 043f 0440 0438 043a 043b 044e 0447 0435 043d 0438 044f  0428 0443 0440 0438 043a 0430\" ) self .  043d 0430 0436 043c 0438 0442 0435 ( \"#searchButton\" ) self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 0442 0435 043a 0441 0442 ( \" 041e 043f 0435 0440 0430 0446 0438 044f  00ab 042b 00bb  0438  0434 0440 0443 0433 0438 0435  043f 0440 0438 043a 043b 044e 0447 0435 043d 0438 044f  0428 0443 0440 0438 043a 0430\" ) self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 044d 043b 0435 043c 0435 043d 0442 ( 'img[alt=\" 041f 043e 0441 0442 0435 0440  0444 0438 043b 044c 043c 0430\"]' ) self .  043d 0430 0437 0430 0434 () self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 043f 0440 0430 0432 0434 0443 ( \" 0443 043d 0438 0432 0435 0440 0441 0438 0442 0435 0442\" in self .  043f 043e 043b 0443 0447 0438 0442 044c_ 0442 0435 043a 0443 0449 0438 0439_URL ()) self .  0432 043f 0435 0440 0435 0434 () self .  043f 043e 0434 0442 0432 0435 0440 0434 0438 0442 044c_ 043f 0440 0430 0432 0434 0443 ( \" 0428 0443 0440 0438 043a 0430\" in self .  043f 043e 043b 0443 0447 0438 0442 044c_ 0442 0435 043a 0443 0449 0438 0439_URL ()) (See examples/translations/russian_test_1.py for the Russian test.) 15. SeleniumBase in Spanish This format is similar to the English version with BaseCase inheritance, but there's a different import statement, and method names have been translated into Spanish. Here's an example of that: from seleniumbase.translate.spanish import CasoDePrueba class MiClaseDePrueba ( CasoDePrueba ): def test_ejemplo_1 ( self ): self . abrir ( \"https://es.wikipedia.org/wiki/\" ) self . verificar_texto ( \"Wikipedia\" ) self . verificar_elemento ( '[title*=\"la p 00e1gina principal\"]' ) self . escriba ( \"#searchInput\" , \"Parc d'Atraccions Tibidabo\" ) self . haga_clic ( \"#searchButton\" ) self . verificar_texto ( \"Tibidabo\" , \"#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Tibidabo\"]' ) self . escriba ( \"#searchInput\" , \"Palma de Mallorca\" ) self . haga_clic ( \"#searchButton\" ) self . verificar_texto ( \"Palma de Mallorca\" , \"#firstHeading\" ) self . verificar_elemento ( 'img[alt*=\"Palma\"]' ) self . volver () self . verificar_verdad ( \"Tibidabo\" in self . obtener_url_actual ()) self . adelante () self . verificar_verdad ( \"Mallorca\" in self . obtener_url_actual ()) (See examples/translations/spanish_test_1.py for the Spanish test.)","title":"Syntax Formats"},{"location":"help_docs/thank_you/","text":"Thank you for choosing SeleniumBase!  00b6 Follow us somewhere:","title":"Thank You"},{"location":"help_docs/thank_you/#thank-you-for-choosing-seleniumbase","text":"Follow us somewhere:","title":"Thank you for choosing SeleniumBase!"},{"location":"help_docs/translations/","text":"Language Tests (Python 3+) SeleniumBase supports the following 10 languages: English , Chinese , Dutch , French , Italian , Japanese , Korean , Portuguese , Russian , and Spanish . Examples can be found in [ SeleniumBase/examples/translations ]. Multi-language tests are run with pytest like any other test. Every test method has a one-to-one mapping to every other supported language. Example: self.open(URL) <=> self. 5f00 542f 7f51 5740(URL) Translation API You can use SeleniumBase to selectively translate the method names of any test from one language to another via the console scripts interface. Additionally, the import line at the top of the Python file will change to import the new BaseCase . Example: BaseCase becomes CasoDeTeste when a test is translated into Portuguese. seleniumbase translate * Usage: seleniumbase translate [ SB_FILE.py ] [ LANGUAGE ] [ ACTION ] * Languages: `` --en `` / `` --English `` | `` --zh `` / `` --Chinese `` `` --nl `` / `` --Dutch `` | `` --fr `` / `` --French `` `` --it `` / `` --Italian `` | `` --ja `` / `` --Japanese `` `` --ko `` / `` --Korean `` | `` --pt `` / `` --Portuguese `` `` --ru `` / `` --Russian `` | `` --es `` / `` --Spanish `` * Actions: `` -p `` / `` --print `` ( Print translation output to the screen ) `` -o `` / `` --overwrite `` ( Overwrite the file being translated ) `` -c `` / `` --copy `` ( Copy the translation to a new `` .py `` file ) * Options: `` -n `` ( include line Numbers when using the Print action ) * Examples: Translate test_1.py into Chinese and only print the output: >>> seleniumbase translate test_1.py --zh -p Translate test_2.py into Portuguese and overwrite the file: >>> seleniumbase translate test_2.py --pt -o Translate test_3.py into Dutch and make a copy of the file: >>> seleniumbase translate test_3.py --nl -c * Output: Translates a SeleniumBase Python file into the language specified. Method calls and `` import `` lines get swapped. Both a language and an action must be specified. The `` -p `` action can be paired with one other action. When running with `` -c `` ( or `` --copy `` ) the new file name will be the original name appended with an underscore plus the 2 -letter language code of the new language. ( Example: Translating `` test_1.py `` into Japanese with `` -c `` will create a new file called `` test_1_ja.py `` . )","title":"Translations"},{"location":"help_docs/using_safari_driver/","text":"Using Safari's WebDriver for running browser tests on macOS  00b6 (NOTE: Safari's WebDriver requires macOS 10.13 \"High Sierra\" or later.) You can find the official Apple documentation regarding \"Testing with WebDriver in Safari\" on the following page: https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari Run safaridriver --enable once in a terminal to enable Safari's WebDriver. (If you 2019re upgrading from a previous macOS release, you may need to prefix the command with sudo .) Now you can use --browser=safari to run your SeleniumBase tests on Safari.","title":"Using Safari Driver"},{"location":"help_docs/using_safari_driver/#using-safaris-webdriver-for-running-browser-tests-on-macos","text":"(NOTE: Safari's WebDriver requires macOS 10.13 \"High Sierra\" or later.) You can find the official Apple documentation regarding \"Testing with WebDriver in Safari\" on the following page: https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari Run safaridriver --enable once in a terminal to enable Safari's WebDriver. (If you 2019re upgrading from a previous macOS release, you may need to prefix the command with sudo .) Now you can use --browser=safari to run your SeleniumBase tests on Safari.","title":"Using Safari's WebDriver for running browser tests on macOS"},{"location":"help_docs/verify_webdriver/","text":"Verifying that web drivers are installed  00b6 You can do this by checking inside a Python command prompt. Verifying ChromeDriver  00b6 python >>> from selenium import webdriver >>> driver = webdriver . Chrome () >>> driver . get ( \"https://www.google.com/chrome\" ) >>> driver . quit () >>> exit () Verifying Geckodriver (Firefox WebDriver)  00b6 python >>> from selenium import webdriver >>> driver = webdriver . Firefox () >>> driver . get ( \"https://www.mozilla.org/firefox\" ) >>> driver . quit () >>> exit () Verifying WebDriver for Safari  00b6 python >>> from selenium import webdriver >>> driver = webdriver . Safari () >>> driver . get ( \"https://www.apple.com/safari\" ) >>> driver . quit () >>> exit ()","title":"Verifying WebDriver"},{"location":"help_docs/verify_webdriver/#verifying-that-web-drivers-are-installed","text":"You can do this by checking inside a Python command prompt.","title":"Verifying that web drivers are installed"},{"location":"help_docs/verify_webdriver/#verifying-chromedriver","text":"python >>> from selenium import webdriver >>> driver = webdriver . Chrome () >>> driver . get ( \"https://www.google.com/chrome\" ) >>> driver . quit () >>> exit ()","title":"Verifying ChromeDriver"},{"location":"help_docs/verify_webdriver/#verifying-geckodriver-firefox-webdriver","text":"python >>> from selenium import webdriver >>> driver = webdriver . Firefox () >>> driver . get ( \"https://www.mozilla.org/firefox\" ) >>> driver . quit () >>> exit ()","title":"Verifying Geckodriver (Firefox WebDriver)"},{"location":"help_docs/verify_webdriver/#verifying-webdriver-for-safari","text":"python >>> from selenium import webdriver >>> driver = webdriver . Safari () >>> driver . get ( \"https://www.apple.com/safari\" ) >>> driver . quit () >>> exit ()","title":"Verifying WebDriver for Safari"},{"location":"help_docs/virtualenv_instructions/","text":"Virtual Environment Tutorial There are multiple ways of creating a Python virtual environment . This tutorial covers two of those: The venv command ( included with Python 3+ ). The virtualenvwrapper mkvirtualenv command. venv creates virtual environments in the location where run ( generally with Python projects ). mkvirtualenv creates virtual environments in one place ( generally in your home directory ). (The Python Software Foundation recommends venv for creating virtual environments.) Part 1: Using \"venv\" macOS/Linux terminal ( python3 -m venv ENV ) python3 -m venv sbase_env source sbase_env/bin/activate Windows CMD prompt ( py -m venv ENV ): py -m venv sbase_env call sbase_env \\\\ Scripts \\\\ activate To exit a virtual env, type deactivate . Part 2: Using virtualenvwrapper macOS/Linux terminal: python3 -m pip install virtualenvwrapper --force-reinstall export WORKON_HOME = $HOME /.virtualenvs source ` which virtualenvwrapper.sh ` ( Shortcut : Run source virtualenv_install.sh from the top-level SeleniumBase folder to perform the above steps.) (If you add source `which virtualenvwrapper.sh` to your local bash file ( ~/.bash_profile on macOS, or ~/.bashrc on Linux), virtualenvwrapper commands such as mkvirtualenv will be available whenever you open a new command prompt.) Windows CMD prompt: py -m pip install virtualenvwrapper-win --force-reinstall --user ( Shortcut : Run win_virtualenv.bat from the top-level SeleniumBase folder to perform the above step.) Create a virtual environment: mkvirtualenv ENV : mkvirtualenv sbase_env (If you have multiple versions of Python installed on your machine, and you want your virtual environment to use a specific Python version, add --python=PATH_TO_PYTHON_EXE to your mkvirtualenv command with the Python executable to use.) virtualenvwrapper commands: Creating a virtual environment: mkvirtualenv sbase_env Leaving your virtual environment: deactivate Returning to a virtual environment: workon sbase_env Listing all virtual environments: workon Deleting a virtual environment: rmvirtualenv sbase_env python-guide.org/en/latest/dev/virtualenvs has more information about Python virtual environments. For specific details about VirtualEnv and VirtualEnvWrapper, see http://virtualenv.readthedocs.org/en/latest/ and http://virtualenvwrapper.readthedocs.org/en/latest/ .","title":"Virtualenv Instructions"},{"location":"help_docs/webdriver_installation/","text":"Installing webdrivers To run web automation, you'll need webdrivers for each browser you plan on using. Here are some commands that'll automatically download the driver you need into the SeleniumBase drivers folder once you've installed SeleniumBase: sbase install chromedriver sbase install geckodriver sbase install edgedriver sbase install iedriver sbase install operadriver If you have the latest version of Chrome installed, get the latest chromedriver ( otherwise it defaults to chromedriver 2.44 for compatibility reasons ): sbase install chromedriver latest You can also install a specific version of chromedriver for a specific version of Chrome: sbase install chromedriver 88 .0.4324.96 sbase install chromedriver 88 If you plan on using the Selenium Grid integration (which allows for remote webdriver), you'll need to put the drivers on your System PATH. On macOS and Linux, /usr/local/bin is a good PATH spot. On Windows, you may need to set the System PATH under Environment Variables to include the location where you placed the driver files. As a shortcut, you could place the driver files into your Python Scripts/ folder in the location where you have Python installed, which should already be on your System PATH. Here's where you can go to manually install web drivers from the source: For Chrome, get Chromedriver on your System PATH. For Firefox, get Geckodriver on your System PATH. For Microsoft Edge, get Edge Driver (Microsoft WebDriver) on your System PATH. For Safari, get Safari Driver on your System PATH. For Opera, get Opera Chromium Driver on your System PATH.. For PhantomJS headless browser automation, get PhantomJS on your System PATH. (NOTE: PhantomJS is no longer officially supported by SeleniumHQ ) macOS shortcuts : You can also install drivers by using brew (aka homebrew ), but you'll need to install that first. Brew installation instructions are here . brew cask install chromedriver brew install geckodriver You can also upgrade existing webdrivers: brew cask upgrade chromedriver brew upgrade geckodriver Linux shortcuts : If you still need the web drivers, here are some scripts to help you install chromedriver and geckodriver on a Linux machine: wget http://chromedriver.storage.googleapis.com/2.44/chromedriver_linux64.zip unzip chromedriver_linux64.zip mv chromedriver /usr/local/bin/ chmod +x /usr/local/bin/chromedriver wget https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gz tar xvfz geckodriver-v0.26.0-linux64.tar.gz mv geckodriver /usr/local/bin/ chmod +x /usr/local/bin/geckodriver If you wish to verify that web drivers are working, follow these instructions .","title":"WebDriver Installation"},{"location":"integrations/azure/jenkins/ReadMe/","text":"Building a browser-based test automation server with Jenkins on Azure by using SeleniumBase  00b6 Step 0. Fork the SeleniumBase repo on GitHub to get started quickly.  00b6 (You'll be using your own repository eventually.) Step 1. Find Jenkins in the Azure Marketplace  00b6 Search for \"Jenkins\" in the Azure Marketplace and select the Jenkins (Publisher: Microsoft) result to get to the Jenkins Start page.  00b6 Step 2. Launch a Jenkins instance  00b6 Click \"Create\" and follow the steps...  00b6 Continue to \"Additional Settings\" when you're done with \"Basics\".  00b6 On the \"Additional Settings\" section, set the Size to \"B2s\":  00b6 Once you've reached Step 5, click \"Create\" to complete the setup.  00b6 Step 3. Inspect your new Jenkins instance to SSH into the new machine  00b6 Once your new Jenkins instance has finished launching, you should be able to see the main page  00b6 On the main page, you should be able to find the Public IP Address.  00b6 Use that IP Address to SSH into the machine: ssh USERNAME@IP_ADDRESS Step 4. Clone the SeleniumBase repository from the root (\"/\") directory.  00b6 cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git Step 5. Enter the \"linux\" folder  00b6 cd SeleniumBase/integrations/linux/ Step 6. Give the \"jenkins\" user sudo access (See jenkins_permissions.sh for details)  00b6 ./jenkins_permissions.sh Step 7. Become the \"jenkins\" user and enter a \"bash\" shell  00b6 sudo su jenkins bash Step 8. Install dependencies (See Linuxfile.sh for details)  00b6 ./Linuxfile.sh Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)  00b6 ./Xvfb_launcher.sh Step 10. Go to the SeleniumBase directory  00b6 cd /SeleniumBase Step 11. Install the requirements for SeleniumBase  00b6 sudo pip install -r requirements.txt --upgrade Step 12. Install SeleniumBase (Make sure you already installed the requirements above)  00b6 sudo python setup.py develop Step 13. Install chromedriver  00b6 sudo seleniumbase install chromedriver Step 14. Run an example test in Chrome to verify installation (May take up to 10 seconds)  00b6 pytest examples/my_first_test.py --headless --browser = chrome Step 15. Secure your Jenkins machine  00b6 Navigate to http://JENKINS_IP_ADDRESS/jenkins-on-azure/  00b6 (Depending on your version of Jenkins, you may see the following screen, or nothing at all.) Initially, Jenkins uses only http , which makes it less secure.  00b6 You'll need to set up SSH Port Forwarding in order to secure it.  00b6 To do this, copy/paste the string and run it in a NEW command prompt on your local machine (NOT from an SSH terminal session), swapping out the username and DNS name with the ones you set up when creating the Jenkins instance in Azure. ssh -L 127.0.0.1:8080:localhost:8080 USERNAME@DNS_NAME Step 16. Login to Jenkins  00b6 If you've correctly set up SSH Port Forwarding, the url will be http://127.0.0.1:8080/  00b6 You'll need to get the password from the SSH terminal on the Linux machine to log in  00b6 sudo cat /var/lib/jenkins/secrets/initialAdminPassword Step 17. Customize Jenkins  00b6 Step 18. Create an Admin user  00b6 Once Jenkins has finished loading, the top left of the page should look like this  00b6 Step 19. Create a new Jenkins job  00b6 Click on \"New Item\" Give your new Jenkins job a name (ex: \"Test1\") Select \"Freestyle project\" Click \"OK\" Step 20. Setup your new Jenkins job  00b6 Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown. Select \"Execute shell\". For the \"Command\", paste: cd examples pytest my_first_test.py --headless Click \"Save\" when you're done.  00b6 You'll see the following page after that: Step 21. Run your new Jenkins job  00b6 Click on \"Build Now\" (If everything was done correctly, you'll see a blue dot appear after a few seconds, indicating that the test job passed.) Step 22. See the top Jenkins page for an overview of all jobs  00b6 Step 23. Future Work  00b6 If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". Congratulations! You're now well on your way to becoming a build & release / automation engineer!  00b6","title":"Jenkins on Azure"},{"location":"integrations/azure/jenkins/ReadMe/#building-a-browser-based-test-automation-server-with-jenkins-on-azure-by-using-seleniumbase","text":"","title":"Building a browser-based test automation server with Jenkins on Azure by using SeleniumBase"},{"location":"integrations/azure/jenkins/ReadMe/#step-0-fork-the-seleniumbase-repo-on-github-to-get-started-quickly","text":"(You'll be using your own repository eventually.)","title":"Step 0. Fork the SeleniumBase repo on GitHub to get started quickly."},{"location":"integrations/azure/jenkins/ReadMe/#step-1-find-jenkins-in-the-azure-marketplace","text":"","title":"Step 1. Find Jenkins in the Azure Marketplace"},{"location":"integrations/azure/jenkins/ReadMe/#search-for-jenkins-in-the-azure-marketplace-and-select-the-jenkins-publisher-microsoft-result-to-get-to-the-jenkins-start-page","text":"","title":"Search for \"Jenkins\" in the Azure Marketplace and select the Jenkins (Publisher: Microsoft) result to get to the Jenkins Start page."},{"location":"integrations/azure/jenkins/ReadMe/#step-2-launch-a-jenkins-instance","text":"","title":"Step 2. Launch a Jenkins instance"},{"location":"integrations/azure/jenkins/ReadMe/#click-create-and-follow-the-steps","text":"","title":"Click \"Create\" and follow the steps..."},{"location":"integrations/azure/jenkins/ReadMe/#continue-to-additional-settings-when-youre-done-with-basics","text":"","title":"Continue to \"Additional Settings\" when you're done with \"Basics\"."},{"location":"integrations/azure/jenkins/ReadMe/#on-the-additional-settings-section-set-the-size-to-b2s","text":"","title":"On the \"Additional Settings\" section, set the Size to \"B2s\":"},{"location":"integrations/azure/jenkins/ReadMe/#once-youve-reached-step-5-click-create-to-complete-the-setup","text":"","title":"Once you've reached Step 5, click \"Create\" to complete the setup."},{"location":"integrations/azure/jenkins/ReadMe/#step-3-inspect-your-new-jenkins-instance-to-ssh-into-the-new-machine","text":"","title":"Step 3. Inspect your new Jenkins instance to SSH into the new machine"},{"location":"integrations/azure/jenkins/ReadMe/#once-your-new-jenkins-instance-has-finished-launching-you-should-be-able-to-see-the-main-page","text":"","title":"Once your new Jenkins instance has finished launching, you should be able to see the main page"},{"location":"integrations/azure/jenkins/ReadMe/#on-the-main-page-you-should-be-able-to-find-the-public-ip-address","text":"Use that IP Address to SSH into the machine: ssh USERNAME@IP_ADDRESS","title":"On the main page, you should be able to find the Public IP Address."},{"location":"integrations/azure/jenkins/ReadMe/#step-4-clone-the-seleniumbase-repository-from-the-root-directory","text":"cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git","title":"Step 4. Clone the SeleniumBase repository from the root (\"/\") directory."},{"location":"integrations/azure/jenkins/ReadMe/#step-5-enter-the-linux-folder","text":"cd SeleniumBase/integrations/linux/","title":"Step 5. Enter the \"linux\" folder"},{"location":"integrations/azure/jenkins/ReadMe/#step-6-give-the-jenkins-user-sudo-access-see-jenkins_permissionssh-for-details","text":"./jenkins_permissions.sh","title":"Step 6. Give the \"jenkins\" user sudo access (See jenkins_permissions.sh for details)"},{"location":"integrations/azure/jenkins/ReadMe/#step-7-become-the-jenkins-user-and-enter-a-bash-shell","text":"sudo su jenkins bash","title":"Step 7. Become the \"jenkins\" user and enter a \"bash\" shell"},{"location":"integrations/azure/jenkins/ReadMe/#step-8-install-dependencies-see-linuxfilesh-for-details","text":"./Linuxfile.sh","title":"Step 8. Install dependencies (See Linuxfile.sh for details)"},{"location":"integrations/azure/jenkins/ReadMe/#step-9-start-up-the-headless-browser-display-mechanism-xvfb-see-xvfb_launchersh-for-details","text":"./Xvfb_launcher.sh","title":"Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)"},{"location":"integrations/azure/jenkins/ReadMe/#step-10-go-to-the-seleniumbase-directory","text":"cd /SeleniumBase","title":"Step 10. Go to the SeleniumBase directory"},{"location":"integrations/azure/jenkins/ReadMe/#step-11-install-the-requirements-for-seleniumbase","text":"sudo pip install -r requirements.txt --upgrade","title":"Step 11. Install the requirements for SeleniumBase"},{"location":"integrations/azure/jenkins/ReadMe/#step-12-install-seleniumbase-make-sure-you-already-installed-the-requirements-above","text":"sudo python setup.py develop","title":"Step 12. Install SeleniumBase (Make sure you already installed the requirements above)"},{"location":"integrations/azure/jenkins/ReadMe/#step-13-install-chromedriver","text":"sudo seleniumbase install chromedriver","title":"Step 13. Install chromedriver"},{"location":"integrations/azure/jenkins/ReadMe/#step-14-run-an-example-test-in-chrome-to-verify-installation-may-take-up-to-10-seconds","text":"pytest examples/my_first_test.py --headless --browser = chrome","title":"Step 14. Run an example test in Chrome to verify installation (May take up to 10 seconds)"},{"location":"integrations/azure/jenkins/ReadMe/#step-15-secure-your-jenkins-machine","text":"","title":"Step 15. Secure your Jenkins machine"},{"location":"integrations/azure/jenkins/ReadMe/#navigate-to-httpjenkins_ip_addressjenkins-on-azure","text":"(Depending on your version of Jenkins, you may see the following screen, or nothing at all.)","title":"Navigate to http://JENKINS_IP_ADDRESS/jenkins-on-azure/"},{"location":"integrations/azure/jenkins/ReadMe/#initially-jenkins-uses-only-http-which-makes-it-less-secure","text":"","title":"Initially, Jenkins uses only http, which makes it less secure."},{"location":"integrations/azure/jenkins/ReadMe/#youll-need-to-set-up-ssh-port-forwarding-in-order-to-secure-it","text":"To do this, copy/paste the string and run it in a NEW command prompt on your local machine (NOT from an SSH terminal session), swapping out the username and DNS name with the ones you set up when creating the Jenkins instance in Azure. ssh -L 127.0.0.1:8080:localhost:8080 USERNAME@DNS_NAME","title":"You'll need to set up SSH Port Forwarding in order to secure it."},{"location":"integrations/azure/jenkins/ReadMe/#step-16-login-to-jenkins","text":"","title":"Step 16. Login to Jenkins"},{"location":"integrations/azure/jenkins/ReadMe/#if-youve-correctly-set-up-ssh-port-forwarding-the-url-will-be-http1270018080","text":"","title":"If you've correctly set up SSH Port Forwarding, the url will be http://127.0.0.1:8080/"},{"location":"integrations/azure/jenkins/ReadMe/#youll-need-to-get-the-password-from-the-ssh-terminal-on-the-linux-machine-to-log-in","text":"sudo cat /var/lib/jenkins/secrets/initialAdminPassword","title":"You'll need to get the password from the SSH terminal on the Linux machine to log in"},{"location":"integrations/azure/jenkins/ReadMe/#step-17-customize-jenkins","text":"","title":"Step 17. Customize Jenkins"},{"location":"integrations/azure/jenkins/ReadMe/#step-18-create-an-admin-user","text":"","title":"Step 18. Create an Admin user"},{"location":"integrations/azure/jenkins/ReadMe/#once-jenkins-has-finished-loading-the-top-left-of-the-page-should-look-like-this","text":"","title":"Once Jenkins has finished loading, the top left of the page should look like this"},{"location":"integrations/azure/jenkins/ReadMe/#step-19-create-a-new-jenkins-job","text":"Click on \"New Item\" Give your new Jenkins job a name (ex: \"Test1\") Select \"Freestyle project\" Click \"OK\"","title":"Step 19. Create a new Jenkins job"},{"location":"integrations/azure/jenkins/ReadMe/#step-20-setup-your-new-jenkins-job","text":"Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown. Select \"Execute shell\". For the \"Command\", paste: cd examples pytest my_first_test.py --headless","title":"Step 20. Setup your new Jenkins job"},{"location":"integrations/azure/jenkins/ReadMe/#click-save-when-youre-done","text":"You'll see the following page after that:","title":"Click \"Save\" when you're done."},{"location":"integrations/azure/jenkins/ReadMe/#step-21-run-your-new-jenkins-job","text":"Click on \"Build Now\" (If everything was done correctly, you'll see a blue dot appear after a few seconds, indicating that the test job passed.)","title":"Step 21. Run your new Jenkins job"},{"location":"integrations/azure/jenkins/ReadMe/#step-22-see-the-top-jenkins-page-for-an-overview-of-all-jobs","text":"","title":"Step 22. See the top Jenkins page for an overview of all jobs"},{"location":"integrations/azure/jenkins/ReadMe/#step-23-future-work","text":"If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\".","title":"Step 23. Future Work"},{"location":"integrations/azure/jenkins/ReadMe/#congratulations-youre-now-well-on-your-way-to-becoming-a-build-release-automation-engineer","text":"","title":"Congratulations! You're now well on your way to becoming a build &amp; release / automation engineer!"},{"location":"integrations/docker/ReadMe/","text":"Docker setup instructions for SeleniumBase  00b6 1. Install the Docker Toolbox  00b6 You can get that from here: https://www.docker.com/products/docker-toolbox You might also want to install the Docker Engine: https://docs.docker.com/engine/installation/ 2. Create your SeleniumBase Docker environment  00b6 docker-machine create --driver virtualbox seleniumbase (If your Docker environment ever goes down for any reason, you can bring it back up with a restart.)  00b6 docker-machine restart seleniumbase 3. Configure your shell  00b6 eval \"$(docker-machine env seleniumbase)\" 4. Go to the SeleniumBase home directory on the command line, which is where Dockerfile is located. (This assumes you've already cloned the SeleniumBase repo.)  00b6 5. Create your Docker image from your Dockerfile: (Get ready to wait awhile)  00b6 docker build -t seleniumbase . 6. Run the example test with Chrome inside your Docker: (Once the test completes after a few seconds, you'll automatically exit the Docker shell)  00b6 docker run seleniumbase ./run_docker_test_in_chrome.sh 7. Now run the same test with Firefox inside your Docker  00b6 docker run seleniumbase ./run_docker_test_in_firefox.sh 8. You can also enter Docker and stay inside the shell  00b6 docker run -i -t seleniumbase 9. Now you can run the example test from inside the Docker shell  00b6 ./run_docker_test_in_chrome.sh 10. When you're satisfied, you may exit the Docker shell  00b6 exit 11. (Optional) Since Docker images and containers take up a lot of space, you may want to clean up your machine from time to time when they 2019re not being used  00b6 Details on that can be found here: http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers Here are a few of those cleanup commands: docker container prune docker system prune docker images | grep \"<none>\" | awk '{print $3}' | xargs docker rmi docker rm 'docker ps --no-trunc -aq' If you want to completely remove all of your Docker containers and images, use these commands: (If there's nothing to delete, those commands will return an error.) docker rm -f $(docker ps -a -q) docker rmi -f $(docker images -q) Finally, if you want to wipe out your SeleniumBase Docker virtualbox, use these commands: docker-machine kill seleniumbase docker-machine rm seleniumbase For more cleanup commands, check out: https://codefresh.io/blog/everyday-hacks-docker/ 13. (Optional) More reading on Docker can be found here  00b6 https://docs.docker.com https://docs.docker.com/get-started/ https://docs.docker.com/docker-for-mac/","title":"Docker Start Guide"},{"location":"integrations/docker/ReadMe/#docker-setup-instructions-for-seleniumbase","text":"","title":"Docker setup instructions for SeleniumBase"},{"location":"integrations/docker/ReadMe/#1-install-the-docker-toolbox","text":"You can get that from here: https://www.docker.com/products/docker-toolbox You might also want to install the Docker Engine: https://docs.docker.com/engine/installation/","title":"1. Install the Docker Toolbox"},{"location":"integrations/docker/ReadMe/#2-create-your-seleniumbase-docker-environment","text":"docker-machine create --driver virtualbox seleniumbase","title":"2. Create your SeleniumBase Docker environment"},{"location":"integrations/docker/ReadMe/#if-your-docker-environment-ever-goes-down-for-any-reason-you-can-bring-it-back-up-with-a-restart","text":"docker-machine restart seleniumbase","title":"(If your Docker environment ever goes down for any reason, you can bring it back up with a restart.)"},{"location":"integrations/docker/ReadMe/#3-configure-your-shell","text":"eval \"$(docker-machine env seleniumbase)\"","title":"3. Configure your shell"},{"location":"integrations/docker/ReadMe/#4-go-to-the-seleniumbase-home-directory-on-the-command-line-which-is-where-dockerfile-is-located-this-assumes-youve-already-cloned-the-seleniumbase-repo","text":"","title":"4. Go to the SeleniumBase home directory on the command line, which is where Dockerfile is located. (This assumes you've already cloned the SeleniumBase repo.)"},{"location":"integrations/docker/ReadMe/#5-create-your-docker-image-from-your-dockerfile-get-ready-to-wait-awhile","text":"docker build -t seleniumbase .","title":"5. Create your Docker image from your Dockerfile: (Get ready to wait awhile)"},{"location":"integrations/docker/ReadMe/#6-run-the-example-test-with-chrome-inside-your-docker-once-the-test-completes-after-a-few-seconds-youll-automatically-exit-the-docker-shell","text":"docker run seleniumbase ./run_docker_test_in_chrome.sh","title":"6. Run the example test with Chrome inside your Docker: (Once the test completes after a few seconds, you'll automatically exit the Docker shell)"},{"location":"integrations/docker/ReadMe/#7-now-run-the-same-test-with-firefox-inside-your-docker","text":"docker run seleniumbase ./run_docker_test_in_firefox.sh","title":"7. Now run the same test with Firefox inside your Docker"},{"location":"integrations/docker/ReadMe/#8-you-can-also-enter-docker-and-stay-inside-the-shell","text":"docker run -i -t seleniumbase","title":"8. You can also enter Docker and stay inside the shell"},{"location":"integrations/docker/ReadMe/#9-now-you-can-run-the-example-test-from-inside-the-docker-shell","text":"./run_docker_test_in_chrome.sh","title":"9. Now you can run the example test from inside the Docker shell"},{"location":"integrations/docker/ReadMe/#10-when-youre-satisfied-you-may-exit-the-docker-shell","text":"exit","title":"10. When you're satisfied, you may exit the Docker shell"},{"location":"integrations/docker/ReadMe/#11-optional-since-docker-images-and-containers-take-up-a-lot-of-space-you-may-want-to-clean-up-your-machine-from-time-to-time-when-theyre-not-being-used","text":"Details on that can be found here: http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers Here are a few of those cleanup commands: docker container prune docker system prune docker images | grep \"<none>\" | awk '{print $3}' | xargs docker rmi docker rm 'docker ps --no-trunc -aq' If you want to completely remove all of your Docker containers and images, use these commands: (If there's nothing to delete, those commands will return an error.) docker rm -f $(docker ps -a -q) docker rmi -f $(docker images -q) Finally, if you want to wipe out your SeleniumBase Docker virtualbox, use these commands: docker-machine kill seleniumbase docker-machine rm seleniumbase For more cleanup commands, check out: https://codefresh.io/blog/everyday-hacks-docker/","title":"11. (Optional) Since Docker images and containers take up a lot of space, you may want to clean up your machine from time to time when they 2019re not being used"},{"location":"integrations/docker/ReadMe/#13-optional-more-reading-on-docker-can-be-found-here","text":"https://docs.docker.com https://docs.docker.com/get-started/ https://docs.docker.com/docker-for-mac/","title":"13. (Optional) More reading on Docker can be found here"},{"location":"integrations/github/workflows/ReadMe/","text":"Running browser tests from GitHub Actions/Workflows with SeleniumBase  00b6 Step 0. Create a fork of SeleniumBase on GitHub to help you get started.  00b6 (You'll be using your own repo eventually.) Step 1. From the GitHub Actions tab, choose to set up a Python package Workflow.  00b6 Step 2. Add your workflow .yml script.  00b6 (If using a SeleniumBase fork, the script from https://github.com/seleniumbase/SeleniumBase/blob/master/.github/workflows/python-package.yml already exists to help guide you.) Step 3. Commit your changes to GitHub.  00b6 Step 4. Your tests will now run on every pull request and on every commit to the master branch.  00b6 (See https://github.com/seleniumbase/SeleniumBase/actions for the SeleniumBase example.) (You can click inside each build for more details.) (You can also see the specific steps being performed by each command.) (You'll notice that web browsers such as Chrome and Firefox get installed for tests to use. SeleniumBase uses pytest for running tests while using Selenium to interact with web browsers.) Congratulations! You now know how to create and run browser tests with GitHub Actions/Workflows!  00b6 Study SeleniumBase to learn more!  00b6","title":"GitHub CI"},{"location":"integrations/github/workflows/ReadMe/#running-browser-tests-from-github-actionsworkflows-with-seleniumbase","text":"","title":"Running browser tests from GitHub Actions/Workflows with SeleniumBase"},{"location":"integrations/github/workflows/ReadMe/#step-0-create-a-fork-of-seleniumbase-on-github-to-help-you-get-started","text":"(You'll be using your own repo eventually.)","title":"Step 0. Create a fork of SeleniumBase on GitHub to help you get started."},{"location":"integrations/github/workflows/ReadMe/#step-1-from-the-github-actions-tab-choose-to-set-up-a-python-package-workflow","text":"","title":"Step 1. From the GitHub Actions tab, choose to set up a Python package Workflow."},{"location":"integrations/github/workflows/ReadMe/#step-2-add-your-workflow-yml-script","text":"(If using a SeleniumBase fork, the script from https://github.com/seleniumbase/SeleniumBase/blob/master/.github/workflows/python-package.yml already exists to help guide you.)","title":"Step 2. Add your workflow .yml script."},{"location":"integrations/github/workflows/ReadMe/#step-3-commit-your-changes-to-github","text":"","title":"Step 3. Commit your changes to GitHub."},{"location":"integrations/github/workflows/ReadMe/#step-4-your-tests-will-now-run-on-every-pull-request-and-on-every-commit-to-the-master-branch","text":"(See https://github.com/seleniumbase/SeleniumBase/actions for the SeleniumBase example.) (You can click inside each build for more details.) (You can also see the specific steps being performed by each command.) (You'll notice that web browsers such as Chrome and Firefox get installed for tests to use. SeleniumBase uses pytest for running tests while using Selenium to interact with web browsers.)","title":"Step 4. Your tests will now run on every pull request and on every commit to the master branch."},{"location":"integrations/github/workflows/ReadMe/#congratulations-you-now-know-how-to-create-and-run-browser-tests-with-github-actionsworkflows","text":"","title":"Congratulations! You now know how to create and run browser tests with GitHub Actions/Workflows!"},{"location":"integrations/github/workflows/ReadMe/#study-seleniumbase-to-learn-more","text":"","title":"Study SeleniumBase to learn more!"},{"location":"integrations/google_cloud/ReadMe/","text":"Building a browser-based test automation server on the Google Cloud Platform by using SeleniumBase  00b6 (This tutorial, from a previous Google Cloud Meetup , will teach you how to setup a Linux server for running automated browser tests. The cost of running this server is about $13.61/month on Google Cloud (enough to handle 5 parallel tests ). This is less expensive than using other platforms such as BrowserStack or Sauce Labs .) ( Here's a quick video recap on YouTube: ) Step 1. Open the Google Cloud Platform Cloud Launcher  00b6 Navigate to https://console.cloud.google.com/launcher (If you already have an active Google Cloud project, the Google Cloud Launcher will probably default to using that. If you don't, sign up for the free trial of Google Cloud Platform here to get started.) Step 2. Launch a Jenkins instance  00b6 Under \"Cloud Launcher\", Click on \"Jenkins Certified by Bitnami\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\" Step 3. Connect with your new Jenkins instance  00b6 SSH into your new instance by selecting: \"SSH\" => \"Open in browser window\" from the instance page. Step 4. Clone the SeleniumBase repository from the root (\"/\") directory.  00b6 cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git Step 5. Enter the \"linux\" folder  00b6 cd SeleniumBase/integrations/linux/ Step 6. Give Jenkins (aka \"tomcat\" user) sudo access (See tomcat_permissions.sh for details)  00b6 ./tomcat_permissions.sh Step 7. Become \"tomcat\" (the Jenkins user) and enter a \"bash\" shell  00b6 sudo su tomcat bash Step 8. Install dependencies (See Linuxfile.sh for details)  00b6 ./Linuxfile.sh Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)  00b6 ./Xvfb_launcher.sh Step 10. Go to the SeleniumBase directory  00b6 cd /SeleniumBase Step 11. Install the requirements for SeleniumBase  00b6 sudo pip install -r requirements.txt --upgrade Step 12. Install SeleniumBase  00b6 sudo python setup.py develop Step 13. Run an example test on Chrome to verify installation (May take up to 10 seconds)  00b6 pytest examples/my_first_test.py --headless Step 14. If you like nosetests better than pytest, that works too  00b6 nosetests examples/my_first_test.py --headless Step 15. You can also verify that the example test runs on Firefox  00b6 nosetests examples/my_first_test.py --headless --browser = firefox Step 16. Login to Jenkins  00b6 (The url, as well as username and password, should be accessible from your Google Cloud Platform VM instance page.) Step 17. Create a new Jenkins job  00b6 Click on \"New Item\" Give your new Jenkins job a name (ex: \"My_First_Test\") Select \"Freestyle project\" Click \"OK\" Step 18. Setup your new Jenkins job  00b6 Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown and then select \"Execute shell\". For the \"Command\", put: pytest examples/my_first_test.py --headless Click \"Save\" when you're done. Step 19. Run your new Jenkins job  00b6 Click on \"Build Now\" (If all the setup was done correctly, you should see a blue dot appear after a few seconds, indicating that the test job passed.) Step 20. Future Work  00b6 If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". You can also use MySQL to save test results in the DB so that you can query the data at any time. Congratulations! You're now well on your way to becoming a build & release / automation engineer!  00b6 MySQL DB setup instructions  00b6 Step 21. Return to the Google Cloud Launcher and launch a MySQL Instance  00b6 Under \"Featured Solutions\", Click on \"MySQL\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\" Step 22. Get the Connection credentials for your new MySQL Instance  00b6 Under the Google Cloud Platform menu, go to \"Compute Engine\" Find your new MySQL instance and then write down the value written in the \"External IP\" section. Under the Google Cloud Platform menu, go to \"Deployment Manager\" Find your new MySQL instance and then click on it. Write down the values for Admin username and password. (Username should be \"root\") Step 23. Get a MySQL GUI tool so that you can connect to your MySQL Instance  00b6 You can download MySQL Workbench for this. Step 24. Create a new connection to your MySQL Instance  00b6 Use the MySQL DB credentials that you saved in Step 21 for this. Step 25. Create a new database/schema in your MySQL Instance  00b6 You can name your database/schema test_db . Step 26. Create the necessary tables in your MySQL database/schema  00b6 Run the create_db_tables.sql script in your MySQL database/schema to create all the required DB tables. Step 27. Have your local clone of SeleniumBase connect to your MySQL DB Instance  00b6 Update the MySQL connection details in your settings.py file to use the credentials that you saved in Step 21. Step 28. Have your SeleniumBase Jenkins jobs use your MySQL DB Instance  00b6 For the \"Execute shell\", use the following as your updated \"Command\": pytest examples/test_suite.py --headless --with-db_reporting Click \"Save\" when you're done. Step 29. Run your new Jenkins job  00b6 Click on \"Build Now\" If all goes well, you should be seeing new rows appear in your MySQL DB tables. Step 30. Congratulations! You've successfully completed this tutorial!  00b6","title":"Jenkins on Google Cloud"},{"location":"integrations/google_cloud/ReadMe/#building-a-browser-based-test-automation-server-on-the-google-cloud-platform-by-using-seleniumbase","text":"(This tutorial, from a previous Google Cloud Meetup , will teach you how to setup a Linux server for running automated browser tests. The cost of running this server is about $13.61/month on Google Cloud (enough to handle 5 parallel tests ). This is less expensive than using other platforms such as BrowserStack or Sauce Labs .) ( Here's a quick video recap on YouTube: )","title":"Building a browser-based test automation server on the Google Cloud Platform by using SeleniumBase"},{"location":"integrations/google_cloud/ReadMe/#step-1-open-the-google-cloud-platform-cloud-launcher","text":"Navigate to https://console.cloud.google.com/launcher (If you already have an active Google Cloud project, the Google Cloud Launcher will probably default to using that. If you don't, sign up for the free trial of Google Cloud Platform here to get started.)","title":"Step 1. Open the Google Cloud Platform Cloud Launcher"},{"location":"integrations/google_cloud/ReadMe/#step-2-launch-a-jenkins-instance","text":"Under \"Cloud Launcher\", Click on \"Jenkins Certified by Bitnami\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\"","title":"Step 2. Launch a Jenkins instance"},{"location":"integrations/google_cloud/ReadMe/#step-3-connect-with-your-new-jenkins-instance","text":"SSH into your new instance by selecting: \"SSH\" => \"Open in browser window\" from the instance page.","title":"Step 3. Connect with your new Jenkins instance"},{"location":"integrations/google_cloud/ReadMe/#step-4-clone-the-seleniumbase-repository-from-the-root-directory","text":"cd / sudo git clone https://github.com/seleniumbase/SeleniumBase.git","title":"Step 4. Clone the SeleniumBase repository from the root (\"/\") directory."},{"location":"integrations/google_cloud/ReadMe/#step-5-enter-the-linux-folder","text":"cd SeleniumBase/integrations/linux/","title":"Step 5. Enter the \"linux\" folder"},{"location":"integrations/google_cloud/ReadMe/#step-6-give-jenkins-aka-tomcat-user-sudo-access-see-tomcat_permissionssh-for-details","text":"./tomcat_permissions.sh","title":"Step 6. Give Jenkins (aka \"tomcat\" user) sudo access (See tomcat_permissions.sh for details)"},{"location":"integrations/google_cloud/ReadMe/#step-7-become-tomcat-the-jenkins-user-and-enter-a-bash-shell","text":"sudo su tomcat bash","title":"Step 7. Become \"tomcat\" (the Jenkins user) and enter a \"bash\" shell"},{"location":"integrations/google_cloud/ReadMe/#step-8-install-dependencies-see-linuxfilesh-for-details","text":"./Linuxfile.sh","title":"Step 8. Install dependencies (See Linuxfile.sh for details)"},{"location":"integrations/google_cloud/ReadMe/#step-9-start-up-the-headless-browser-display-mechanism-xvfb-see-xvfb_launchersh-for-details","text":"./Xvfb_launcher.sh","title":"Step 9. Start up the headless browser display mechanism: Xvfb (See Xvfb_launcher.sh for details)"},{"location":"integrations/google_cloud/ReadMe/#step-10-go-to-the-seleniumbase-directory","text":"cd /SeleniumBase","title":"Step 10. Go to the SeleniumBase directory"},{"location":"integrations/google_cloud/ReadMe/#step-11-install-the-requirements-for-seleniumbase","text":"sudo pip install -r requirements.txt --upgrade","title":"Step 11. Install the requirements for SeleniumBase"},{"location":"integrations/google_cloud/ReadMe/#step-12-install-seleniumbase","text":"sudo python setup.py develop","title":"Step 12. Install SeleniumBase"},{"location":"integrations/google_cloud/ReadMe/#step-13-run-an-example-test-on-chrome-to-verify-installation-may-take-up-to-10-seconds","text":"pytest examples/my_first_test.py --headless","title":"Step 13. Run an example test on Chrome to verify installation (May take up to 10 seconds)"},{"location":"integrations/google_cloud/ReadMe/#step-14-if-you-like-nosetests-better-than-pytest-that-works-too","text":"nosetests examples/my_first_test.py --headless","title":"Step 14. If you like nosetests better than pytest, that works too"},{"location":"integrations/google_cloud/ReadMe/#step-15-you-can-also-verify-that-the-example-test-runs-on-firefox","text":"nosetests examples/my_first_test.py --headless --browser = firefox","title":"Step 15. You can also verify that the example test runs on Firefox"},{"location":"integrations/google_cloud/ReadMe/#step-16-login-to-jenkins","text":"(The url, as well as username and password, should be accessible from your Google Cloud Platform VM instance page.)","title":"Step 16. Login to Jenkins"},{"location":"integrations/google_cloud/ReadMe/#step-17-create-a-new-jenkins-job","text":"Click on \"New Item\" Give your new Jenkins job a name (ex: \"My_First_Test\") Select \"Freestyle project\" Click \"OK\"","title":"Step 17. Create a new Jenkins job"},{"location":"integrations/google_cloud/ReadMe/#step-18-setup-your-new-jenkins-job","text":"Under \"Source Code Management\", select \"Git\". For the \"Repository URL\", put: https://github.com/seleniumbase/SeleniumBase.git . (You'll eventually be using your own clone of the repository here.) Under \"Build\", click the \"Add build step\" dropdown and then select \"Execute shell\". For the \"Command\", put: pytest examples/my_first_test.py --headless Click \"Save\" when you're done.","title":"Step 18. Setup your new Jenkins job"},{"location":"integrations/google_cloud/ReadMe/#step-19-run-your-new-jenkins-job","text":"Click on \"Build Now\" (If all the setup was done correctly, you should see a blue dot appear after a few seconds, indicating that the test job passed.)","title":"Step 19. Run your new Jenkins job"},{"location":"integrations/google_cloud/ReadMe/#step-20-future-work","text":"If you have a web application that you want to test, you'll be able to create SeleniumBase tests and add them to Jenkins as you saw here. You may want to create a Deploy job, which downloads the latest version of your repository, and then kicks off all tests to run after that. You could then tell that Deploy job to auto-run whenever a change is pushed to your repository by using: \"Poll SCM\". All your tests would then be able to run by using: \"Build after other projects are built\". You can also use MySQL to save test results in the DB so that you can query the data at any time.","title":"Step 20. Future Work"},{"location":"integrations/google_cloud/ReadMe/#congratulations-youre-now-well-on-your-way-to-becoming-a-build-release-automation-engineer","text":"","title":"Congratulations! You're now well on your way to becoming a build &amp; release / automation engineer!"},{"location":"integrations/google_cloud/ReadMe/#mysql-db-setup-instructions","text":"","title":"MySQL DB setup instructions"},{"location":"integrations/google_cloud/ReadMe/#step-21-return-to-the-google-cloud-launcher-and-launch-a-mysql-instance","text":"Under \"Featured Solutions\", Click on \"MySQL\" Click on \"Launch on Compute Engine\" Give the instance a name Give the instance a zone Click \"Create\"","title":"Step 21. Return to the Google Cloud Launcher and launch a MySQL Instance"},{"location":"integrations/google_cloud/ReadMe/#step-22-get-the-connection-credentials-for-your-new-mysql-instance","text":"Under the Google Cloud Platform menu, go to \"Compute Engine\" Find your new MySQL instance and then write down the value written in the \"External IP\" section. Under the Google Cloud Platform menu, go to \"Deployment Manager\" Find your new MySQL instance and then click on it. Write down the values for Admin username and password. (Username should be \"root\")","title":"Step 22. Get the Connection credentials for your new MySQL Instance"},{"location":"integrations/google_cloud/ReadMe/#step-23-get-a-mysql-gui-tool-so-that-you-can-connect-to-your-mysql-instance","text":"You can download MySQL Workbench for this.","title":"Step 23. Get a MySQL GUI tool so that you can connect to your MySQL Instance"},{"location":"integrations/google_cloud/ReadMe/#step-24-create-a-new-connection-to-your-mysql-instance","text":"Use the MySQL DB credentials that you saved in Step 21 for this.","title":"Step 24. Create a new connection to your MySQL Instance"},{"location":"integrations/google_cloud/ReadMe/#step-25-create-a-new-databaseschema-in-your-mysql-instance","text":"You can name your database/schema test_db .","title":"Step 25. Create a new database/schema in your MySQL Instance"},{"location":"integrations/google_cloud/ReadMe/#step-26-create-the-necessary-tables-in-your-mysql-databaseschema","text":"Run the create_db_tables.sql script in your MySQL database/schema to create all the required DB tables.","title":"Step 26. Create the necessary tables in your MySQL database/schema"},{"location":"integrations/google_cloud/ReadMe/#step-27-have-your-local-clone-of-seleniumbase-connect-to-your-mysql-db-instance","text":"Update the MySQL connection details in your settings.py file to use the credentials that you saved in Step 21.","title":"Step 27. Have your local clone of SeleniumBase connect to your MySQL DB Instance"},{"location":"integrations/google_cloud/ReadMe/#step-28-have-your-seleniumbase-jenkins-jobs-use-your-mysql-db-instance","text":"For the \"Execute shell\", use the following as your updated \"Command\": pytest examples/test_suite.py --headless --with-db_reporting Click \"Save\" when you're done.","title":"Step 28. Have your SeleniumBase Jenkins jobs use your MySQL DB Instance"},{"location":"integrations/google_cloud/ReadMe/#step-29-run-your-new-jenkins-job","text":"Click on \"Build Now\" If all goes well, you should be seeing new rows appear in your MySQL DB tables.","title":"Step 29. Run your new Jenkins job"},{"location":"integrations/google_cloud/ReadMe/#step-30-congratulations-youve-successfully-completed-this-tutorial","text":"","title":"Step 30. Congratulations! You've successfully completed this tutorial!"},{"location":"integrations/katalon/ReadMe/","text":"Converting Katalon/Selenium IDE recordings into SeleniumBase test scripts  00b6 Katalon Recorder / Selenium IDE is a tool that allows you to record and playback actions performed inside a web browser. It's available as a downloadable Chrome extension and a downloadable Firefox extension . The Katalon Recorder comes with an option to export recordings as various WebDriver test scripts, one of which is Python 2 (WebDriver + unittest) . Unfortunately, these natively-exported scripts can be very messy and don't always run reliably. The purpose of this converter is to clean up and improve the scripts so that they can be used in production-level environments. Step 1: Make a recording with the Katalon Recorder  00b6 Step 2: Export your recording as a Python 2 Webdriver script  00b6 {} Export => Python 2 (WebDriver + unittest) => Save As File Step 3: Run seleniumbase convert on your exported Python file  00b6 seleniumbase convert [MY_TEST.py] You should see a [MY_TEST_SB.py] file appear in the folder. ( _SB is added to the file name so that the original file stays intact in case you still need it.) This new clean & reliable SeleniumBase test script is ready to be added into your test suite for running.","title":"Katalon Recorder"},{"location":"integrations/katalon/ReadMe/#converting-katalonselenium-ide-recordings-into-seleniumbase-test-scripts","text":"Katalon Recorder / Selenium IDE is a tool that allows you to record and playback actions performed inside a web browser. It's available as a downloadable Chrome extension and a downloadable Firefox extension . The Katalon Recorder comes with an option to export recordings as various WebDriver test scripts, one of which is Python 2 (WebDriver + unittest) . Unfortunately, these natively-exported scripts can be very messy and don't always run reliably. The purpose of this converter is to clean up and improve the scripts so that they can be used in production-level environments.","title":"Converting Katalon/Selenium IDE recordings into SeleniumBase test scripts"},{"location":"integrations/katalon/ReadMe/#step-1-make-a-recording-with-the-katalon-recorder","text":"","title":"Step 1: Make a recording with the Katalon Recorder"},{"location":"integrations/katalon/ReadMe/#step-2-export-your-recording-as-a-python-2-webdriver-script","text":"{} Export => Python 2 (WebDriver + unittest) => Save As File","title":"Step 2: Export your recording as a Python 2 Webdriver script"},{"location":"integrations/katalon/ReadMe/#step-3-run-seleniumbase-convert-on-your-exported-python-file","text":"seleniumbase convert [MY_TEST.py] You should see a [MY_TEST_SB.py] file appear in the folder. ( _SB is added to the file name so that the original file stays intact in case you still need it.) This new clean & reliable SeleniumBase test script is ready to be added into your test suite for running.","title":"Step 3: Run seleniumbase convert on your exported Python file"},{"location":"seleniumbase/common/ReadMe/","text":"Using seleniumbase/common methods.  00b6 Part 1: Decorators - (from decorators.py )  00b6 Use these Python decorators with your test methods as needed  00b6 @retry_on_exception(tries=6, delay=1, backoff=2, max_delay=32) @rate_limited(max_per_second) Example demonstrating a rate-limited printing functionality: import unittest from seleniumbase import decorators class MyTestClass ( unittest . TestCase ): @decorators . rate_limited ( 3.5 ) # The arg is max calls per second def print_item ( self , item ): print ( item ) def test_rate_limited_printing ( self ): print ( \" \\n Running rate-limited print test:\" ) for item in range ( 1 , 11 ): self . print_item ( item ) Part 2: String/Password Obfuscation, Encryption, and Decryption  00b6 Intro  00b6 Often in your tests, you may need to login to a website to perform testing. This generally means storing passwords in plaintext formats. For security reasons, that may not be an optimal solution. For this reason, encryption/obfuscation tools have been built here to help you mask your passwords in your tests. It's not a bulletproof solution, but it can keep anyone looking over your shoulder during test creation from getting your login passwords if they don't have your encryption key, which is stored in a separate file. Usage  00b6 First, set your custom encryption/decryption key in your local clone of settings.py . (If you modify the key later, you'll need to encrypt all your passwords again.) Next, use obfuscate.py to obfuscate/encrypt passwords into coded strings: python obfuscate.py Enter password to obfuscate: ( CTRL-C to exit ) Password: ********* Verify password: Password: ********* Here is the obfuscated password: $^*ENCRYPT = RXlYMSJWTz8HSwM = ? & #$ (You can also use unobfuscate.py to encrypt passwords without having them masked while typing them. Or you can use it to decrypt an obfuscated password.) Finally, in your tests you can now decrypt obfuscated passwords for use in login methods like this: from seleniumbase import encryption ... password = encryption . decrypt ( '$^*ENCRYPT=RXlYMSJWTz8HSwM=?&#$' ) (You'll notice that encrypted strings have a common start token and end token. This is to help tell them apart from non-encrypted strings. You can customize these tokens in settings.py . The current default setting is $^*ENCRYPT= for the start token and ?&#$ for the end token.) See decryption_test.py for an example of decrypting encrypted passwords in tests.","title":"Decorators / Security"},{"location":"seleniumbase/common/ReadMe/#using-seleniumbasecommon-methods","text":"","title":"Using seleniumbase/common methods."},{"location":"seleniumbase/common/ReadMe/#part-1-decorators-from-decoratorspy","text":"","title":"Part 1: Decorators - (from decorators.py)"},{"location":"seleniumbase/common/ReadMe/#use-these-python-decorators-with-your-test-methods-as-needed","text":"@retry_on_exception(tries=6, delay=1, backoff=2, max_delay=32) @rate_limited(max_per_second) Example demonstrating a rate-limited printing functionality: import unittest from seleniumbase import decorators class MyTestClass ( unittest . TestCase ): @decorators . rate_limited ( 3.5 ) # The arg is max calls per second def print_item ( self , item ): print ( item ) def test_rate_limited_printing ( self ): print ( \" \\n Running rate-limited print test:\" ) for item in range ( 1 , 11 ): self . print_item ( item )","title":"Use these Python decorators with your test methods as needed"},{"location":"seleniumbase/common/ReadMe/#part-2-stringpassword-obfuscation-encryption-and-decryption","text":"","title":"Part 2: String/Password Obfuscation, Encryption, and Decryption"},{"location":"seleniumbase/common/ReadMe/#intro","text":"Often in your tests, you may need to login to a website to perform testing. This generally means storing passwords in plaintext formats. For security reasons, that may not be an optimal solution. For this reason, encryption/obfuscation tools have been built here to help you mask your passwords in your tests. It's not a bulletproof solution, but it can keep anyone looking over your shoulder during test creation from getting your login passwords if they don't have your encryption key, which is stored in a separate file.","title":"Intro"},{"location":"seleniumbase/common/ReadMe/#usage","text":"First, set your custom encryption/decryption key in your local clone of settings.py . (If you modify the key later, you'll need to encrypt all your passwords again.) Next, use obfuscate.py to obfuscate/encrypt passwords into coded strings: python obfuscate.py Enter password to obfuscate: ( CTRL-C to exit ) Password: ********* Verify password: Password: ********* Here is the obfuscated password: $^*ENCRYPT = RXlYMSJWTz8HSwM = ? & #$ (You can also use unobfuscate.py to encrypt passwords without having them masked while typing them. Or you can use it to decrypt an obfuscated password.) Finally, in your tests you can now decrypt obfuscated passwords for use in login methods like this: from seleniumbase import encryption ... password = encryption . decrypt ( '$^*ENCRYPT=RXlYMSJWTz8HSwM=?&#$' ) (You'll notice that encrypted strings have a common start token and end token. This is to help tell them apart from non-encrypted strings. You can customize these tokens in settings.py . The current default setting is $^*ENCRYPT= for the start token and ?&#$ for the end token.) See decryption_test.py for an example of decrypting encrypted passwords in tests.","title":"Usage"},{"location":"seleniumbase/console_scripts/ReadMe/","text":"Console Scripts SeleniumBase console scripts help you get things done more easily, such as installing web drivers, creating a test directory with necessary configuration files, converting old WebDriver unittest scripts into SeleniumBase code, translating tests into multiple languages, and using the Selenium Grid. Usage: seleniumbase [COMMAND] [PARAMETERS] (simplified): sbase [COMMAND] [PARAMETERS] To list all commands: seleniumbase --help ( For running tests, use pytest with SeleniumBase . ) install  00b6 Usage: sbase install [DRIVER] [VERSION] (Drivers: chromedriver , geckodriver , edgedriver , iedriver , operadriver ) (Versions: latest or a specific driver version. If none specified, installs the default version.) Examples: sbase install chromedriver Options: latest : Output: Installs the specified webdriver. ( chromedriver is required for Google Chrome automation) ( geckodriver is required for Mozilla Firefox automation) ( edgedriver is required for Microsoft Edge automation) ( iedriver is required for Internet Explorer automation) ( operadriver is required for Opera Browser automation) options  00b6 Usage: sbase options Output: Displays common pytest command-line options that are available when using SeleniumBase. mkdir  00b6 Usage: sbase mkdir [DIRECTORY] [OPTIONS] Example: sbase mkdir ui_tests Options: -b / --basic (Only config files. No tests added.) Output: Creates a new folder for running SBase scripts. The new folder contains default config files, sample tests for helping new users get started, and Python boilerplates for setting up customized test frameworks. mkfile  00b6 Usage: sbase mkfile [FILE.py] [OPTIONS] Example: sbase mkfile new_test.py Options: -b / --basic (Basic boilerplate / single-line test) Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new SeleniumBase test file with boilerplate code. If the file already exists, an error is raised. By default, uses English mode and creates a boilerplate with the 5 most common SeleniumBase methods, which are \"open\", \"type\", \"click\", \"assert_element\", and \"assert_text\". If using the basic boilerplate option, only the \"open\" method is included. mkpres  00b6 Usage: sbase mkpres [FILE.py] [LANG] Example: sbase mkpres new_presentation.py --en Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new presentation with 3 example slides. If the file already exists, an error is raised. By default, the slides are written in English. Slides use \"serif\" theme & \"fade\" transition. This code can be used as a base boilerplate. print  00b6 Usage: sbase print [FILE] [OPTIONS] Options: -n (Add line Numbers to the rows) Output: Prints the code/text of any file with syntax-highlighting. translate  00b6 Usage: sbase translate [SB_FILE.py] [LANGUAGE] [ACTION] Languages: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Actions: -p / --print (Print translation output to the screen) -o / --overwrite (Overwrite the file being translated) -c / --copy (Copy the translation to a new .py file) Options: -n (include line Numbers when using the Print action) Output: Translates a SeleniumBase Python file into the language specified. Method calls and \"import\" lines get swapped. Both a language and an action must be specified. The -p action can be paired with one other action. When running with -c (or --copy ), the new file name will be the original name appended with an underscore plus the 2-letter language code of the new language. (Example: Translating \"test_1.py\" into Japanese with -c will create a new file called \"test_1_ja.py\".) convert  00b6 Usage: sbase convert [WEBDRIVER_UNITTEST_FILE.py] Output: Converts a Selenium IDE exported WebDriver unittest file into a SeleniumBase file. Adds _SB to the new file name while keeping the original file intact. Works with Katalon Recorder scripts. See The Recorder ReadMe for details. extract-objects  00b6 Usage: sbase extract-objects [SB_FILE.py] Output: Creates page objects based on selectors found in a seleniumbase Python file and saves those objects to the \"page_objects.py\" file in the same folder as the tests. inject-objects  00b6 Usage: sbase inject-objects [SB_FILE.py] [OPTIONS] Options: -c , --comments (Add object selectors to the comments.) Output: Takes the page objects found in the \"page_objects.py\" file and uses those to replace matching selectors in the selected seleniumbase Python file. objectify  00b6 Usage: sbase objectify [SB_FILE.py] [OPTIONS] Options: -c , --comments (Add object selectors to the comments.) Output: A modified version of the file where the selectors have been replaced with variable names defined in \"page_objects.py\", supporting the Page Object Pattern. (This has the same outcome as combining extract-objects with inject-objects ) revert-objects  00b6 Usage: sbase revert-objects [SB_FILE.py] [OPTIONS] Options: -c , --comments (Keep existing comments for the lines.) Output: Reverts the changes made by seleniumbase objectify ... or seleniumbase inject-objects ... when run against a seleniumbase Python file. Objects will get replaced by selectors stored in the \"page_objects.py\" file. encrypt / obfuscate  00b6 Usage: sbase encrypt OR sbase obfuscate Output: Runs the password encryption/obfuscation tool. (Where you can enter a password to encrypt/obfuscate.) decrypt / unobfuscate  00b6 Usage: sbase decrypt OR sbase unobfuscate Output: Runs the password decryption/unobfuscation tool. (Where you can enter an encrypted password to decrypt.) download  00b6 Usage: sbase download server Output: Downloads the Selenium Server JAR file for Grid usage. (That JAR file is required when using a Selenium Grid) grid-hub  00b6 Usage: sbase grid-hub {start|stop|restart} [OPTIONS] Options: -v , --verbose (Increases verbosity of logging output.) --timeout=TIMEOUT (Close idle browser windows after TIMEOUT seconds.) Output: Controls the Selenium Grid Hub server, which allows for running tests on multiple machines in parallel to speed up test runs and reduce the total time of test suite execution. You can start, restart, or stop the Grid Hub server. grid-node  00b6 Usage: sbase grid-node {start|stop|restart} [OPTIONS] Options: --hub=HUB_IP (The Grid Hub IP Address to connect to.) (Default: 127.0.0.1 ) -v , --verbose (Increases verbosity of logging output.) Output: Controls the Selenium Grid node, which serves as a worker machine for your Selenium Grid Hub server. You can start, restart, or stop the Grid node.","title":"Console Scripts"},{"location":"seleniumbase/console_scripts/ReadMe/#install","text":"Usage: sbase install [DRIVER] [VERSION] (Drivers: chromedriver , geckodriver , edgedriver , iedriver , operadriver ) (Versions: latest or a specific driver version. If none specified, installs the default version.) Examples: sbase install chromedriver Options: latest : Output: Installs the specified webdriver. ( chromedriver is required for Google Chrome automation) ( geckodriver is required for Mozilla Firefox automation) ( edgedriver is required for Microsoft Edge automation) ( iedriver is required for Internet Explorer automation) ( operadriver is required for Opera Browser automation)","title":"install"},{"location":"seleniumbase/console_scripts/ReadMe/#options","text":"Usage: sbase options Output: Displays common pytest command-line options that are available when using SeleniumBase.","title":"options"},{"location":"seleniumbase/console_scripts/ReadMe/#mkdir","text":"Usage: sbase mkdir [DIRECTORY] [OPTIONS] Example: sbase mkdir ui_tests Options: -b / --basic (Only config files. No tests added.) Output: Creates a new folder for running SBase scripts. The new folder contains default config files, sample tests for helping new users get started, and Python boilerplates for setting up customized test frameworks.","title":"mkdir"},{"location":"seleniumbase/console_scripts/ReadMe/#mkfile","text":"Usage: sbase mkfile [FILE.py] [OPTIONS] Example: sbase mkfile new_test.py Options: -b / --basic (Basic boilerplate / single-line test) Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new SeleniumBase test file with boilerplate code. If the file already exists, an error is raised. By default, uses English mode and creates a boilerplate with the 5 most common SeleniumBase methods, which are \"open\", \"type\", \"click\", \"assert_element\", and \"assert_text\". If using the basic boilerplate option, only the \"open\" method is included.","title":"mkfile"},{"location":"seleniumbase/console_scripts/ReadMe/#mkpres","text":"Usage: sbase mkpres [FILE.py] [LANG] Example: sbase mkpres new_presentation.py --en Language Options: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Output: Creates a new presentation with 3 example slides. If the file already exists, an error is raised. By default, the slides are written in English. Slides use \"serif\" theme & \"fade\" transition. This code can be used as a base boilerplate.","title":"mkpres"},{"location":"seleniumbase/console_scripts/ReadMe/#print","text":"Usage: sbase print [FILE] [OPTIONS] Options: -n (Add line Numbers to the rows) Output: Prints the code/text of any file with syntax-highlighting.","title":"print"},{"location":"seleniumbase/console_scripts/ReadMe/#translate","text":"Usage: sbase translate [SB_FILE.py] [LANGUAGE] [ACTION] Languages: --en / --English | --zh / --Chinese --nl / --Dutch | --fr / --French --it / --Italian | --ja / --Japanese --ko / --Korean | --pt / --Portuguese --ru / --Russian | --es / --Spanish Actions: -p / --print (Print translation output to the screen) -o / --overwrite (Overwrite the file being translated) -c / --copy (Copy the translation to a new .py file) Options: -n (include line Numbers when using the Print action) Output: Translates a SeleniumBase Python file into the language specified. Method calls and \"import\" lines get swapped. Both a language and an action must be specified. The -p action can be paired with one other action. When running with -c (or --copy ), the new file name will be the original name appended with an underscore plus the 2-letter language code of the new language. (Example: Translating \"test_1.py\" into Japanese with -c will create a new file called \"test_1_ja.py\".)","title":"translate"},{"location":"seleniumbase/console_scripts/ReadMe/#convert","text":"Usage: sbase convert [WEBDRIVER_UNITTEST_FILE.py] Output: Converts a Selenium IDE exported WebDriver unittest file into a SeleniumBase file. Adds _SB to the new file name while keeping the original file intact. Works with Katalon Recorder scripts. See The Recorder ReadMe for details.","title":"convert"},{"location":"seleniumbase/console_scripts/ReadMe/#extract-objects","text":"Usage: sbase extract-objects [SB_FILE.py] Output: Creates page objects based on selectors found in a seleniumbase Python file and saves those objects to the \"page_objects.py\" file in the same folder as the tests.","title":"extract-objects"},{"location":"seleniumbase/console_scripts/ReadMe/#inject-objects","text":"Usage: sbase inject-objects [SB_FILE.py] [OPTIONS] Options: -c , --comments (Add object selectors to the comments.) Output: Takes the page objects found in the \"page_objects.py\" file and uses those to replace matching selectors in the selected seleniumbase Python file.","title":"inject-objects"},{"location":"seleniumbase/console_scripts/ReadMe/#objectify","text":"Usage: sbase objectify [SB_FILE.py] [OPTIONS] Options: -c , --comments (Add object selectors to the comments.) Output: A modified version of the file where the selectors have been replaced with variable names defined in \"page_objects.py\", supporting the Page Object Pattern. (This has the same outcome as combining extract-objects with inject-objects )","title":"objectify"},{"location":"seleniumbase/console_scripts/ReadMe/#revert-objects","text":"Usage: sbase revert-objects [SB_FILE.py] [OPTIONS] Options: -c , --comments (Keep existing comments for the lines.) Output: Reverts the changes made by seleniumbase objectify ... or seleniumbase inject-objects ... when run against a seleniumbase Python file. Objects will get replaced by selectors stored in the \"page_objects.py\" file.","title":"revert-objects"},{"location":"seleniumbase/console_scripts/ReadMe/#encrypt-obfuscate","text":"Usage: sbase encrypt OR sbase obfuscate Output: Runs the password encryption/obfuscation tool. (Where you can enter a password to encrypt/obfuscate.)","title":"encrypt / obfuscate"},{"location":"seleniumbase/console_scripts/ReadMe/#decrypt-unobfuscate","text":"Usage: sbase decrypt OR sbase unobfuscate Output: Runs the password decryption/unobfuscation tool. (Where you can enter an encrypted password to decrypt.)","title":"decrypt / unobfuscate"},{"location":"seleniumbase/console_scripts/ReadMe/#download","text":"Usage: sbase download server Output: Downloads the Selenium Server JAR file for Grid usage. (That JAR file is required when using a Selenium Grid)","title":"download"},{"location":"seleniumbase/console_scripts/ReadMe/#grid-hub","text":"Usage: sbase grid-hub {start|stop|restart} [OPTIONS] Options: -v , --verbose (Increases verbosity of logging output.) --timeout=TIMEOUT (Close idle browser windows after TIMEOUT seconds.) Output: Controls the Selenium Grid Hub server, which allows for running tests on multiple machines in parallel to speed up test runs and reduce the total time of test suite execution. You can start, restart, or stop the Grid Hub server.","title":"grid-hub"},{"location":"seleniumbase/console_scripts/ReadMe/#grid-node","text":"Usage: sbase grid-node {start|stop|restart} [OPTIONS] Options: --hub=HUB_IP (The Grid Hub IP Address to connect to.) (Default: 127.0.0.1 ) -v , --verbose (Increases verbosity of logging output.) Output: Controls the Selenium Grid node, which serves as a worker machine for your Selenium Grid Hub server. You can start, restart, or stop the Grid node.","title":"grid-node"},{"location":"seleniumbase/masterqa/ReadMe/","text":"MasterQA combines automation with manual verification steps.  00b6 Here's example code from basic_masterqa_test_0.py : self . open ( \"https://xkcd.com/1700/\" ) self . verify ( \"Do you see a webcomic?\" ) self . highlight_click ( 'link=Blag' ) self . verify ( 'Do you see a blog archive?' ) self . highlight_update_text ( \"input#s\" , \"Dragons \\n \" ) self . verify ( 'Do you see \"dragons\" in the search results?' ) After each automation checkpoint, a pop-up window will ask the user questions for each verification command. When the test run completes, as seen from this longer example , you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.) You may have noticed the Incomplete Test Runs row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps. How to run the example tests from scratch  00b6 git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install -r requirements.txt --upgrade python setup.py develop cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done. Check out masterqa_test_1.py to learn how to write your own MasterQA tests  00b6 You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .","title":"Master QA Hybrid Mode"},{"location":"seleniumbase/masterqa/ReadMe/#masterqa-combines-automation-with-manual-verification-steps","text":"Here's example code from basic_masterqa_test_0.py : self . open ( \"https://xkcd.com/1700/\" ) self . verify ( \"Do you see a webcomic?\" ) self . highlight_click ( 'link=Blag' ) self . verify ( 'Do you see a blog archive?' ) self . highlight_update_text ( \"input#s\" , \"Dragons \\n \" ) self . verify ( 'Do you see \"dragons\" in the search results?' ) After each automation checkpoint, a pop-up window will ask the user questions for each verification command. When the test run completes, as seen from this longer example , you'll reach the results page that appears after answering all the verification questions. (Failed verifications generate links to screenshots and log files.) You may have noticed the Incomplete Test Runs row on the results page. If the value for that is not zero, it means that one of the automated steps failed. This could happen if you tell your script to perform an action on an element that doesn't exist. Now that we're mixing automation with manual QA, it's good to tell apart the failures from each. The results_table CSV file contains a spreadsheet with the details of each failure (if any) for both manual and automated steps.","title":"MasterQA combines automation with manual verification steps."},{"location":"seleniumbase/masterqa/ReadMe/#how-to-run-the-example-tests-from-scratch","text":"git clone https://github.com/seleniumbase/SeleniumBase.git cd SeleniumBase pip install -r requirements.txt --upgrade python setup.py develop cd examples/master_qa pytest basic_masterqa_test_0.py pytest masterqa_test_1.py At the end of your test run, you'll receive a report with results, screenshots, and log files. Close the Results Page window when you're done.","title":"How to run the example tests from scratch"},{"location":"seleniumbase/masterqa/ReadMe/#check-out-masterqa_test_1py-to-learn-how-to-write-your-own-masterqa-tests","text":"You'll notice that tests are written the same way as regular SeleniumBase tests, with the key difference being a different import: from seleniumbase import MasterQA rather than from seleniumbase import BaseCase . Now your Python test class will import MasterQA instead of BaseCase . To add a manual verification step, use self.verify() in the code after each part of your test that needs a manual verification step. If you want to include a custom question, add text inside that call (in quotes). Example: self . verify () self . verify ( \"Can you find the moon?\" ) MasterQA is powered by SeleniumBase , the most advanced open-source automation framework on the Planet .","title":"Check out masterqa_test_1.py to learn how to write your own MasterQA tests"},{"location":"seleniumbase/utilities/selenium_grid/ReadMe/","text":"The Selenium Grid Hub: The Selenium Grid Hub lets you distribute tests to run in parallel across multiple node machines. Each node machine can then run its own allocation of tests. This allows you to run a large suite of tests very quickly. Running the Selenium Grid Hub: The following commands will work once you've installed seleniumbase. Downloading the Selenium Server JAR file: seleniumbase download server * (Required for using your own Selenium Grid) Grid Hub server controls: seleniumbase grid-hub { start | stop | restart } [ OPTIONS ] Options: -v / --verbose (Increases verbosity of logging output.) --timeout=TIMEOUT (Close idle browser after TIMEOUT sec.) Grid node server controls: seleniumbase grid-node { start | stop | restart } --hub =[ HUB_IP ] [ OPTIONS ] Options: -v / --verbose (Increases verbosity of logging output.) --hub=[HUB_IP] (Specifies the Grid Hub to connect to. Default: \"127.0.0.1\".) When the Grid Hub Console is up and running, you'll be able to find it here: http://127.0.0.1:4444/grid/console Now you can run your tests on the Selenium Grid: pytest test_suite.py --server = IP_ADDRESS --port = 4444 You can also run your tests on someone else's Selenium Grid to avoid managing your own. Here are some Selenium Grids that you can use (and the run command format): BrowserStack Selenium Grid: pytest my_first_test.py --server = USERNAME:KEY@hub.browserstack.com --port = 80 Sauce Labs Selenium Grid: pytest my_first_test.py --server = USERNAME:KEY@ondemand.saucelabs.com --port = 80 TestingBot Selenium Grid: pytest my_first_test.py --server = USERNAME:KEY@hub.testingbot.com --port = 80 CrossBrowserTesting Selenium Grid: pytest my_first_test.py --server = USERNAME:KEY@hub.crossbrowsertesting.com --port = 80 LambdaTest Selenium Grid: pytest my_first_test.py --server = USERNAME:KEY@hub.lambdatest.com --port = 80 (For setting browser desired capabilities while running Selenium remotely, see the desired capabilities documentation and the sample files located in SeleniumBase/examples/capabilities ) More info about the Selenium Grid Hub can be found here: https://github.com/SeleniumHQ/selenium/wiki/Grid2","title":"Selenium Grid"},{"location":"seleniumbase/utilities/selenium_ide/ReadMe/","text":"Converting Katalon recordings into SeleniumBase test scripts  00b6 Katalon Recorder (Selenium IDE) is a tool that allows you to record and playback actions performed inside a web browser. It's available as a downloadable Chrome extension and a downloadable Firefox extension . The Katalon Recorder comes with an option to export recordings as various WebDriver test scripts, one of which is Python 2 (WebDriver + unittest) . Unfortunately, these natively-exported scripts can be very messy and don't always run reliably. The purpose of this converter is to clean up and improve the scripts so that they can be used in production-level environments. Step 1: Make a recording with the Katalon Recorder  00b6 Step 2: Export your recording as a Python 2 Webdriver script  00b6 {} Export => Python 2 (WebDriver + unittest) => Save As File Step 3: Run seleniumbase convert on your exported Python file  00b6 seleniumbase convert [MY_TEST.py] You should see a [MY_TEST_SB.py] file appear in the folder. ( _SB is added to the file name so that the original file stays intact in case you still need it.) This new clean & reliable SeleniumBase test script is ready to be added into your test suite for running.","title":"Recorder Export/Convert"},{"location":"seleniumbase/utilities/selenium_ide/ReadMe/#converting-katalon-recordings-into-seleniumbase-test-scripts","text":"Katalon Recorder (Selenium IDE) is a tool that allows you to record and playback actions performed inside a web browser. It's available as a downloadable Chrome extension and a downloadable Firefox extension . The Katalon Recorder comes with an option to export recordings as various WebDriver test scripts, one of which is Python 2 (WebDriver + unittest) . Unfortunately, these natively-exported scripts can be very messy and don't always run reliably. The purpose of this converter is to clean up and improve the scripts so that they can be used in production-level environments.","title":"Converting Katalon recordings into SeleniumBase test scripts"},{"location":"seleniumbase/utilities/selenium_ide/ReadMe/#step-1-make-a-recording-with-the-katalon-recorder","text":"","title":"Step 1: Make a recording with the Katalon Recorder"},{"location":"seleniumbase/utilities/selenium_ide/ReadMe/#step-2-export-your-recording-as-a-python-2-webdriver-script","text":"{} Export => Python 2 (WebDriver + unittest) => Save As File","title":"Step 2: Export your recording as a Python 2 Webdriver script"},{"location":"seleniumbase/utilities/selenium_ide/ReadMe/#step-3-run-seleniumbase-convert-on-your-exported-python-file","text":"seleniumbase convert [MY_TEST.py] You should see a [MY_TEST_SB.py] file appear in the folder. ( _SB is added to the file name so that the original file stays intact in case you still need it.) This new clean & reliable SeleniumBase test script is ready to be added into your test suite for running.","title":"Step 3: Run seleniumbase convert on your exported Python file"}]}